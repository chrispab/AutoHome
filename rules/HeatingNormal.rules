
rule "React on message to send target temperatures to zone setpoints"
when
    //Item masterHeatingMode received update or //master mode has changed
    Item Heating_UpdateHeaters received command ON //cron job has requested we send updates to setpoints
then
//avoid changing a zone sp if zone heating mode 1 , local auto
    Heating_UpdateHeaters.postUpdate(OFF)
// MASTER modes are
//PROGRAMME_CONTROL=Programme Control,OFF_SUMMER=Off Summer,LOCAL=Local
//local room modes are 0=Off,1=Local Control,2=Master Controlled
    logInfo("heating_mode.rules", "MASTER Heating Mode: " + masterHeatingMode.state)
    switch masterHeatingMode.state {
        case "PROGRAMME_CONTROL": { //normal mode is under master control and folows 'normal' rules
            logInfo("heating_mode.rules", "processing case NORMAL MASTER Heating Mode: ")
            if(CT_Heating_Mode.state == 2) { //if mode is master control - 'normal' - auto - 2
                CT_Heating_Setpoint.state = (CT_Heating_PresetTempNormal.state )
            }
            if(FR_Heating_Mode.state == 2) { //if zone mode is master control
                   FR_Heating_Setpoint.state = (FR_Heating_PresetTempNormal.state)
            }
            if(E_BR_Heating_Mode.state == 2) { //if mode is master control
                E_BR_Heating_Setpoint.state = (E_BR_Heating_PresetTempNormal.state)
            }
            if(Attic_Heating_Mode.state == 2) { //if mode is master control
                Attic_Heating_Setpoint.state = (Attic_Heating_PresetTempNormal.state)
            }
            if(J_BR_Heating_Mode.state == 2) { //if mode is master control
                J_BR_Heating_Setpoint.state = (J_BR_Heating_PresetTempNormal.state)
            }
            if(Office_Heating_Mode.state == 2) { //if mode is master control
                Office_Heating_Setpoint.state = (Office_Heating_PresetTempNormal.state)
            }
            if(Hall_Heating_Mode.state == 2) { //if mode is master control
                Hall_Heating_Setpoint.state = (Hall_Heating_PresetTempNormal.state)
            }
        }


        case "OFF_SUMMER": {
            logInfo("heating_mode.rules", "processing case OFF_SUMMER MASTER Heating Mode: ")
            CT_Heating_Setpoint.postUpdate(15.0) //(Hall_Heating_PresetTempNormal.state)
            CT_Heating_Mode.postUpdate(0)
            Hall_Heating_Setpoint.postUpdate(15.0) //(Hall_Heating_PresetTempNormal.state)
            Hall_Heating_Mode.postUpdate(0)
            FR_Heating_Setpoint.postUpdate(15.0) //(Hall_Heating_PresetTempNormal.state)
            FR_Heating_Mode.postUpdate(0) 
            Office_Heating_Setpoint.postUpdate(15.0) //(Hall_Heating_PresetTempNormal.state)
            Office_Heating_Mode.postUpdate(0)
            E_BR_Heating_Setpoint.postUpdate(15.0) //(Hall_Heating_PresetTempNormal.state)
            E_BR_Heating_Mode.postUpdate(0)
            J_BR_Heating_Setpoint.postUpdate(15.0) //(Hall_Heating_PresetTempNormal.state)
            J_BR_Heating_Mode.postUpdate(0)
            Attic_Heating_Setpoint.postUpdate(15.0) //(Hall_Heating_PresetTempNormal.state)
            Attic_Heating_Mode.postUpdate(0)                                                
        }
        case "LOCAL": {
            logInfo("heating_mode.rules", "processing case LOCAL MASTER Heating Mode: ")

        //     LR_Heating_TargetTemp.sendCommand(13.0)//note this is a command to a device that uses internal setpoint
        //not like a sonoff - switching in openhab rules, the one above has its own internal logic
        //     BE_Heating_TargetTemp.sendCommand(13.0)
        //     BA_Heating_TargetTemp.sendCommand(13.0)
        }
        default : { logError("heating_mode.rules", "Heating Mode unknown: " + masterHeatingMode.state) }
    }
end


rule "Initialize uninitialized virtual Items"
when
    System started
then
 //if (masterHeatingMode.state == NULL) masterHeatingMode.postUpdate("PROGRAMME_CONTROL")
    createTimer(now.plusSeconds(30)) [ |
        logInfo("HeatingNormal.rules", "Executing 'System started' rule for Heatinguninitialized virtual Items")
       if (masterHeatingMode.state === NULL) 
            masterHeatingMode.postUpdate("PROGRAMME_CONTROL")
            //gHeatingModes.members.filter[item | item.state === NULL].forEach[item | item.postUpdate("Master Controlled")]
   ]
       
//     createTimer(now.plusSeconds(60)) [ |
//        //if (gHeatingSetPoints.members.filter[item | item.state == 2].forEach[item | item.postUpdate(15.0)]) 
//          //masterHeatingMode.postUpdate("PROGRAMME_CONTROL")
//         logInfo("HeatingNormal.rules", "'System started' rule for Heating-set all SPs to same val" + 19.0)

//        gHeatingSetPoints.members.filter[item | item.state == NULL].forEach[item | item.postUpdate(19.0)]
//    ]


end

// rule "Initialize uninitialized virtual Items"
// when
//     System started
// then
//     createTimer(now.plusSeconds(180)) [ |
//         logInfo(filename, "Executing 'System started' rule for Heating")
//         if (Heating_Mode.state == NULL) Heating_Mode.postUpdate("NORMAL")
//         Heating_PresetNormal_Group.members.filter[item | item.state == NULL].forEach[item | item.postUpdate(19.0)]
//     ]
// end