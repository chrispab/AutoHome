var Timer timer1 = null

rule "Initialize uninitialized virtual Items"
when
    System started
then

    if(timer1 === null) {
        timer1 = createTimer(now.plusSeconds(30)) [| 
        logInfo("HeatingNormal.rules", "Executing 'System started' rule for Heating Initialize uninitialized virtual Items")
        if (masterHeatingMode.state === NULL) 
            masterHeatingMode.postUpdate("PROGRAMME_CONTROL")
        timer1 = null]
    }
 //if (masterHeatingMode.state == NULL) masterHeatingMode.postUpdate("PROGRAMME_CONTROL")


    // createTimer(now.plusSeconds(30)) [ |
    //     logInfo("HeatingNormal.rules", "Executing 'System started' rule for Heating init uninitialized virtual Items")
    //    if (masterHeatingMode.state === NULL) 
    //         masterHeatingMode.postUpdate("PROGRAMME_CONTROL")
            //gHeatingModes.members.filter[item | item.state === NULL].forEach[item | item.postUpdate("Master Controlled")]
//    ]
       
end


rule "React on message to send target temperatures to zone setpoints"
when
    //Item masterHeatingMode received update or //master mode has changed
    Item Heating_UpdateHeaters received command ON //cron job has requested we send updates to setpoints
then
//avoid changing a zone sp if zone heating mode 1 , local auto
    Heating_UpdateHeaters.postUpdate(OFF)
// MASTER modes are
//PROGRAMME_CONTROL=Programme Control,OFF_SUMMER=Off Summer,LOCAL=Local
//local room modes are 0=Off,1=Local Control,2=Master Controlled
    logInfo("heating_mode.rules", "MASTER Heating Mode: " + masterHeatingMode.state)
    switch masterHeatingMode.state {
        case "PROGRAMME_CONTROL": { //normal mode is under master control and folows 'normal' rules
            logInfo("heating_mode.rules", "processing case MASTER Heating Mode : ")
            if(conservatory_Heating_Mode.state == 2) { //if mode is master control - 'normal' - auto - 2
                conservatory_TargetTemperature.state = (conservatory_Heating_PresetTempNormal.state )
            }
            if(frontRoom_Heating_Mode.state == 2) { //if zone mode is master control
                   frontRoom_TargetTemperature.state = (frontRoom_Heating_PresetTempNormal.state)
            }
            if(elsiesRoom_Heating_Mode.state == 2) { //if mode is master control
                elsiesRoom_TargetTemperature.state = (elsiesRoom_Heating_PresetTempNormal.state)
            }
            if(attic_Heating_Mode.state == 2) { //if mode is master control
                attic_TargetTemperature.state = (attic_Heating_PresetTempNormal.state)
            }
            if(bedroom_Heating_Mode.state == 2) { //if mode is master control
                bedroom_TargetTemperature.state = (bedroom_Heating_PresetTempNormal.state)
            }
            if(office_Heating_Mode.state == 2) { //if mode is master control
                office_TargetTemperature.state = (office_Heating_PresetTempNormal.state)
            }
            if(hall_Heating_Mode.state == 2) { //if mode is master control
                hall_TargetTemperature.state = (hall_Heating_PresetTempNormal.state)
            }
        }


        case "OFF_SUMMER": {
            logInfo("heating_mode.rules", "processing case OFF_SUMMER MASTER Heating Mode: ")
            conservatory_TargetTemperature.postUpdate(15.0) //(hall_Heating_PresetTempNormal.state)
            //conservatory_TargetTemperature.sendCommand(15.0) //(hall_Heating_PresetTempNormal.state)
            conservatory_Heating_Mode.postUpdate(0)
            hall_TargetTemperature.postUpdate(15.0) //(hall_Heating_PresetTempNormal.state)
            hall_Heating_Mode.postUpdate(0)
            frontRoom_TargetTemperature.postUpdate(15.0) //(hall_Heating_PresetTempNormal.state)
            frontRoom_Heating_Mode.postUpdate(0) 
            office_TargetTemperature.postUpdate(15.0) //(hall_Heating_PresetTempNormal.state)
            office_Heating_Mode.postUpdate(0)
            elsiesRoom_TargetTemperature.postUpdate(15.0) //(hall_Heating_PresetTempNormal.state)
            elsiesRoom_Heating_Mode.postUpdate(0)
            bedroom_TargetTemperature.postUpdate(15.0) //(hall_Heating_PresetTempNormal.state)
            bedroom_Heating_Mode.postUpdate(0)
            attic_TargetTemperature.postUpdate(15.0) //(hall_Heating_PresetTempNormal.state)
            attic_Heating_Mode.postUpdate(0)                                                
        }
        case "LOCAL": {
            logInfo("heating_mode.rules", "processing case LOCAL MASTER Heating Mode: ")
        }
        default : { logError("heating_mode.rules", "Heating Mode unknown: " + masterHeatingMode.state) }
    }
end
