rule "Conservatory heating"
when
    Item CT_HeatingMode changed or
    Item CT_TemperatureSetpoint changed or
    Item CT_Temperature changed
then
    logInfo("CT_heating.rules", "CT Heating Mode or temp or target happened: ")
    logInfo("CT_heating.rules", "CT Heating Mode : " + CT_HeatingMode.state)
    if (CT_HeatingMode.state == "off") {
        logInfo("CT_heating.rules", "checking conservatory Heating Mode, turn heating OFF: " + CT_HeatingMode.state)
        CT_Heater.sendCommand(OFF)
        CT_Heater.postUpdate(OFF)
    }
    else if ( (CT_HeatingMode.state == "auto") || (CT_HeatingMode.state == "manual") )  { //auto
        logInfo("CT_heating.rules", "checking conservatory Heating Mode: " + CT_HeatingMode.state)
        var Number setpoint = CT_TemperatureSetpoint.state as DecimalType
        var Number turnOnTemp = setpoint //- 0.2// calculate the turn on/off temperatures
        var Number turnOffTemp = setpoint //+ 0.1
        var Number temp = CT_Temperature.state as DecimalType // get the current temperature
        if (temp >= turnOffTemp) {  // determine whether we need to turn on/off the heater
            logInfo("CT_heating.rules", "turn CT heater OFF: " + temp)
            CT_Heater.sendCommand(OFF)
            CT_Heater.postUpdate(OFF)
        }else if (temp < turnOnTemp) {
            logInfo("CT_heating.rules", "turn CT heater ON: " + temp)
            CT_Heater.sendCommand(ON)
            CT_Heater.postUpdate(ON)
        } 
    }
end

rule "test rule"
when
    Member of gHeatingModes received update or 
    Member of gTemperatureSetpoints received update or 
    Member of gRoomTemperatures received update
then
//get room prefix
//add _heatingmode
//if heating mode == off
//  _Heater.sendCommand(OFF)
//if heating mode == auto or manual
val prefix = triggeringItem.name.split("_").get(0)

val  heatingModeName = "" + prefix + "_HeatingMode"
logInfo("RuleExamples", "====>>>> The item name...." + heatingModeName ) 
// https://community.openhab.org/t/solved-using-a-variable-to-obtain-an-item-state/61500/3

//val name = triggeringItem.name.split("_").get(0)
val HeatingMode = gHeatingModes.members.findFirst[ t | t.name == prefix + "_HeatingMode"]
logInfo("RuleExamples", "====>>>> The item HeatingMode...." + HeatingMode.state ) 
val TSetpoint = gTemperatureSetpoints.members.findFirst[ t | t.name == prefix + "_TemperatureSetpoint" ] as NumberItem
logInfo("RuleExamples", "====>>>> The item Setpoint...." + TSetpoint.state ) 
val Temperature = gRoomTemperatures.members.findFirst[ t | t.name == prefix + "_Temperature" ] as NumberItem
logInfo("RuleExamples", "====>>>> The item Temperature...." + Temperature.state )
//get the heater to control
val Heater = gRoomHeaterStates.members.findFirst[ t | t.name == prefix + "_Heater" ]
logInfo("RuleExamples", "====>>>> The item Heater...." + Heater.state ) 

 

    logInfo("Heating.rules", "A Heating Mode or temp or target happened: ")
    logInfo("Heating.rules", "Heating Mode : " + HeatingMode.state)
    if (HeatingMode.state == "off") {
        logInfo("CT_heating.rules", "checking Heating Mode, turn heating OFF: " + HeatingMode.state)
        Heater.sendCommand(OFF)
        Heater.postUpdate(OFF)
    }
    else if ( (HeatingMode.state == "auto") || (HeatingMode.state == "manual") )  { //auto
        logInfo("CT_heating.rules", "checking Heating Mode: " + HeatingMode.state)
        var Number setpoint = TSetpoint.state as DecimalType
        var Number turnOnTemp = setpoint //- 0.2// calculate the turn on/off temperatures
        var Number turnOffTemp = setpoint //+ 0.1
        var Number temp = Temperature.state as DecimalType // get the current temperature
        if (temp >= turnOffTemp) {  // determine whether we need to turn on/off the heater
            logInfo("Heating.rules", "turn Heater OFF: " + temp)
            Heater.sendCommand(OFF)
            Heater.postUpdate(OFF)
        }else if (temp < turnOnTemp) {
            logInfo("Heating.rules", "turn heater ON: " + temp)
            Heater.sendCommand(ON)
            Heater.postUpdate(ON)
        } 
    }


        // logInfo("RuleExamples", "====>>>> The item ...." + heatingModeName + "...." + triggeringItem.name + " changed state from " + triggeringItem.previousState + " to " + triggeringItem.state)
end