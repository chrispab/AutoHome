// fire regulargly for testing

// var String jsonString = (myStrom001_update.state as StringType).toString
var String jsonString = '{"room":"AT","temp":"17.5","time":"13:45"}'
var String stateSwitch = transform("JSONPATH","$.room",jsonString)
var String powerString = transform("JSONPATH","$.temp",jsonString)
// var String jsonString = "{\"room\":\"AT\",\"temp\":\"17.5\",\"time\":\"13:45\"}"

rule "02:30 - testing rules"
when
    Time cron "25 * * ? * * *"
then
    logInfo("testing.rules", "----> HI FROM TESTING.RULES ") // + masterHeatingMode.state)
    logInfo("testing.rules", "----> HI FROM TESTING.RULES -- ROOM: " + jsonString)
    stateSwitch = transform("JSONPATH","$.room",jsonString)
    powerString = transform("JSONPATH","$.temp",jsonString)
    
    logInfo("testing.rules", "----> HI FROM TESTING.RULES -- ROOM: " + stateSwitch)
    logInfo("testing.rules", "----> HI FROM TESTING.RULES -- TEMP: " + powerString)


    // Heating_UpdateHeaters.sendCommand(ON)
end

rule "Delayed Off Switch"
when
    Item Delayed_OFF_SW changed from OFF to ON
then
    logInfo("RULE", "delayed off switch")

    createTimer(now.plusSeconds(240), [|
        {sendCommand(CT_FairyLights433Socket, OFF)} //con lights
        {postUpdate(CT_FairyLights433Socket, OFF)}
        {sendCommand(DR_FairyLights433Socket, OFF)} // d room lights
        {postUpdate(DR_FairyLights433Socket, OFF)}
        {sendCommand(vCT_TVKodiSpeakers, OFF)} //tv
        {postUpdate(vCT_TVKodiSpeakers, OFF)}
        {sendCommand(CT_Soundbar433PowerSocket, OFF)} // CT_Soundbar433PowerSocket
        {postUpdate(CT_Soundbar433PowerSocket, OFF)}    
        {sendCommand(radio, OFF)} //radio
        {postUpdate(radio, OFF)}
    ])
end

