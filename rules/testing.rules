//presence rules



rule "Delayed Off Switch"
when
    Item Delayed_OFF_SW changed from OFF to ON
then
    logInfo("RULE", "delayed off switch")

        createTimer(now.plusSeconds(240), [|
        {sendCommand(socketG2_1, OFF)} //con lights
        {postUpdate(socketG2_1, OFF)}
        {sendCommand(socketG1_4, OFF)} // d room lights
        {postUpdate(socketG1_4, OFF)}
        {sendCommand(socketG2_4, OFF)} //tv
        {postUpdate(socketG2_4, OFF)}
        {sendCommand(socketG2_3, OFF)} // amp
        {postUpdate(socketG2_3, OFF)}    
        {sendCommand(socketG2_2, OFF)} //radio
        {postUpdate(socketG2_2, OFF)}
        // {sendCommand(socketG1_4, OFF)} // d room lights
        // {postUpdate(socketG1_4, OFF)}    
        //ensure heating is set to off also
        //conservatory_TargetTemperature.state = 17.0
    ])
end


rule "2 am turn off lights if i forgot"
when
    Time cron "0 30 02 ? * * *"
then
    logInfo("RULE", "turn off stuff if i forgot")
        {sendCommand(socketG2_1, OFF)} //con lights
        {postUpdate(socketG2_1, OFF)}
        {sendCommand(socketG1_4, OFF)} // d room lights
        {postUpdate(socketG1_4, OFF)}
        {sendCommand(socketG2_4, OFF)} //tv
         {postUpdate(socketG2_4, OFF)}
        // {sendCommand(socketG1_3, OFF)} // landing
        // {postUpdate(socketG1_3, OFF)}    
        {sendCommand(socketG2_2, OFF)} //radio
        {postUpdate(socketG2_2, OFF)}
    
end



rule "zone3 lights on"
when
    Item Zone3LightStatus changed from OFF to ON
then
    {sendCommand(socketG2_1, OFF)} //con lights
    {postUpdate(socketG2_1, OFF)}
    
    logInfo("RULE", "Z3 lights - on")
            createTimer(now.plusSeconds(5), [|
            {sendCommand(socketG2_1, ON)} //fan
            {postUpdate(socketG2_1, ON)}
            //{postUpdate(socketG3_2, OFF)}
   // say("What happened then?")
    logInfo("RULE", "What happened then?")

    logInfo("RULE", "pulse consv light OFF/ON")
        ])

 
end


