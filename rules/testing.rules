//presence rules
//switch on xmas lights when eslie gets home
rule "switch on lights when elsie gets home"
when
    Item ElsieSIPhone_Online changed to ON
    or
    Item JoIPhone_Online changed to ON
    or
    Item ChrisGalaxyS5_Online changed to ON
then
    if (now.getHourOfDay == 15){
        logInfo("RULE", "elsies or c or j phone connected to wifi @ 3-4 pm")
        sendCommand(gXmasLights, ON)
        sendCommand(gFairyLights, ON)
    }
end


//init virtual items on startup

//if conservatory heating in on period
//then pulse recirc fan every n mins

rule "pulse con re-circ fan when setpoint > 19"
when
    Time cron "0 0/4 * * * ?"
then
    var Number sp = CT_Heating_Setpoint.state as DecimalType // get the current temperature

    if (RecircFanEnable.state == NULL) {
        logInfo("RULE", "recirc fan enable is NULL so set to ON")
        RecircFanEnable.state = ON
    }

    if ((sp >= 19) && (RecircFanEnable.state == ON))  {
        logInfo("RULE", "pulse conservatory re-circ fan when setpoint > 19, set at:" + sp)
        {sendCommand(socketG3_2, ON)} //fan on
        {postUpdate(socketG3_2, ON)}
var Timer fanRecircTimer = null

        fanRecircTimer = createTimer(now.plusSeconds(40), [|
            {sendCommand(socketG3_2, OFF)} //fan
            {postUpdate(socketG3_2, OFF)}
            logInfo("RULE", "pulse consv fan OFF sent after n mins")
        ])
    }
    else{
        logInfo("RULE", "recirc cron ran, but recirc fan is disabled so not switching on")
    }
end


rule "Conservatory Cooling Fan"
when
    Item CT_Temperature changed
then
        var Number setpoint = 26.0 //CT_Heating_Setpoint.state as DecimalType
        var Number turnOnTemp = setpoint //- 0.2// calculate the turn on/off temperatures
        var Number turnOffTemp = setpoint - 2.0//+ 0.1
        var Number temp = CT_Temperature.state as DecimalType // get the current temperature

        // if (temp < turnOffTemp) {  // determine whether we need to turn on/off the fan
        //     socketG3_2.sendCommand(OFF)
        //     socketG3_2.postUpdate(OFF)
        // }else 
        if (temp >= turnOnTemp) {
            socketG3_2.sendCommand(ON)
            socketG3_2.postUpdate(ON)
            logInfo("RULE", "consv hot - turn on fan: " + temp)
        }
        if ((temp < turnOnTemp)  && (temp > turnOffTemp) ) {  // determine whether we need to turn on/off the fan
            socketG3_2.sendCommand(OFF)
            socketG3_2.postUpdate(OFF)
        }
end




rule "433 bridge Button 1"
when
    Item bridgeButton1 received update
then
         {sendCommand(socketG2_1, OFF)} //con lights
         {postUpdate(socketG2_1, OFF)}
     //    {sendCommand(socketG1_4, OFF)} // d room lights
       //  {postUpdate(socketG1_4, OFF)}
         {sendCommand(socketG2_4, OFF)} //tv
         {postUpdate(socketG2_4, OFF)}
         {sendCommand(socketG2_3, OFF)} // amp
        {postUpdate(socketG2_3, OFF)}    
        {sendCommand(socketG2_2, OFF)} //radio
        {postUpdate(socketG2_2, OFF)}
    //     // {sendCommand(socketG1_4, OFF)} // d room lights
    //     // {postUpdate(socketG1_4, OFF)} 
var Timer lightsTimer = null

     lightsTimer = createTimer(now.plusSeconds(240), [|
    //     {sendCommand(socketG2_1, OFF)} //con lights
    //     {postUpdate(socketG2_1, OFF)}
         {sendCommand(socketG1_4, OFF)} // d room lights
         {postUpdate(socketG1_4, OFF)}
    //     {sendCommand(socketG2_4, OFF)} //tv
    //     {postUpdate(socketG2_4, OFF)}
    //     {sendCommand(socketG1_3, OFF)} // amp
    //     {postUpdate(socketG1_3, OFF)}    
    //     {sendCommand(socketG2_2, OFF)} //radio
    //     {postUpdate(socketG2_2, OFF)}
    //     // {sendCommand(socketG1_4, OFF)} // d room lights
    //     // {postUpdate(socketG1_4, OFF)}    
    ])
    logInfo("RULE", "Item bridgeButton1 received update")

       //{sendCommand(socketG1_4, OFF)} // d room lights
         //{postUpdate(socketG1_4, OFF)}
end



rule "Delayed Off Switch"
when
    Item Delayed_OFF_SW changed
then
    logInfo("RULE", "delayed off switch")
var Timer lightsTimer2 = null

    lightsTimer2 = createTimer(now.plusSeconds(240), [|
        {sendCommand(socketG2_1, OFF)} //con lights
        {postUpdate(socketG2_1, OFF)}
        {sendCommand(socketG1_4, OFF)} // d room lights
        {postUpdate(socketG1_4, OFF)}
        {sendCommand(socketG2_4, OFF)} //tv
        {postUpdate(socketG2_4, OFF)}
        {sendCommand(socketG2_3, OFF)} // amp
        {postUpdate(socketG2_3, OFF)}    
        {sendCommand(socketG2_2, OFF)} //radio
        {postUpdate(socketG2_2, OFF)}
        // {sendCommand(socketG1_4, OFF)} // d room lights
        // {postUpdate(socketG1_4, OFF)}    
        //ensure heating is set to off also
        //CT_Heating_Setpoint.state = 17.0
    ])
end


rule "2 am turn off lights if i forgot"
when
    Time cron "0 00 02 ? * * *"
then
    logInfo("RULE", "turn off stuff if i forgot")
        {sendCommand(socketG2_1, OFF)} //con lights
        {postUpdate(socketG2_1, OFF)}
        {sendCommand(socketG1_4, OFF)} // d room lights
        {postUpdate(socketG1_4, OFF)}
        {sendCommand(socketG2_4, OFF)} //tv
         {postUpdate(socketG2_4, OFF)}
        // {sendCommand(socketG1_3, OFF)} // landing
        // {postUpdate(socketG1_3, OFF)}    
        {sendCommand(socketG2_2, OFF)} //radio
        {postUpdate(socketG2_2, OFF)}
    
end

rule "07:00 morning elsie - lights on"
when
    Time cron "0 00 07 ? * MON-FRI *"
then
    logInfo("RULE", "Morning Elsie!")
    sendCommand(socketG1_3, ON)
    sendCommand(socketG1_4, ON)
    sendCommand(socketG2_1, ON)
end




