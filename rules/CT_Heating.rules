rule "StartUp CT_Heating"
when
    System started
then
    if (CT_Heating_Mode == NULL) {
        CT_Heating_Mode.postUpdate(2) // start in master auto control mode
    }
    
end

rule "Conservatory heating"
when
    Item CT_Heating_Mode changed or
    Item CT_Heating_Setpoint changed or
    Item CT_Temperature changed
then
    //logInfo("CT_heating.rules", "CT Heating Mode: " + CT_Heating_Mode.state)
    //logInfo("CT_heating.rules", "CT Heating SP: " + CT_Heating_Setpoint.state)
    //0=Off, 1=On (local setpoint), 2=Auto (follows program), 3=Boost (1 Hour On)
    if (CT_Heating_Mode.state == 0) {
        CT_Heating.sendCommand(OFF)
        CT_Heating.postUpdate(OFF)
    }
    else if ( (CT_Heating_Mode.state == 1) || (CT_Heating_Mode.state == 2) )  { //auto
        var Number setpoint = CT_Heating_Setpoint.state as DecimalType
        var Number turnOnTemp = setpoint //- 0.2// calculate the turn on/off temperatures
        var Number turnOffTemp = setpoint //+ 0.1
        var Number temp = CT_Temperature.state as DecimalType // get the current temperature
        if (temp >= turnOffTemp) {  // determine whether we need to turn on/off the heater
            CT_Heating.sendCommand(OFF)
            CT_Heating.postUpdate(OFF)
            WiFiSocket1Power.sendCommand(OFF)
            WiFiSocket2Power.sendCommand(OFF)
           // WiFiSocket1Power.sendUpdate(OFF)
        }else if (temp < turnOnTemp) {
            CT_Heating.sendCommand(ON)
            CT_Heating.postUpdate(ON)
            WiFiSocket1Power.sendCommand(ON)
            WiFiSocket2Power.sendCommand(ON)
//  WiFiSocket1Power.sendUpdate(ON)

        } 
    }
end

