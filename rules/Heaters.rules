rule "Check if Heaters need changing"
when
    Member of gHeatingModes received update or 
    Member of gTemperatureSetpoints received update or 
    Member of gRoomTemperatures received update
then
    // https://community.openhab.org/t/solved-using-a-variable-to-obtain-an-item-state/61500/3
    logInfo("Heaters rules", "=====> A Heating Mode or target or temp got an update")

    val prefix = triggeringItem.name.split("_").get(0)
    val  heatingModeName = "" + prefix + "_HeatingMode"
    logInfo("Heaters rules", "=====> The item name is    : " + triggeringItem.name ) 
    val HeatingMode = gHeatingModes.members.findFirst[ t | t.name == prefix + "_HeatingMode"]
    logInfo("Heaters rules", "=====> The HeatingMode for : " + prefix + " is " + HeatingMode.state ) 
    val TSetpoint = gTemperatureSetpoints.members.findFirst[ t | t.name == prefix + "_TemperatureSetpoint" ] as NumberItem
    logInfo("Heaters rules", "=====> The Setpoint for    : " + prefix + " is " + TSetpoint.state ) 
    val Temperature = gRoomTemperatures.members.findFirst[ t | t.name == prefix + "_Temperature" ] as NumberItem
    logInfo("Heaters rules", "=====> The Temperature for : " + prefix + " is " + Temperature.state )
    val Heater = gRoomHeaterStates.members.findFirst[ t | t.name == prefix + "_Heater" ]
    logInfo("Heaters rules", "=====> The Heater for      : " + prefix + " is " + Heater.state ) 
    // logInfo("Heaters rules", "=====> The HeatingMode for : " + prefix + " is " + HeatingMode.state)


    if (HeatingMode.state == "off") {
        logInfo("Heaters rules", "=====> Turn heater OFF for " + prefix + " cos Heating Mode is " + HeatingMode.state)
        Heater.sendCommand(OFF)
        Heater.postUpdate(OFF)
    }
    else if ( (HeatingMode.state == "auto") || (HeatingMode.state == "manual") )  { //auto
        // logInfo("Heaters rules", "=====> checking Heating Mode: " + prefix + " : " + HeatingMode.state)
        var Number setpoint = TSetpoint.state as DecimalType
        var Number turnOnTemp = setpoint //- 0.2// calculate the turn on/off temperatures
        var Number turnOffTemp = setpoint //+ 0.1
        var Number temp = Temperature.state as DecimalType // get the current temperature

        if (temp >= turnOffTemp) {  // determine whether we need to turn on/off the heater
            logInfo("Heaters rules", "=====> Turn Heater OFF for " + prefix)
            Heater.sendCommand(OFF)
            Heater.postUpdate(OFF)
        }else if (temp < turnOnTemp) {
            logInfo("Heaters rules", "=====> Turn heater ON for  " + prefix)
            Heater.sendCommand(ON)
            Heater.postUpdate(ON)
        } 
    }
end
