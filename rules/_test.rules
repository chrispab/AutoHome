import java.util.List
import java.io.File
import java.io.BufferedReader
import java.io.FileReader
import java.util.HashMap

// var String jsonString = (myStrom001_update.state as StringType).toString
var String jsonString = '{"room":"AT","temp":"17.5","time":"13:45"}'
var String stateSwitch = transform("JSONPATH","$.room",jsonString)
var String powerString = transform("JSONPATH","$.temp",jsonString)
// var String jsonString = "{\"room\":\"AT\",\"temp\":\"17.5\",\"time\":\"13:45\"}"



rule "React on amp test switch (amptestSwitch) change/update"
when
    Item amptestSwitch received update// your condition here
then
    // your logic here
    // val String hex_code = "0xE13E29D6"
    // val dimVal =  Integer.parseInt(0xE13E29D6, 16) as Number
    var MyNumber = Long.parseLong('E13E29D6', 16) as Number // mute amp
    amplifiercode.sendCommand(MyNumber)
end


rule "React on test switch (testSwitch) change/update"
when
    Item testSwitch changed from OFF
then
    logInfo("RULE", "Turn OFF Conservatory lights via proxy")
    gConservatoryFairyLights.sendCommand(OFF)
    gConservatoryFairyLights.postUpdate(OFF)
    ZbColourBulb01Switch.sendCommand(OFF)
    testSwitch.sendCommand(OFF)

end




rule "Test"
when
    Item Virtual_Switch_1 received update
then
    logInfo("Rules","Test: Start")
    val String filePathString = "/etc/openhab2/conf/test/test.txt"
    val File filePath = new File(filePathString)
    if (filePath.exists) {
        var HashMap<String,String> test = new HashMap<String,String>
        var BufferedReader in = new BufferedReader(new FileReader(filePathString))
        var String line = ""
        while ((line = in.readLine) !== null) {
            val List<String> parts = line.split(",")
            test.put(parts.get(0), parts.get(1))
        }
        in.close
        logInfo("Rules","Test: [{}]",test.toString)
    }
    else {
        logInfo("Rules","Test: file does not exist!")
    }
    logInfo("Rules","Test: End")
end

// fire regulargly for testing



rule "02:30 - testing rules"
when
    Time cron "25 * * ? * * *"
then
    // logInfo("testing.rules", "---->TESTING.RULES ") // + masterHeatingMode.state)
    // logInfo("testing.rules", "---->TESTING.RULES -: " + jsonString)
    // stateSwitch = transform("JSONPATH","$.room",jsonString)
    // powerString = transform("JSONPATH","$.temp",jsonString)
    
    // logInfo("testing.rules", "---->TESTING.RULES -- ROOM: " + stateSwitch)
    // logInfo("testing.rules", "---->TESTING.RULES -- TEMP: " + powerString)


    // Heating_UpdateHeaters.sendCommand(ON)
end

rule "Delayed Off Switch"
when
    Item Delayed_OFF_SW changed from OFF to ON
then
    logInfo("RULE", "delayed off switch")

    createTimer(now.plusSeconds(240), [|
        {sendCommand(CT_FairyLights433Socket, OFF)} //con lights
        {postUpdate(CT_FairyLights433Socket, OFF)}
        {sendCommand(DR_FairyLights433Socket, OFF)} // d room lights
        {postUpdate(DR_FairyLights433Socket, OFF)}
        {sendCommand(vCT_TVKodiSpeakers, OFF)} //tv
        {postUpdate(vCT_TVKodiSpeakers, OFF)}
        {sendCommand(CT_Soundbar433PowerSocket, OFF)} // CT_Soundbar433PowerSocket
        {postUpdate(CT_Soundbar433PowerSocket, OFF)}    
        {sendCommand(radio, OFF)} //radio
        {postUpdate(radio, OFF)}
    ])
end

