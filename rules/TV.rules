var Timer timerStart = null
var Timer timer1 = null
var Timer timer2 = null
var Timer timer3 = null
// var Timer timer4 = null
// var Timer timer5 = null
// var Timer timer6 = null

var shutDownWaitTime = 20 //wait for pi shutdown in secs, before turning off power socket


//FrontRoom Pi Kodi and TV on/off control

rule "System started - set all rooms TV settings"
when
    System started
then

    if(timerStart === null) {
        timerStart = createTimer(now.plusSeconds(5)) [| 
        logInfo("TV.rules", "Executing 'System started' rule for ALL rooms -  TV Initialize uninitialized virtual Items")
        if (frontRoomTVPower.state === NULL) {
            frontRoomTVPower.postUpdate(OFF) // set power up val
            logInfo("TV.rules", "'System started' rule, change front room tv power state from NULL to OFF")
        }
        if (bedroomTVPower.state === NULL) {
            bedroomTVPower.postUpdate(OFF) // set power up val
            logInfo("TV.rules", "'System started' rule, change bedroom tv power state from NULL to OFF")
        }
        if (vConservatory_TV.state === NULL) {
            vConservatory_TV.postUpdate(OFF) // set power up val
            logInfo("TV.rules", "'System started' rule, change conservatory tv power state from NULL to OFF")
        }
        timerStart = null]
    }
end


rule "Turn ON FrontRoom Kodi-Pi, TV and soundbar"
when
    Item frontRoomTVPower received update ON
then
    logInfo("RULE", "Turn ON the FrontRoom Kodi, pi and speakers")
    shutdownKodiFrontRoomProxy.postUpdate(ON)

            //check if a shutdown timer is running - then stop it before turning stuff on
    if(timer1 !== null) {
        timer1 = null
    }
    WiFiSocket2Power.sendCommand(ON)
    WiFiSocket2Power.postUpdate(ON)

end

rule "Turn OFF FrontRoom Kodi-Pi, TV and soundbar"
when
    Item frontRoomTVPower changed from ON to OFF 
then
    logInfo("RULE", "Turn OFF FrontRoom kodi, pi and TV Kit")
    shutdownKodiFrontRoomProxy.postUpdate(OFF)

    if(timer1 === null) {
        timer1 = createTimer(now.plusSeconds(shutDownWaitTime)) [| // give time for pi kodi to shut down
        logInfo("RULE", "n secs later - we can turn off power sockets now")
        WiFiSocket2Power.sendCommand(OFF)
        WiFiSocket2Power.postUpdate(OFF)
        timer1 = null]
    }
end

//Conservatory Pi Kodi and TV on/off control
rule "Turn ON conservatory Kodi-Pi, TV and soundbar"
when
    // Item vConservatory_TV changed from OFF to ON
        Item vConservatory_TV received update ON

then
    logInfo("RULE", "Turn ON the Conservatory Kodi, pi and speakers")
    shutdownKodiConservatoryProxy.postUpdate(ON)

    //check if a shutdown timer is running - then stop it before turning stuff on
    if(timer2 !== null) {
        timer2 = null
    }
    {sendCommand(conservatoryTVPowerSocket, ON)} //tv
    {postUpdate(conservatoryTVPowerSocket, ON)}
    {sendCommand(amplifier, ON)} // amplifier
    {postUpdate(amplifier, ON)}    
end


rule "Turn OFF conservatory Kodi-Pi, TV and soundbar"
when
    Item vConservatory_TV changed from ON to OFF 
            // Item vConservatory_TV received update OFF

then
    logInfo("RULE", "Turn OFF Conservatory kodi, pi and TV Kit")
    shutdownKodiConservatoryProxy.postUpdate(OFF)

    if(timer2 === null) {
        timer2 = createTimer(now.plusSeconds(shutDownWaitTime)) [| // give time for pi kodi to shut down
            logInfo("RULE", "60 secs later - we can turn off power sockets now")
            {sendCommand(conservatoryTVPowerSocket, OFF)} //tv
            {postUpdate(conservatoryTVPowerSocket, OFF)}
            {sendCommand(amplifier, OFF)} // amplifier
            {postUpdate(amplifier, OFF)}
            timer2 = null]
    }
end


//Bedroom Pi Kodi and TV on/off control
rule "Turn ON bedroom Kodi-Pi, TV and soundbar"
when
    Item bedroomTVPower received update ON
then
    logInfo("RULE", "Turn ON the bedroom Kodi, pi")
    shutdownKodiBedroomProxy.postUpdate(ON)

        //check if a shutdown timer is running - then stop it before turning stuff on
    if(timer3 !== null) {
        timer3 = null
    }
    WiFiSocket3Power.sendCommand(ON)
    WiFiSocket3Power.postUpdate(ON)
end


rule "Turn OFF bedroom Kodi-Pi, TV and soundbar"
when
    Item bedroomTVPower changed from ON to OFF 
then
    logInfo("RULE", "Turn OFF bedroom kodi, pi and TV Kit")

    shutdownKodiBedroomProxy.postUpdate(OFF)

    if(timer3 === null) {
        timer3 = createTimer(now.plusSeconds(shutDownWaitTime)) [| // give time for pi kodi to shut down
        logInfo("RULE", "n secs later - we can turn off bedroom tv and kodi power socket now")
        WiFiSocket3Power.sendCommand(OFF)
        WiFiSocket3Power.postUpdate(OFF)
        timer3 = null]}
end
