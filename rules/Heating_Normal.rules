
var Number sleepTemperature = 16

// master heating mode - NORMAL mode rules
rule "00:00"
when
    Time cron "0 00 00 ? * MON-FRI *"
then
    CT_Heating_PresetTempNormal.postUpdate(15.0)
    FR_Heating_PresetTempNormal.postUpdate(15.0)
    E_BR_Heating_PresetTempNormal.postUpdate(sleepTemperature)
    H_BR_Heating_PresetTempNormal.postUpdate(14.0)
    J_BR_Heating_PresetTempNormal.postUpdate(sleepTemperature)
    Office_Heating_PresetTempNormal.postUpdate(15.0)
    Hall_Heating_PresetTempNormal.postUpdate(15.0)
    Heating_UpdateHeaters.sendCommand(ON)
end

rule "00:30"
when
    Time cron "0 30 00 ? * MON-FRI *"
then
    CT_Heating_PresetTempNormal.postUpdate(15.0)
    FR_Heating_PresetTempNormal.postUpdate(14.1)
    E_BR_Heating_PresetTempNormal.postUpdate(sleepTemperature)
    H_BR_Heating_PresetTempNormal.postUpdate(14.0)
    J_BR_Heating_PresetTempNormal.postUpdate(sleepTemperature)
    Office_Heating_PresetTempNormal.postUpdate(15.0)
    Hall_Heating_PresetTempNormal.postUpdate(15.0)
    Heating_UpdateHeaters.sendCommand(ON)
end

rule "06:00 am"
when
    Time cron "0 00 06 ? * MON-FRI *"
then
    CT_Heating_PresetTempNormal.postUpdate(20.0)
    FR_Heating_PresetTempNormal.postUpdate(15.0)
    E_BR_Heating_PresetTempNormal.postUpdate(17.0)
    H_BR_Heating_PresetTempNormal.postUpdate(14.0)
    J_BR_Heating_PresetTempNormal.postUpdate(17.0)
    Office_Heating_PresetTempNormal.postUpdate(17.0)
    Hall_Heating_PresetTempNormal.postUpdate(16.0)
    Heating_UpdateHeaters.sendCommand(ON)
end

rule "heating 08:00 am"
when
    Time cron "0 00 08 ? * MON-FRI *"
then
    CT_Heating_PresetTempNormal.postUpdate(20.0)
    FR_Heating_PresetTempNormal.postUpdate(15.0)
    E_BR_Heating_PresetTempNormal.postUpdate(15.0)
    H_BR_Heating_PresetTempNormal.postUpdate(14.0)
    J_BR_Heating_PresetTempNormal.postUpdate(15.0)
    Office_Heating_PresetTempNormal.postUpdate(18.0)
    Hall_Heating_PresetTempNormal.postUpdate(15.0)
    Heating_UpdateHeaters.sendCommand(ON)
end

rule "14:30"
when
    Time cron "0 30 14 ? * MON-FRI *"
then
    // CT_Heating_PresetTempNormal.postUpdate(21.0)
    //FR_Heating_PresetTempNormal.postUpdate(20.0)
    // E_BR_Heating_PresetTempNormal.postUpdate(17.0)
    // H_BR_Heating_PresetTempNormal.postUpdate(17.0)
    // J_BR_Heating_PresetTempNormal.postUpdate(17.0)
    //Office_Heating_PresetTempNormal.postUpdate(17.0)
    //Hall_Heating_PresetTempNormal.postUpdate(17.0)
    Heating_UpdateHeaters.sendCommand(ON)
end


rule "16:30"
when
    Time cron "0 30 16 ? * MON-FRI *"
then
    CT_Heating_PresetTempNormal.postUpdate(21.5)
    //FR_Heating_PresetTempNormal.postUpdate(20.0)
    E_BR_Heating_PresetTempNormal.postUpdate(17.0)
    //H_BR_Heating_PresetTempNormal.postUpdate(17.0)
    J_BR_Heating_PresetTempNormal.postUpdate(17.0)
    Office_Heating_PresetTempNormal.postUpdate(17.0)
    Hall_Heating_PresetTempNormal.postUpdate(17.0)
    Heating_UpdateHeaters.sendCommand(ON)
end

rule "22:30 weekdays"
when
    Time cron "0 30 22 ? * MON-FRI *"
then
    CT_Heating_PresetTempNormal.postUpdate(21.5)
    FR_Heating_PresetTempNormal.postUpdate(15.0)
    E_BR_Heating_PresetTempNormal.postUpdate(17.0)
    H_BR_Heating_PresetTempNormal.postUpdate(14.0)
    J_BR_Heating_PresetTempNormal.postUpdate(17.0)
    Office_Heating_PresetTempNormal.postUpdate(17.0)
    Hall_Heating_PresetTempNormal.postUpdate(17.0)
    Heating_UpdateHeaters.sendCommand(ON)
end

rule "00:30 am weekend"
when
    Time cron "0 30 00 ? * SAT-SUN *"
then
    CT_Heating_PresetTempNormal.postUpdate(15.0)
    FR_Heating_PresetTempNormal.postUpdate(15.0)
    E_BR_Heating_PresetTempNormal.postUpdate(sleepTemperature)
    H_BR_Heating_PresetTempNormal.postUpdate(14.0)
    J_BR_Heating_PresetTempNormal.postUpdate(sleepTemperature)
    Office_Heating_PresetTempNormal.postUpdate(15.0)
    Hall_Heating_PresetTempNormal.postUpdate(15.0)
    Heating_UpdateHeaters.sendCommand(ON)
end


rule "8:00 am weekend"
when
    Time cron "0 0 8 ? * SAT-SUN *"
then
    CT_Heating_PresetTempNormal.postUpdate(21.5)
    FR_Heating_PresetTempNormal.postUpdate(15.0)
    E_BR_Heating_PresetTempNormal.postUpdate(16.0)
    H_BR_Heating_PresetTempNormal.postUpdate(14.0)
    J_BR_Heating_PresetTempNormal.postUpdate(16.0)
    Office_Heating_PresetTempNormal.postUpdate(16.0)
    Hall_Heating_PresetTempNormal.postUpdate(16.0)
    Heating_UpdateHeaters.sendCommand(ON)
end

rule "4:30pm weekend"
when
    Time cron "0 30 16 ? * SAT-SUN *"
then
    CT_Heating_PresetTempNormal.postUpdate(21.5)
    FR_Heating_PresetTempNormal.postUpdate(15.0)
    E_BR_Heating_PresetTempNormal.postUpdate(17.0)
    H_BR_Heating_PresetTempNormal.postUpdate(14.0)
    J_BR_Heating_PresetTempNormal.postUpdate(17.0)
    Office_Heating_PresetTempNormal.postUpdate(17.0)
    Hall_Heating_PresetTempNormal.postUpdate(17.0)
    Heating_UpdateHeaters.sendCommand(ON)
end

rule "22:30pm weekend"
when
    Time cron "0 30 22 ? * SAT-SUN *"
then
    CT_Heating_PresetTempNormal.postUpdate(21.5)
    FR_Heating_PresetTempNormal.postUpdate(15.0)
    E_BR_Heating_PresetTempNormal.postUpdate(sleepTemperature)
    H_BR_Heating_PresetTempNormal.postUpdate(14.0)
    J_BR_Heating_PresetTempNormal.postUpdate(sleepTemperature)
    Office_Heating_PresetTempNormal.postUpdate(16.0)
    Hall_Heating_PresetTempNormal.postUpdate(15.0)
    Heating_UpdateHeaters.sendCommand(ON)
end


rule "test"
when
    Time cron "00 8 11 ? * * *"
then
    // CT_Heating_PresetTempNormal.postUpdate(17.0)
    // FR_Heating_PresetTempNormal.postUpdate(21.0)
    // E_BR_Heating_PresetTempNormal.postUpdate(22.0)
    // H_BR_Heating_PresetTempNormal.postUpdate(23.0)
    // J_BR_Heating_PresetTempNormal.postUpdate(24.0)
    //Office_Heating_PresetTempNormal.postUpdate(16.0)
    //Hall_Heating_PresetTempNormal.postUpdate(16.0)
    Heating_UpdateHeaters.sendCommand(ON)
end


rule "React on master heating mode switch, or message to send target temperatures to zones"
when
    Item masterHeatingMode received update or //master mode changes
    Item Heating_UpdateHeaters received command ON //cron job has requested we send updates to setpoints
then
//avoid changing a zone sp if zone heating mode 1 , local auto
    Heating_UpdateHeaters.postUpdate(OFF)
// MASTER modes are
//PROGRAMME_CONTROL=Programme Control,OFF_SUMMER=Off Summer,LOCAL=Local
//local room modes are 0=Off,1=Local Control,2=Master Controlled
    logInfo("heating_mode.rules", "MASTER Heating Mode: " + masterHeatingMode.state)
    switch masterHeatingMode.state {
        case "PROGRAMME_CONTROL": { //normal mode is under master control and folows 'normal' rules
            logInfo("heating_mode.rules", "processing case NORMAL MASTER Heating Mode: ")
            if(CT_Heating_Mode.state == 2) { //if mode is master control - 'normal' - auto - 2
                CT_Heating_Setpoint.state = (CT_Heating_PresetTempNormal.state )
            }
            if(FR_Heating_Mode.state == 2) { //if zone mode is master control
                   FR_Heating_Setpoint.state = (FR_Heating_PresetTempNormal.state)
            }
            if(E_BR_Heating_Mode.state == 2) { //if mode is master control
                E_BR_Heating_Setpoint.state = (E_BR_Heating_PresetTempNormal.state)
            }
            if(H_BR_Heating_Mode.state == 2) { //if mode is master control
                H_BR_Heating_Setpoint.state = (H_BR_Heating_PresetTempNormal.state)
            }
            if(J_BR_Heating_Mode.state == 2) { //if mode is master control
                J_BR_Heating_Setpoint.state = (J_BR_Heating_PresetTempNormal.state)
            }
            if(Office_Heating_Mode.state == 2) { //if mode is master control
                Office_Heating_Setpoint.state = (Office_Heating_PresetTempNormal.state)
            }
            if(Hall_Heating_Mode.state == 2) { //if mode is master control
                Hall_Heating_Setpoint.state = (Hall_Heating_PresetTempNormal.state)
            }
        }


        case "OFF_SUMMER": {
            logInfo("heating_mode.rules", "processing case OFF_SUMMER MASTER Heating Mode: ")
            CT_Heating_Setpoint.postUpdate(15.0) //(Hall_Heating_PresetTempNormal.state)
            CT_Heating_Mode.postUpdate(0)
            Hall_Heating_Setpoint.postUpdate(15.0) //(Hall_Heating_PresetTempNormal.state)
            Hall_Heating_Mode.postUpdate(0)
            FR_Heating_Setpoint.postUpdate(15.0) //(Hall_Heating_PresetTempNormal.state)
            FR_Heating_Mode.postUpdate(0) 
            Office_Heating_Setpoint.postUpdate(15.0) //(Hall_Heating_PresetTempNormal.state)
            Office_Heating_Mode.postUpdate(0)
            E_BR_Heating_Setpoint.postUpdate(15.0) //(Hall_Heating_PresetTempNormal.state)
            E_BR_Heating_Mode.postUpdate(0)
            J_BR_Heating_Setpoint.postUpdate(15.0) //(Hall_Heating_PresetTempNormal.state)
            J_BR_Heating_Mode.postUpdate(0)
            H_BR_Heating_Setpoint.postUpdate(15.0) //(Hall_Heating_PresetTempNormal.state)
            H_BR_Heating_Mode.postUpdate(0)                                                
        }
        case "LOCAL": {
            logInfo("heating_mode.rules", "processing case LOCAL MASTER Heating Mode: ")

        //     LR_Heating_TargetTemp.sendCommand(13.0)//note this is a command to a device that uses internal setpoint
        //not like a sonoff - switching in openhab rules, the one above has its own internal logic
        //     BE_Heating_TargetTemp.sendCommand(13.0)
        //     BA_Heating_TargetTemp.sendCommand(13.0)
        }
        default : { logError("heating_mode.rules", "Heating Mode unknown: " + masterHeatingMode.state) }
    }
end


rule "Initialize uninitialized virtual Items"
when
    System started
then
 if (masterHeatingMode.state == NULL) masterHeatingMode.postUpdate("PROGRAMME_CONTROL")
    createTimer(now.plusSeconds(180)) [ |
       if (masterHeatingMode.state == NULL) masterHeatingMode.postUpdate("PROGRAMME_CONTROL")
       gHeatingModes.members.filter[item | item.state == NULL].forEach[item | item.postUpdate(15.0)]
   ]
end