rule "Conservatory heating"
when
    Item CT_HeatingMode changed or
    Item CT_TemperatureSetpoint changed or
    Item CT_Temperature changed
then
    logInfo("CT_heating.rules", "CT Heating Mode or temp or target happened: ")
    // logInfo("CT_heating.rules", "CT Heating Mode : " + CT_HeatingMode.state)
    // if (CT_HeatingMode.state == "off") {
    //     logInfo("CT_heating.rules", "checking conservatory Heating Mode, turn heating OFF: " + CT_HeatingMode.state)
    //     CT_Heater.sendCommand(OFF)
    //     CT_Heater.postUpdate(OFF)
    // }
    // else if ( (CT_HeatingMode.state == "auto") || (CT_HeatingMode.state == "manual") )  { //auto
    //     logInfo("CT_heating.rules", "checking conservatory Heating Mode: " + CT_HeatingMode.state)
    //     var Number setpoint = CT_TemperatureSetpoint.state as DecimalType
    //     var Number turnOnTemp = setpoint //- 0.2// calculate the turn on/off temperatures
    //     var Number turnOffTemp = setpoint //+ 0.1
    //     var Number temp = CT_Temperature.state as DecimalType // get the current temperature
    //     if (temp >= turnOffTemp) {  // determine whether we need to turn on/off the heater
    //         logInfo("CT_heating.rules", "turn CT heater OFF: " + temp)
    //         CT_Heater.sendCommand(OFF)
    //         CT_Heater.postUpdate(OFF)
    //     }else if (temp < turnOnTemp) {
    //         logInfo("CT_heating.rules", "turn CT heater ON: " + temp)
    //         CT_Heater.sendCommand(ON)
    //         CT_Heater.postUpdate(ON)
    //     } 
    // }
end

