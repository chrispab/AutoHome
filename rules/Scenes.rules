rule "StartUp - set up Item Scene_Goodnight"
when
    System started
then
    Scene_Goodnight.postUpdate(OFF)
end


rule "Goodnight Going to bed"
when
//	Item Scene_Goodnight received command ON
	Item Scene_Goodnight changed from OFF to ON
then
    logInfo("RULE", "goodnight going to bed")


    //turn off the conservatory Pi Kodi box ands the TV and Soundbar
    conservatoryTVPowerProxy.sendCommand(ON) //trigger to shutdown pi and power off socket to tv and pi after 1 min

    
    //turn off sockets
    {sendCommand(conservatoryFairyLights, OFF)} //con lights
    {postUpdate(conservatoryFairyLights, OFF)}
    // {sendCommand(socketG2_4, OFF)} //tv
    // {postUpdate(socketG2_4, OFF)}
    // {sendCommand(socketG2_3, OFF)} // amp
    // {postUpdate(socketG2_3, OFF)}    
    {sendCommand(radio, OFF)} //radio
    {postUpdate(radio, OFF)}
    {postUpdate(conservatoryTVPowerProxy, OFF)}

    
    // {sendCommand(gIkeaLights, OFF)} //
    // {postUpdate(gIkeaLights, OFF)} 
        gIkeaLights.sendCommand(0)
        gIkeaLights.postUpdate(0)
    //set rads temps to off
    conservatory_Heating_PresetTempNormal.postUpdate(17.0)
    frontRoom_Heating_PresetTempNormal.postUpdate(14.0)
    elsiesRoom_Heating_PresetTempNormal.postUpdate(17.0)
    attic_Heating_PresetTempNormal.postUpdate(14.0)
    bedroom_Heating_PresetTempNormal.postUpdate(17.0)
    office_Heating_PresetTempNormal.postUpdate(17.0)
    hall_Heating_PresetTempNormal.postUpdate(17.0)
    Heating_UpdateHeaters.sendCommand(ON)    

    // var Timer lightsTimer = null
    createTimer(now.plusSeconds(240), [|
        {sendCommand(diningRoomFairyLights, OFF)} // d room lights
        {postUpdate(diningRoomFairyLights, OFF)}
        logInfo("RULE", "Item Scene_Goodnight now set to OFF again")

    ])
    logInfo("RULE", "Item Scene_Goodnight received command ON")

    Scene_Goodnight.postUpdate(OFF)
end