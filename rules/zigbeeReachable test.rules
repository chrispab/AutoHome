// var Timer RouterTimer = null
// var int routerTimeout = 61 

// var Timer Zb_THPSensor_01_Timer = null
// var Timer Zb_THSensor_01_Timer = null
// var Timer Zb_THSensor_02_Timer = null
// var Timer Zb_THSensor_03_Timer = null
// var Timer Zb_THSensor_04_Timer = null

// var int Zb_TempSensor_Timeout = 60*55 

// rule "StartUp - set up Heating settings"
// when
//     System started
// then
//         ZbRouter_01_Reachable.postUpdate("Offline")
//         Zb_THPSensor_01_reachable.postUpdate("Offline")
//         Zb_THSensor_01_reachable.postUpdate("Offline")
//         Zb_THSensor_02_reachable.postUpdate("Offline")
//         Zb_THSensor_03_reachable.postUpdate("Offline")
//         Zb_THSensor_04_reachable.postUpdate("Offline")
//             //         gHeatingModes.members.forEach[ String RoomHeatingMode | RoomHeatingMode.postUpdate("off") ] 
//             // gTemperatureSetpoints.members.forEach[ TSetpoint | TSetpoint.postUpdate(offTemp) ] 
// end

//---------------------------------------------------
// rule "monitor ZB Router availability"
// when
//     Item ZbRouter_01_Quality received update
// then
//     logInfo("Zb_THSensor_01", "Zb sensor timeout: " + Zb_TempSensor_Timeout)

//     logInfo("monitor ZB Router", "ZB Router received mqtt - mark as online")
//     ZbRouter_01_Reachable.postUpdate("Online")
//     RouterTimer?.cancel
//     logInfo("monitor ZB Router", "ZB Router Starting a new Timer")
//     RouterTimer = createTimer(now.plusSeconds(routerTimeout), [| 
//         ZbRouter_01_Reachable.postUpdate("Offline")//execute if timer not reset - set as "Offline"
//         logInfo("monitor ZB Router", "ZB Router timed out - mark as offline")
//         RouterTimer = null
//     ])
// end



// rule "monitor ZB Zb_THPSensor_01 availability"
// when
//     Item Zb_THPSensor_01_temperature received update
// then
//     logInfo("monitor Zb_THPSensor_01", "Zb_THPSensor_01 sensor timeout: " + Zb_TempSensor_Timeout)

//     logInfo("monitor Zb_THPSensor_01", "Zb_THPSensor_01 mqtt received - mark as online")
//     Zb_THPSensor_01_reachable.postUpdate("Online")
//     Zb_THPSensor_01_Timer?.cancel
//     logInfo("monitor Zb_THPSensor_01", "Zb_THPSensor_01 Starting a new Timer")
//     Zb_THPSensor_01_Timer = createTimer(now.plusSeconds(Zb_TempSensor_Timeout), [| 
//         Zb_THPSensor_01_reachable.postUpdate("Offline")//execute if timer not cancelled - set as "Offline"
//         logInfo("monitor ZB Zb_THPSensor_01", "Zb_THPSensor_01 timed out - mark as offline")
//         Zb_THPSensor_01_Timer = null
//     ])
// end

// rule "monitor ZB Zb_THSensor_01 availability"
// when
//     Item Zb_THSensor_01_temperature received update
// then
//     logInfo("Zb_THSensor_01", "Zb_THSensor_01 sensor timeout: " + Zb_TempSensor_Timeout)

//     logInfo("monitor Zb_THSensor_01", "Zb_THSensor_01 mqtt received - mark as online")
//     Zb_THSensor_01_reachable.postUpdate("Online")
//     Zb_THSensor_01_Timer?.cancel    //if timer is active, cancel it
//     logInfo("monitor Zb_THSensor_01", "Zb_THSensor_01 Starting a new Timer")
//     Zb_THSensor_01_Timer = createTimer(now.plusSeconds(Zb_TempSensor_Timeout), [| 
//         Zb_THSensor_01_reachable.postUpdate("Offline")//execute if timer not cancelled - set as "Offline"
//         logInfo("monitor ZB Zb_THSensor_01", "Zb_THSensor_01 timed out - mark as offline")
//         Zb_THSensor_01_Timer = null
//     ])
// end

// rule "monitor ZB Zb_THSensor_02 availability"
// when
//     Item Zb_THSensor_02_temperature received update
// then
//     logInfo("monitor Zb_THSensor_02", "Zb_THSensor_02 mqtt received - mark as online")
//     Zb_THSensor_02_reachable.postUpdate("Online")
//     Zb_THSensor_02_Timer?.cancel
//     logInfo("monitor Zb_THSensor_02", "Zb_THSensor_02 Starting a new Timer")
//     Zb_THSensor_02_Timer = createTimer(now.plusSeconds(Zb_TempSensor_Timeout), [| 
//         Zb_THSensor_02_reachable.postUpdate("Offline")//execute if timer not cancelled - set as "Offline"
//         logInfo("monitor ZB Zb_THSensor_02", "Zb_THSensor_02 timed out - mark as offline")
//         Zb_THSensor_02_Timer = null
//     ])
// end

// //---------------------------------------------
// rule "monitor ZB Zb_THSensor_03 availability"
// when
//     Item Zb_THSensor_03_temperature received update
// then
//     logInfo("monitor Zb_THSensor_03", "Zb_THSensor_03 mqtt received - mark as online")
//     Zb_THSensor_03_reachable.postUpdate("Online")
//     Zb_THSensor_03_Timer?.cancel
//     logInfo("monitor Zb_THSensor_03", "Zb_THSensor_03 Starting a new Timer")
//     Zb_THSensor_03_Timer = createTimer(now.plusSeconds(Zb_TempSensor_Timeout), [| 
//         Zb_THSensor_03_reachable.postUpdate("Offline")//execute if timer not cancelled - set as "Offline"
//         logInfo("monitor ZB Zb_THSensor_03", "Zb_THSensor_03 timed out - mark as offline")
//         Zb_THSensor_03_Timer = null
//     ])
// end


// rule "monitor ZB Zb_THSensor_04 availability"
// when
//     Item Zb_THSensor_04_temperature received update
// then
//     logInfo("monitor Zb_THSensor_04", "Zb_THSensor_04 mqtt received - mark as online")
//     Zb_THSensor_04_reachable.postUpdate("Online")
//     Zb_THSensor_04_Timer?.cancel
//     logInfo("monitor Zb_THSensor_04", "Zb_THSensor_04 Starting a new Timer")
//     Zb_THSensor_04_Timer = createTimer(now.plusSeconds(Zb_TempSensor_Timeout), [| 
//         Zb_THSensor_04_reachable.postUpdate("Offline")//execute if timer not cancelled - set as "Offline"
//         logInfo("monitor ZB Zb_THSensor_04", "Zb_THSensor_04 timed out - mark as offline")
//         Zb_THSensor_04_Timer = null
//     ])
// end

