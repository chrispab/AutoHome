var Timer TimerPlayStream = null

// this rule will turn on the GH device and start a stream

rule "Motion Bath DG"
  when
     Item Send_Audio_to_GHM received command 
  then
     if(receivedCommand===ON) {
	
	logInfo("RULE.send audio to GCC", "sending audio to GHM Conservatory " + Send_Audio_to_GHM.state.toString())

 		// Motion has been detected in the bathroom 
 		
 		// if (Switch_DG_Bath_Google_Home.state===OFF){
 			//switch on Google Home (power switch)
 			// sendCommand(Switch_DG_Bath_Google_Home, ON)
			
			// because the booting of the Google Home takes in my case between 25 and 45 seconds we need to wait before we can start a stream
			// if (TimerPlayStream!==null)
	        		// TimerPlayStream.cancel()
				// TimerPlayStream = createTimer(now.plusSeconds(20)) [|
				    // logInfo("RULE.SWITCH_ON_STREAM", "Timer - Google Home Bath Idle status -> " + Google_Home_Bath_Idle.state.toString())
					// while(Google_Home_Bath_Idle.state===ON)	{
                        // logInfo("RULE.SWITCH_ON_STREAM", "While Loop - Google Home Bath Idle status -> " + Google_Home_Bath_Idle.state.toString())
						
						// we now try to start the stream, in case this is sucessful the Google_Home_Bath_Idle will switch to OFF (and we leave the While Loop)
						// this example will start the german radio station Deutschlandfunk

		// 			 	playSound("chromecast:chromecast:GHM_Conservatory","doorbell.mp3", new PercentType(50) )
		// 				logInfo("RULE.SWITCH_ON_STREAM", "Stream send now sleep 1.5 seconds")
		// 				Thread::sleep(1500)
		// 				playSound("chromecast:chromecast:GHM_Conservatory","input_ok_3_clean.mp3", new PercentType(50) )
        // 

		say("Hello, this is a test message","voicerss:enGB","chromecast:chromecast:GHM_Conservatory", new PercentType(70))
		// say("Hello, this is a test message","voicerss:default","chromecast:chromecast:GHM_Conservatory")
		Thread::sleep(1500)
		Send_Audio_to_GHM.postUpdate(OFF)
					// }
				// ] 
 		} 
		// in case the power is already on and our Google Home should be started already, we only want to start the stream
	// 	else {
	// 		// Only start the stream if it is not already playing - so we check the state of the Player item 
	// 		// we need to check != PLAY because when you startup OH the Play may not be initialized and thus the item state is not PAUSE
	// 		if (Google_Home_Bath_Player.state!==PLAY) {
			
	//         	// start the stream because Google Home is not playing anything right now -> Deutschlandfunk
    // 	    	playStream("chromecast:audio:Bath","http://st01.dlf.de/dlf/01/128/mp3/stream.mp3")
	// 			// alternatively you can start your own mp3 file
    //     		//playSound("chromecast:audio:Bath","mysound.mp3")

	// 			// I was not successful using the say command on a specified audio sink - per documentation it should work like this:
 	// 			//say("Hello, welcome in the bathroom","voicerss:deDE","chromecast:audio:Bath")        
	// 		}
 	// 	}
    //  } else if(receivedCommand===OFF) {
	// 	// at this time we do not do anything here
	// }
  end


// when someone put the power off we force/switch the Player item to PAUSE, as it does not get initialized in PAUSE state when the the Google Home is booting
rule "Google Home Bath Power Off"
	when
		/* Google Home switch off */ 
         Item Steckdose_DG_Bath_Waschbacken_Unten changed from ON to OFF
	then
        // need to set the player to Pause, so next time it is in the right state when we start
		sendCommand(Google_Home_Bath_Player,PAUSE)
		
	end

/* Is the Google Home busy ? - just logging the state changes - not needed for the example to work*/
rule "GH Bath Idle has changed"
	when
		Item Google_Home_Bath_Idle changed
	then
		logInfo("RULE.AUDIO", "Google Home Bath Idle changed! ->" + Google_Home_Bath_Idle.state.toString())
	end
