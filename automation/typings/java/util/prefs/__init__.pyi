import java.io
import java.lang
import java.util
import typing


class BackingStoreException(java.lang.Exception):
    """
    Java class 'java.util.prefs.BackingStoreException'
    
        Extends:
            java.lang.Exception
    
      Constructors:
        * BackingStoreException(java.lang.String)
        * BackingStoreException(java.lang.Throwable)
    
    """
    @typing.overload
    def __init__(self, string: java.lang.String): ...
    @typing.overload
    def __init__(self, throwable: java.lang.Throwable): ...

class InvalidPreferencesFormatException(java.lang.Exception):
    """
    Java class 'java.util.prefs.InvalidPreferencesFormatException'
    
        Extends:
            java.lang.Exception
    
      Constructors:
        * InvalidPreferencesFormatException(java.lang.Throwable)
        * InvalidPreferencesFormatException(java.lang.String)
        * InvalidPreferencesFormatException(java.lang.String, java.lang.Throwable)
    
    """
    @typing.overload
    def __init__(self, string: java.lang.String): ...
    @typing.overload
    def __init__(self, string: java.lang.String, throwable: java.lang.Throwable): ...
    @typing.overload
    def __init__(self, throwable: java.lang.Throwable): ...

class NodeChangeEvent(java.util.EventObject):
    """
    Java class 'java.util.prefs.NodeChangeEvent'
    
        Extends:
            java.util.EventObject
    
      Constructors:
        * NodeChangeEvent(java.util.prefs.Preferences, java.util.prefs.Preferences)
    
    """
    def __init__(self, preferences: 'Preferences', preferences2: 'Preferences'): ...
    def getChild(self) -> 'Preferences': ...
    def getParent(self) -> 'Preferences': ...

class NodeChangeListener(java.util.EventListener):
    """
    Java class 'java.util.prefs.NodeChangeListener'
    
        Interfaces:
            java.util.EventListener
    
    """
    def childAdded(self, nodeChangeEvent: NodeChangeEvent) -> None: ...
    def childRemoved(self, nodeChangeEvent: NodeChangeEvent) -> None: ...

class PreferenceChangeEvent(java.util.EventObject):
    """
    Java class 'java.util.prefs.PreferenceChangeEvent'
    
        Extends:
            java.util.EventObject
    
      Constructors:
        * PreferenceChangeEvent(java.util.prefs.Preferences, java.lang.String, java.lang.String)
    
    """
    def __init__(self, preferences: 'Preferences', string: java.lang.String, string2: java.lang.String): ...
    def getKey(self) -> java.lang.String: ...
    def getNewValue(self) -> java.lang.String: ...
    def getNode(self) -> 'Preferences': ...

class PreferenceChangeListener(java.util.EventListener):
    """
    Java class 'java.util.prefs.PreferenceChangeListener'
    
        Interfaces:
            java.util.EventListener
    
    """
    def preferenceChange(self, preferenceChangeEvent: PreferenceChangeEvent) -> None: ...

class Preferences(java.lang.Object):
    """
    Java class 'java.util.prefs.Preferences'
    
        Extends:
            java.lang.Object
    
      Attributes:
        MAX_KEY_LENGTH (int): final static field
        MAX_VALUE_LENGTH (int): final static field
        MAX_NAME_LENGTH (int): final static field
    
    """
    MAX_KEY_LENGTH: typing.ClassVar[int] = ...
    MAX_VALUE_LENGTH: typing.ClassVar[int] = ...
    MAX_NAME_LENGTH: typing.ClassVar[int] = ...
    def absolutePath(self) -> java.lang.String: ...
    def addNodeChangeListener(self, nodeChangeListener: NodeChangeListener) -> None: ...
    def addPreferenceChangeListener(self, preferenceChangeListener: PreferenceChangeListener) -> None: ...
    def childrenNames(self) -> typing.List[java.lang.String]: ...
    def clear(self) -> None: ...
    def exportNode(self, outputStream: java.io.OutputStream) -> None: ...
    def exportSubtree(self, outputStream: java.io.OutputStream) -> None: ...
    def flush(self) -> None: ...
    def get(self, string: java.lang.String, string2: java.lang.String) -> java.lang.String: ...
    def getBoolean(self, string: java.lang.String, boolean: bool) -> bool: ...
    def getByteArray(self, string: java.lang.String, byteArray: typing.List[int]) -> typing.List[int]: ...
    def getDouble(self, string: java.lang.String, double: float) -> float: ...
    def getFloat(self, string: java.lang.String, float: float) -> float: ...
    def getInt(self, string: java.lang.String, int: int) -> int: ...
    def getLong(self, string: java.lang.String, long: int) -> int: ...
    @classmethod
    def importPreferences(cls, inputStream: java.io.InputStream) -> None: ...
    def isUserNode(self) -> bool: ...
    def keys(self) -> typing.List[java.lang.String]: ...
    def name(self) -> java.lang.String: ...
    def node(self, string: java.lang.String) -> 'Preferences': ...
    def nodeExists(self, string: java.lang.String) -> bool: ...
    def parent(self) -> 'Preferences': ...
    def put(self, string: java.lang.String, string2: java.lang.String) -> None: ...
    def putBoolean(self, string: java.lang.String, boolean: bool) -> None: ...
    def putByteArray(self, string: java.lang.String, byteArray: typing.List[int]) -> None: ...
    def putDouble(self, string: java.lang.String, double: float) -> None: ...
    def putFloat(self, string: java.lang.String, float: float) -> None: ...
    def putInt(self, string: java.lang.String, int: int) -> None: ...
    def putLong(self, string: java.lang.String, long: int) -> None: ...
    def remove(self, string: java.lang.String) -> None: ...
    def removeNode(self) -> None: ...
    def removeNodeChangeListener(self, nodeChangeListener: NodeChangeListener) -> None: ...
    def removePreferenceChangeListener(self, preferenceChangeListener: PreferenceChangeListener) -> None: ...
    def sync(self) -> None: ...
    @classmethod
    def systemNodeForPackage(cls, class_: typing.Type[typing.Any]) -> 'Preferences': ...
    @classmethod
    def systemRoot(cls) -> 'Preferences': ...
    def toString(self) -> java.lang.String: ...
    @classmethod
    def userNodeForPackage(cls, class_: typing.Type[typing.Any]) -> 'Preferences': ...
    @classmethod
    def userRoot(cls) -> 'Preferences': ...

class PreferencesFactory(java.lang.Object):
    """
    public interface PreferencesFactory
    
        A factory object that generates Preferences objects. Providers of new :class:`~java.util.prefs.Preferences`
        implementations should provide corresponding :code:`PreferencesFactory` implementations so that the new
        :code:`Preferences` implementation can be installed in place of the platform-specific default implementation.
    
        **This class is for :code:`Preferences` implementers only. Normal users of the :code:`Preferences` facility should have
        no need to consult this documentation.**
    
        Since:
            1.4
    
        Also see:
            :class:`~java.util.prefs.Preferences`
    
    
    """
    def systemRoot(self) -> Preferences: ...
    def userRoot(self) -> Preferences: ...

class AbstractPreferences(Preferences):
    """
    Java class 'java.util.prefs.AbstractPreferences'
    
        Extends:
            java.util.prefs.Preferences
    
    """
    def absolutePath(self) -> java.lang.String: ...
    def addNodeChangeListener(self, nodeChangeListener: NodeChangeListener) -> None: ...
    def addPreferenceChangeListener(self, preferenceChangeListener: PreferenceChangeListener) -> None: ...
    def childrenNames(self) -> typing.List[java.lang.String]: ...
    def clear(self) -> None: ...
    def exportNode(self, outputStream: java.io.OutputStream) -> None: ...
    def exportSubtree(self, outputStream: java.io.OutputStream) -> None: ...
    def flush(self) -> None: ...
    def get(self, string: java.lang.String, string2: java.lang.String) -> java.lang.String: ...
    def getBoolean(self, string: java.lang.String, boolean: bool) -> bool: ...
    def getByteArray(self, string: java.lang.String, byteArray: typing.List[int]) -> typing.List[int]: ...
    def getDouble(self, string: java.lang.String, double: float) -> float: ...
    def getFloat(self, string: java.lang.String, float: float) -> float: ...
    def getInt(self, string: java.lang.String, int: int) -> int: ...
    def getLong(self, string: java.lang.String, long: int) -> int: ...
    def isUserNode(self) -> bool: ...
    def keys(self) -> typing.List[java.lang.String]: ...
    def name(self) -> java.lang.String: ...
    def node(self, string: java.lang.String) -> Preferences: ...
    def nodeExists(self, string: java.lang.String) -> bool: ...
    def parent(self) -> Preferences: ...
    def put(self, string: java.lang.String, string2: java.lang.String) -> None: ...
    def putBoolean(self, string: java.lang.String, boolean: bool) -> None: ...
    def putByteArray(self, string: java.lang.String, byteArray: typing.List[int]) -> None: ...
    def putDouble(self, string: java.lang.String, double: float) -> None: ...
    def putFloat(self, string: java.lang.String, float: float) -> None: ...
    def putInt(self, string: java.lang.String, int: int) -> None: ...
    def putLong(self, string: java.lang.String, long: int) -> None: ...
    def remove(self, string: java.lang.String) -> None: ...
    def removeNode(self) -> None: ...
    def removeNodeChangeListener(self, nodeChangeListener: NodeChangeListener) -> None: ...
    def removePreferenceChangeListener(self, preferenceChangeListener: PreferenceChangeListener) -> None: ...
    def sync(self) -> None: ...
    def toString(self) -> java.lang.String: ...
