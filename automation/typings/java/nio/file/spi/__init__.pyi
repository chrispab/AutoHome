import java.io
import java.lang
import java.net
import java.nio.channels
import java.nio.file
import java.nio.file.attribute
import java.util
import java.util.concurrent
import typing


class FileSystemProvider(java.lang.Object):
    """
    Java class 'java.nio.file.spi.FileSystemProvider'
    
        Extends:
            java.lang.Object
    
    """
    def checkAccess(self, path: java.nio.file.Path, accessModeArray: typing.List[java.nio.file.AccessMode]) -> None: ...
    def copy(self, path: java.nio.file.Path, path2: java.nio.file.Path, copyOptionArray: typing.List[java.nio.file.CopyOption]) -> None: ...
    def createDirectory(self, path: java.nio.file.Path, fileAttributeArray: typing.List[java.nio.file.attribute.FileAttribute[typing.Any]]) -> None: ...
    def createLink(self, path: java.nio.file.Path, path2: java.nio.file.Path) -> None: ...
    def createSymbolicLink(self, path: java.nio.file.Path, path2: java.nio.file.Path, fileAttributeArray: typing.List[java.nio.file.attribute.FileAttribute[typing.Any]]) -> None: ...
    def delete(self, path: java.nio.file.Path) -> None: ...
    def deleteIfExists(self, path: java.nio.file.Path) -> bool: ...
    _getFileAttributeView__V = typing.TypeVar('_getFileAttributeView__V', bound=java.nio.file.attribute.FileAttributeView)  # <V>
    def getFileAttributeView(self, path: java.nio.file.Path, class_: typing.Type[_getFileAttributeView__V], linkOptionArray: typing.List[java.nio.file.LinkOption]) -> _getFileAttributeView__V: ...
    def getFileStore(self, path: java.nio.file.Path) -> java.nio.file.FileStore: ...
    def getFileSystem(self, uRI: java.net.URI) -> java.nio.file.FileSystem: ...
    def getPath(self, uRI: java.net.URI) -> java.nio.file.Path: ...
    def getScheme(self) -> java.lang.String: ...
    @classmethod
    def installedProviders(cls) -> java.util.List['FileSystemProvider']: ...
    def isHidden(self, path: java.nio.file.Path) -> bool: ...
    def isSameFile(self, path: java.nio.file.Path, path2: java.nio.file.Path) -> bool: ...
    def move(self, path: java.nio.file.Path, path2: java.nio.file.Path, copyOptionArray: typing.List[java.nio.file.CopyOption]) -> None: ...
    def newAsynchronousFileChannel(self, path: java.nio.file.Path, set: java.util.Set[java.nio.file.OpenOption], executorService: java.util.concurrent.ExecutorService, fileAttributeArray: typing.List[java.nio.file.attribute.FileAttribute[typing.Any]]) -> java.nio.channels.AsynchronousFileChannel: ...
    def newByteChannel(self, path: java.nio.file.Path, set: java.util.Set[java.nio.file.OpenOption], fileAttributeArray: typing.List[java.nio.file.attribute.FileAttribute[typing.Any]]) -> java.nio.channels.SeekableByteChannel: ...
    def newDirectoryStream(self, path: java.nio.file.Path, filter: typing.Union[java.nio.file.DirectoryStream.Filter[java.nio.file.Path], typing.Callable[[], java.nio.file.Path]]) -> java.nio.file.DirectoryStream[java.nio.file.Path]: ...
    def newFileChannel(self, path: java.nio.file.Path, set: java.util.Set[java.nio.file.OpenOption], fileAttributeArray: typing.List[java.nio.file.attribute.FileAttribute[typing.Any]]) -> java.nio.channels.FileChannel: ...
    @typing.overload
    def newFileSystem(self, uRI: java.net.URI, map: typing.Union[java.util.Map[java.lang.String, typing.Any], typing.Mapping[java.lang.String, typing.Any]]) -> java.nio.file.FileSystem: ...
    @typing.overload
    def newFileSystem(self, path: java.nio.file.Path, map: typing.Union[java.util.Map[java.lang.String, typing.Any], typing.Mapping[java.lang.String, typing.Any]]) -> java.nio.file.FileSystem: ...
    def newInputStream(self, path: java.nio.file.Path, openOptionArray: typing.List[java.nio.file.OpenOption]) -> java.io.InputStream: ...
    def newOutputStream(self, path: java.nio.file.Path, openOptionArray: typing.List[java.nio.file.OpenOption]) -> java.io.OutputStream: ...
    _readAttributes_0__A = typing.TypeVar('_readAttributes_0__A', bound=java.nio.file.attribute.BasicFileAttributes)  # <A>
    @typing.overload
    def readAttributes(self, path: java.nio.file.Path, class_: typing.Type[_readAttributes_0__A], linkOptionArray: typing.List[java.nio.file.LinkOption]) -> _readAttributes_0__A: ...
    @typing.overload
    def readAttributes(self, path: java.nio.file.Path, string: java.lang.String, linkOptionArray: typing.List[java.nio.file.LinkOption]) -> java.util.Map[java.lang.String, typing.Any]: ...
    def readSymbolicLink(self, path: java.nio.file.Path) -> java.nio.file.Path: ...
    def setAttribute(self, path: java.nio.file.Path, string: java.lang.String, object: typing.Any, linkOptionArray: typing.List[java.nio.file.LinkOption]) -> None: ...

class FileTypeDetector(java.lang.Object):
    """
    Java class 'java.nio.file.spi.FileTypeDetector'
    
        Extends:
            java.lang.Object
    
    """
    def probeContentType(self, path: java.nio.file.Path) -> java.lang.String: ...
