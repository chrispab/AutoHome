import java
import java.io
import java.lang
import java.time
import java.util
import typing


class ZoneOffsetTransition(java.lang.Comparable[java.time.zone.ZoneOffsetTransition], java.io.Serializable):
    """
    Java class 'java.time.zone.ZoneOffsetTransition'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            java.lang.Comparable, java.io.Serializable
    
    """
    @typing.overload
    def compareTo(self, object: typing.Any) -> int: ...
    @typing.overload
    def compareTo(self, zoneOffsetTransition: 'ZoneOffsetTransition') -> int: ...
    def equals(self, object: typing.Any) -> bool: ...
    def getDateTimeAfter(self) -> java.time.LocalDateTime: ...
    def getDateTimeBefore(self) -> java.time.LocalDateTime: ...
    def getDuration(self) -> java.time.Duration: ...
    def getInstant(self) -> java.time.Instant: ...
    def getOffsetAfter(self) -> java.time.ZoneOffset: ...
    def getOffsetBefore(self) -> java.time.ZoneOffset: ...
    def hashCode(self) -> int: ...
    def isGap(self) -> bool: ...
    def isOverlap(self) -> bool: ...
    def isValidOffset(self, zoneOffset: java.time.ZoneOffset) -> bool: ...
    @classmethod
    def of(cls, localDateTime: java.time.LocalDateTime, zoneOffset: java.time.ZoneOffset, zoneOffset2: java.time.ZoneOffset) -> 'ZoneOffsetTransition': ...
    def toEpochSecond(self) -> int: ...
    def toString(self) -> java.lang.String: ...

class ZoneOffsetTransitionRule(java.io.Serializable):
    """
    Java class 'java.time.zone.ZoneOffsetTransitionRule'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            java.io.Serializable
    
    """
    def createTransition(self, int: int) -> ZoneOffsetTransition: ...
    def equals(self, object: typing.Any) -> bool: ...
    def getDayOfMonthIndicator(self) -> int: ...
    def getDayOfWeek(self) -> java.time.DayOfWeek: ...
    def getLocalTime(self) -> java.time.LocalTime: ...
    def getMonth(self) -> java.time.Month: ...
    def getOffsetAfter(self) -> java.time.ZoneOffset: ...
    def getOffsetBefore(self) -> java.time.ZoneOffset: ...
    def getStandardOffset(self) -> java.time.ZoneOffset: ...
    def getTimeDefinition(self) -> 'ZoneOffsetTransitionRule.TimeDefinition': ...
    def hashCode(self) -> int: ...
    def isMidnightEndOfDay(self) -> bool: ...
    @classmethod
    def of(cls, month: java.time.Month, int: int, dayOfWeek: java.time.DayOfWeek, localTime: java.time.LocalTime, boolean: bool, timeDefinition: 'ZoneOffsetTransitionRule.TimeDefinition', zoneOffset: java.time.ZoneOffset, zoneOffset2: java.time.ZoneOffset, zoneOffset3: java.time.ZoneOffset) -> 'ZoneOffsetTransitionRule': ...
    def toString(self) -> java.lang.String: ...
    class TimeDefinition(java.lang.Enum[java.time.zone.ZoneOffsetTransitionRule.TimeDefinition]):
        """
        Java class 'java.time.zone.ZoneOffsetTransitionRule$TimeDefinition'
        
            Extends:
                java.lang.Enum
        
          Attributes:
            UTC (java.time.zone.ZoneOffsetTransitionRule$TimeDefinition): final static enum constant
            WALL (java.time.zone.ZoneOffsetTransitionRule$TimeDefinition): final static enum constant
            STANDARD (java.time.zone.ZoneOffsetTransitionRule$TimeDefinition): final static enum constant
        
        """
        UTC: typing.ClassVar['ZoneOffsetTransitionRule.TimeDefinition'] = ...
        WALL: typing.ClassVar['ZoneOffsetTransitionRule.TimeDefinition'] = ...
        STANDARD: typing.ClassVar['ZoneOffsetTransitionRule.TimeDefinition'] = ...
        def createDateTime(self, localDateTime: java.time.LocalDateTime, zoneOffset: java.time.ZoneOffset, zoneOffset2: java.time.ZoneOffset) -> java.time.LocalDateTime: ...
        _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
        @classmethod
        @typing.overload
        def valueOf(cls, class_: typing.Type[_valueOf_0__T], string: java.lang.String) -> _valueOf_0__T: ...
        @classmethod
        @typing.overload
        def valueOf(cls, string: java.lang.String) -> 'ZoneOffsetTransitionRule.TimeDefinition': ...
        @classmethod
        def values(cls) -> typing.List['ZoneOffsetTransitionRule.TimeDefinition']: ...

class ZoneRules(java.io.Serializable):
    """
    Java class 'java.time.zone.ZoneRules'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            java.io.Serializable
    
    """
    def equals(self, object: typing.Any) -> bool: ...
    def getDaylightSavings(self, instant: java.time.Instant) -> java.time.Duration: ...
    @typing.overload
    def getOffset(self, instant: java.time.Instant) -> java.time.ZoneOffset: ...
    @typing.overload
    def getOffset(self, localDateTime: java.time.LocalDateTime) -> java.time.ZoneOffset: ...
    def getStandardOffset(self, instant: java.time.Instant) -> java.time.ZoneOffset: ...
    def getTransition(self, localDateTime: java.time.LocalDateTime) -> ZoneOffsetTransition: ...
    def getTransitionRules(self) -> java.util.List[ZoneOffsetTransitionRule]: ...
    def getTransitions(self) -> java.util.List[ZoneOffsetTransition]: ...
    def getValidOffsets(self, localDateTime: java.time.LocalDateTime) -> java.util.List[java.time.ZoneOffset]: ...
    def hashCode(self) -> int: ...
    def isDaylightSavings(self, instant: java.time.Instant) -> bool: ...
    def isFixedOffset(self) -> bool: ...
    def isValidOffset(self, localDateTime: java.time.LocalDateTime, zoneOffset: java.time.ZoneOffset) -> bool: ...
    def nextTransition(self, instant: java.time.Instant) -> ZoneOffsetTransition: ...
    @classmethod
    @typing.overload
    def of(cls, zoneOffset: java.time.ZoneOffset) -> 'ZoneRules': ...
    @classmethod
    @typing.overload
    def of(cls, zoneOffset: java.time.ZoneOffset, zoneOffset2: java.time.ZoneOffset, list: java.util.List[ZoneOffsetTransition], list2: java.util.List[ZoneOffsetTransition], list3: java.util.List[ZoneOffsetTransitionRule]) -> 'ZoneRules': ...
    def previousTransition(self, instant: java.time.Instant) -> ZoneOffsetTransition: ...
    def toString(self) -> java.lang.String: ...

class ZoneRulesException(java.time.DateTimeException):
    """
    Java class 'java.time.zone.ZoneRulesException'
    
        Extends:
            java.time.DateTimeException
    
      Constructors:
        * ZoneRulesException(java.lang.String)
        * ZoneRulesException(java.lang.String, java.lang.Throwable)
    
    """
    @typing.overload
    def __init__(self, string: java.lang.String): ...
    @typing.overload
    def __init__(self, string: java.lang.String, throwable: java.lang.Throwable): ...

class ZoneRulesProvider(java.lang.Object):
    """
    Java class 'java.time.zone.ZoneRulesProvider'
    
        Extends:
            java.lang.Object
    
    """
    @classmethod
    def getAvailableZoneIds(cls) -> java.util.Set[java.lang.String]: ...
    @classmethod
    def getRules(cls, string: java.lang.String, boolean: bool) -> ZoneRules: ...
    @classmethod
    def getVersions(cls, string: java.lang.String) -> java.util.NavigableMap[java.lang.String, ZoneRules]: ...
    @classmethod
    def refresh(cls) -> bool: ...
    @classmethod
    def registerProvider(cls, zoneRulesProvider: 'ZoneRulesProvider') -> None: ...
