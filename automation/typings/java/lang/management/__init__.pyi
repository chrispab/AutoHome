import java
import java.lang
import java.security
import java.util
import javax.management
import typing


class LockInfo(java.lang.Object):
    """
    Java class 'java.lang.management.LockInfo'
    
        Extends:
            java.lang.Object
    
      Constructors:
        * LockInfo(java.lang.String, int)
    
    """
    def __init__(self, string: java.lang.String, int: int): ...
    def getClassName(self) -> java.lang.String: ...
    def getIdentityHashCode(self) -> int: ...
    def toString(self) -> java.lang.String: ...

class ManagementFactory(java.lang.Object):
    """
    Java class 'java.lang.management.ManagementFactory'
    
        Extends:
            java.lang.Object
    
      Attributes:
        CLASS_LOADING_MXBEAN_NAME (java.lang.String): final static field
        COMPILATION_MXBEAN_NAME (java.lang.String): final static field
        MEMORY_MXBEAN_NAME (java.lang.String): final static field
        OPERATING_SYSTEM_MXBEAN_NAME (java.lang.String): final static field
        RUNTIME_MXBEAN_NAME (java.lang.String): final static field
        THREAD_MXBEAN_NAME (java.lang.String): final static field
        GARBAGE_COLLECTOR_MXBEAN_DOMAIN_TYPE (java.lang.String): final static field
        MEMORY_MANAGER_MXBEAN_DOMAIN_TYPE (java.lang.String): final static field
        MEMORY_POOL_MXBEAN_DOMAIN_TYPE (java.lang.String): final static field
    
    """
    CLASS_LOADING_MXBEAN_NAME: typing.ClassVar[java.lang.String] = ...
    COMPILATION_MXBEAN_NAME: typing.ClassVar[java.lang.String] = ...
    MEMORY_MXBEAN_NAME: typing.ClassVar[java.lang.String] = ...
    OPERATING_SYSTEM_MXBEAN_NAME: typing.ClassVar[java.lang.String] = ...
    RUNTIME_MXBEAN_NAME: typing.ClassVar[java.lang.String] = ...
    THREAD_MXBEAN_NAME: typing.ClassVar[java.lang.String] = ...
    GARBAGE_COLLECTOR_MXBEAN_DOMAIN_TYPE: typing.ClassVar[java.lang.String] = ...
    MEMORY_MANAGER_MXBEAN_DOMAIN_TYPE: typing.ClassVar[java.lang.String] = ...
    MEMORY_POOL_MXBEAN_DOMAIN_TYPE: typing.ClassVar[java.lang.String] = ...
    @classmethod
    def getClassLoadingMXBean(cls) -> 'ClassLoadingMXBean': ...
    @classmethod
    def getCompilationMXBean(cls) -> 'CompilationMXBean': ...
    @classmethod
    def getGarbageCollectorMXBeans(cls) -> java.util.List['GarbageCollectorMXBean']: ...
    @classmethod
    def getMemoryMXBean(cls) -> 'MemoryMXBean': ...
    @classmethod
    def getMemoryManagerMXBeans(cls) -> java.util.List['MemoryManagerMXBean']: ...
    @classmethod
    def getMemoryPoolMXBeans(cls) -> java.util.List['MemoryPoolMXBean']: ...
    @classmethod
    def getOperatingSystemMXBean(cls) -> 'OperatingSystemMXBean': ...
    @classmethod
    def getPlatformMBeanServer(cls) -> javax.management.MBeanServer: ...
    _getPlatformMXBean_0__T = typing.TypeVar('_getPlatformMXBean_0__T', bound='PlatformManagedObject')  # <T>
    @classmethod
    @typing.overload
    def getPlatformMXBean(cls, class_: typing.Type[_getPlatformMXBean_0__T]) -> _getPlatformMXBean_0__T: ...
    _getPlatformMXBean_1__T = typing.TypeVar('_getPlatformMXBean_1__T', bound='PlatformManagedObject')  # <T>
    @classmethod
    @typing.overload
    def getPlatformMXBean(cls, mBeanServerConnection: javax.management.MBeanServerConnection, class_: typing.Type[_getPlatformMXBean_1__T]) -> _getPlatformMXBean_1__T: ...
    _getPlatformMXBeans_0__T = typing.TypeVar('_getPlatformMXBeans_0__T', bound='PlatformManagedObject')  # <T>
    @classmethod
    @typing.overload
    def getPlatformMXBeans(cls, class_: typing.Type[_getPlatformMXBeans_0__T]) -> java.util.List[_getPlatformMXBeans_0__T]: ...
    _getPlatformMXBeans_1__T = typing.TypeVar('_getPlatformMXBeans_1__T', bound='PlatformManagedObject')  # <T>
    @classmethod
    @typing.overload
    def getPlatformMXBeans(cls, mBeanServerConnection: javax.management.MBeanServerConnection, class_: typing.Type[_getPlatformMXBeans_1__T]) -> java.util.List[_getPlatformMXBeans_1__T]: ...
    @classmethod
    def getPlatformManagementInterfaces(cls) -> java.util.Set[typing.Type['PlatformManagedObject']]: ...
    @classmethod
    def getRuntimeMXBean(cls) -> 'RuntimeMXBean': ...
    @classmethod
    def getThreadMXBean(cls) -> 'ThreadMXBean': ...
    _newPlatformMXBeanProxy__T = typing.TypeVar('_newPlatformMXBeanProxy__T')  # <T>
    @classmethod
    def newPlatformMXBeanProxy(cls, mBeanServerConnection: javax.management.MBeanServerConnection, string: java.lang.String, class_: typing.Type[_newPlatformMXBeanProxy__T]) -> _newPlatformMXBeanProxy__T: ...

class ManagementPermission(java.security.BasicPermission):
    """
    Java class 'java.lang.management.ManagementPermission'
    
        Extends:
            java.security.BasicPermission
    
      Constructors:
        * ManagementPermission(java.lang.String)
        * ManagementPermission(java.lang.String, java.lang.String)
    
      Raises:
        java.lang.IllegalArgumentException: from java
    
    """
    @typing.overload
    def __init__(self, string: java.lang.String): ...
    @typing.overload
    def __init__(self, string: java.lang.String, string2: java.lang.String): ...

class MemoryNotificationInfo(java.lang.Object):
    """
    Java class 'java.lang.management.MemoryNotificationInfo'
    
        Extends:
            java.lang.Object
    
      Constructors:
        * MemoryNotificationInfo(java.lang.String, java.lang.management.MemoryUsage, long)
    
      Attributes:
        MEMORY_THRESHOLD_EXCEEDED (java.lang.String): final static field
        MEMORY_COLLECTION_THRESHOLD_EXCEEDED (java.lang.String): final static field
    
    """
    MEMORY_THRESHOLD_EXCEEDED: typing.ClassVar[java.lang.String] = ...
    MEMORY_COLLECTION_THRESHOLD_EXCEEDED: typing.ClassVar[java.lang.String] = ...
    def __init__(self, string: java.lang.String, memoryUsage: 'MemoryUsage', long: int): ...
    def getCount(self) -> int: ...
    def getPoolName(self) -> java.lang.String: ...
    def getUsage(self) -> 'MemoryUsage': ...

class MemoryType(java.lang.Enum[java.lang.management.MemoryType]):
    """
    Java class 'java.lang.management.MemoryType'
    
        Extends:
            java.lang.Enum
    
      Attributes:
        HEAP (java.lang.management.MemoryType): final static enum constant
        NON_HEAP (java.lang.management.MemoryType): final static enum constant
    
    """
    HEAP: typing.ClassVar['MemoryType'] = ...
    NON_HEAP: typing.ClassVar['MemoryType'] = ...
    def toString(self) -> java.lang.String: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @classmethod
    @typing.overload
    def valueOf(cls, class_: typing.Type[_valueOf_0__T], string: java.lang.String) -> _valueOf_0__T: ...
    @classmethod
    @typing.overload
    def valueOf(cls, string: java.lang.String) -> 'MemoryType': ...
    @classmethod
    def values(cls) -> typing.List['MemoryType']: ...

class MemoryUsage(java.lang.Object):
    """
    Java class 'java.lang.management.MemoryUsage'
    
        Extends:
            java.lang.Object
    
      Constructors:
        * MemoryUsage(long, long, long, long)
    
    """
    def __init__(self, long: int, long2: int, long3: int, long4: int): ...
    def getCommitted(self) -> int: ...
    def getInit(self) -> int: ...
    def getMax(self) -> int: ...
    def getUsed(self) -> int: ...
    def toString(self) -> java.lang.String: ...

class PlatformManagedObject(java.lang.Object):
    """
    public interface PlatformManagedObject
    
        A platform managed object is a :class:`~javax.management.MXBean` for monitoring and managing a component in the Java
        platform. Each platform managed object has a unique :meth:`~java.lang.management.ManagementFactory.MXBean` for the
        :meth:`~java.lang.management.ManagementFactory.getPlatformMBeanServer` access. All platform MXBeans will implement this
        interface.
    
        Note: The platform MXBean interfaces (i.e. all subinterfaces of :code:`PlatformManagedObject`) are implemented by the
        Java platform only. New methods may be added in these interfaces in future Java SE releases. In addition, this
        :code:`PlatformManagedObject` interface is only intended for the management interfaces for the platform to extend but
        not for applications.
    
        Since:
            1.7
    
        Also see:
            :class:`~java.lang.management.ManagementFactory`
    
    
    """
    def getObjectName(self) -> javax.management.ObjectName: ...

class ThreadInfo(java.lang.Object):
    """
    Java class 'java.lang.management.ThreadInfo'
    
        Extends:
            java.lang.Object
    
    """
    def getBlockedCount(self) -> int: ...
    def getBlockedTime(self) -> int: ...
    def getLockInfo(self) -> LockInfo: ...
    def getLockName(self) -> java.lang.String: ...
    def getLockOwnerId(self) -> int: ...
    def getLockOwnerName(self) -> java.lang.String: ...
    def getLockedMonitors(self) -> typing.List['MonitorInfo']: ...
    def getLockedSynchronizers(self) -> typing.List[LockInfo]: ...
    def getPriority(self) -> int: ...
    def getStackTrace(self) -> typing.List[java.lang.StackTraceElement]: ...
    def getThreadId(self) -> int: ...
    def getThreadName(self) -> java.lang.String: ...
    def getThreadState(self) -> java.lang.Thread.State: ...
    def getWaitedCount(self) -> int: ...
    def getWaitedTime(self) -> int: ...
    def isDaemon(self) -> bool: ...
    def isInNative(self) -> bool: ...
    def isSuspended(self) -> bool: ...
    def toString(self) -> java.lang.String: ...

class BufferPoolMXBean(PlatformManagedObject):
    """
    Java class 'java.lang.management.BufferPoolMXBean'
    
        Interfaces:
            java.lang.management.PlatformManagedObject
    
    """
    def getCount(self) -> int: ...
    def getMemoryUsed(self) -> int: ...
    def getName(self) -> java.lang.String: ...
    def getTotalCapacity(self) -> int: ...

class ClassLoadingMXBean(PlatformManagedObject):
    """
    Java class 'java.lang.management.ClassLoadingMXBean'
    
        Interfaces:
            java.lang.management.PlatformManagedObject
    
    """
    def getLoadedClassCount(self) -> int: ...
    def getTotalLoadedClassCount(self) -> int: ...
    def getUnloadedClassCount(self) -> int: ...
    def isVerbose(self) -> bool: ...
    def setVerbose(self, boolean: bool) -> None: ...

class CompilationMXBean(PlatformManagedObject):
    """
    Java class 'java.lang.management.CompilationMXBean'
    
        Interfaces:
            java.lang.management.PlatformManagedObject
    
    """
    def getName(self) -> java.lang.String: ...
    def getTotalCompilationTime(self) -> int: ...
    def isCompilationTimeMonitoringSupported(self) -> bool: ...

class MemoryMXBean(PlatformManagedObject):
    """
    Java class 'java.lang.management.MemoryMXBean'
    
        Interfaces:
            java.lang.management.PlatformManagedObject
    
    """
    def gc(self) -> None: ...
    def getHeapMemoryUsage(self) -> MemoryUsage: ...
    def getNonHeapMemoryUsage(self) -> MemoryUsage: ...
    def getObjectPendingFinalizationCount(self) -> int: ...
    def isVerbose(self) -> bool: ...
    def setVerbose(self, boolean: bool) -> None: ...

class MemoryManagerMXBean(PlatformManagedObject):
    """
    Java class 'java.lang.management.MemoryManagerMXBean'
    
        Interfaces:
            java.lang.management.PlatformManagedObject
    
    """
    def getMemoryPoolNames(self) -> typing.List[java.lang.String]: ...
    def getName(self) -> java.lang.String: ...
    def isValid(self) -> bool: ...

class MemoryPoolMXBean(PlatformManagedObject):
    """
    Java class 'java.lang.management.MemoryPoolMXBean'
    
        Interfaces:
            java.lang.management.PlatformManagedObject
    
    """
    def getCollectionUsage(self) -> MemoryUsage: ...
    def getCollectionUsageThreshold(self) -> int: ...
    def getCollectionUsageThresholdCount(self) -> int: ...
    def getMemoryManagerNames(self) -> typing.List[java.lang.String]: ...
    def getName(self) -> java.lang.String: ...
    def getPeakUsage(self) -> MemoryUsage: ...
    def getType(self) -> MemoryType: ...
    def getUsage(self) -> MemoryUsage: ...
    def getUsageThreshold(self) -> int: ...
    def getUsageThresholdCount(self) -> int: ...
    def isCollectionUsageThresholdExceeded(self) -> bool: ...
    def isCollectionUsageThresholdSupported(self) -> bool: ...
    def isUsageThresholdExceeded(self) -> bool: ...
    def isUsageThresholdSupported(self) -> bool: ...
    def isValid(self) -> bool: ...
    def resetPeakUsage(self) -> None: ...
    def setCollectionUsageThreshold(self, long: int) -> None: ...
    def setUsageThreshold(self, long: int) -> None: ...

class MonitorInfo(LockInfo):
    """
    Java class 'java.lang.management.MonitorInfo'
    
        Extends:
            java.lang.management.LockInfo
    
      Constructors:
        * MonitorInfo(java.lang.String, int, int, java.lang.StackTraceElement)
    
    """
    def __init__(self, string: java.lang.String, int: int, int2: int, stackTraceElement: java.lang.StackTraceElement): ...
    def getLockedStackDepth(self) -> int: ...
    def getLockedStackFrame(self) -> java.lang.StackTraceElement: ...

class OperatingSystemMXBean(PlatformManagedObject):
    """
    Java class 'java.lang.management.OperatingSystemMXBean'
    
        Interfaces:
            java.lang.management.PlatformManagedObject
    
    """
    def getArch(self) -> java.lang.String: ...
    def getAvailableProcessors(self) -> int: ...
    def getName(self) -> java.lang.String: ...
    def getSystemLoadAverage(self) -> float: ...
    def getVersion(self) -> java.lang.String: ...

class PlatformLoggingMXBean(PlatformManagedObject):
    """
    Java class 'java.lang.management.PlatformLoggingMXBean'
    
        Interfaces:
            java.lang.management.PlatformManagedObject
    
    """
    def getLoggerLevel(self, string: java.lang.String) -> java.lang.String: ...
    def getLoggerNames(self) -> java.util.List[java.lang.String]: ...
    def getParentLoggerName(self, string: java.lang.String) -> java.lang.String: ...
    def setLoggerLevel(self, string: java.lang.String, string2: java.lang.String) -> None: ...

class RuntimeMXBean(PlatformManagedObject):
    """
    Java class 'java.lang.management.RuntimeMXBean'
    
        Interfaces:
            java.lang.management.PlatformManagedObject
    
    """
    def getBootClassPath(self) -> java.lang.String: ...
    def getClassPath(self) -> java.lang.String: ...
    def getInputArguments(self) -> java.util.List[java.lang.String]: ...
    def getLibraryPath(self) -> java.lang.String: ...
    def getManagementSpecVersion(self) -> java.lang.String: ...
    def getName(self) -> java.lang.String: ...
    def getPid(self) -> int: ...
    def getSpecName(self) -> java.lang.String: ...
    def getSpecVendor(self) -> java.lang.String: ...
    def getSpecVersion(self) -> java.lang.String: ...
    def getStartTime(self) -> int: ...
    def getSystemProperties(self) -> java.util.Map[java.lang.String, java.lang.String]: ...
    def getUptime(self) -> int: ...
    def getVmName(self) -> java.lang.String: ...
    def getVmVendor(self) -> java.lang.String: ...
    def getVmVersion(self) -> java.lang.String: ...
    def isBootClassPathSupported(self) -> bool: ...

class ThreadMXBean(PlatformManagedObject):
    """
    Java class 'java.lang.management.ThreadMXBean'
    
        Interfaces:
            java.lang.management.PlatformManagedObject
    
    """
    @typing.overload
    def dumpAllThreads(self, boolean: bool, boolean2: bool) -> typing.List[ThreadInfo]: ...
    @typing.overload
    def dumpAllThreads(self, boolean: bool, boolean2: bool, int: int) -> typing.List[ThreadInfo]: ...
    def findDeadlockedThreads(self) -> typing.List[int]: ...
    def findMonitorDeadlockedThreads(self) -> typing.List[int]: ...
    def getAllThreadIds(self) -> typing.List[int]: ...
    def getCurrentThreadCpuTime(self) -> int: ...
    def getCurrentThreadUserTime(self) -> int: ...
    def getDaemonThreadCount(self) -> int: ...
    def getPeakThreadCount(self) -> int: ...
    def getThreadCount(self) -> int: ...
    def getThreadCpuTime(self, long: int) -> int: ...
    @typing.overload
    def getThreadInfo(self, long: int) -> ThreadInfo: ...
    @typing.overload
    def getThreadInfo(self, long: int, int: int) -> ThreadInfo: ...
    @typing.overload
    def getThreadInfo(self, longArray: typing.List[int]) -> typing.List[ThreadInfo]: ...
    @typing.overload
    def getThreadInfo(self, longArray: typing.List[int], boolean: bool, boolean2: bool) -> typing.List[ThreadInfo]: ...
    @typing.overload
    def getThreadInfo(self, longArray: typing.List[int], int: int) -> typing.List[ThreadInfo]: ...
    @typing.overload
    def getThreadInfo(self, longArray: typing.List[int], boolean: bool, boolean2: bool, int: int) -> typing.List[ThreadInfo]: ...
    def getThreadUserTime(self, long: int) -> int: ...
    def getTotalStartedThreadCount(self) -> int: ...
    def isCurrentThreadCpuTimeSupported(self) -> bool: ...
    def isObjectMonitorUsageSupported(self) -> bool: ...
    def isSynchronizerUsageSupported(self) -> bool: ...
    def isThreadContentionMonitoringEnabled(self) -> bool: ...
    def isThreadContentionMonitoringSupported(self) -> bool: ...
    def isThreadCpuTimeEnabled(self) -> bool: ...
    def isThreadCpuTimeSupported(self) -> bool: ...
    def resetPeakThreadCount(self) -> None: ...
    def setThreadContentionMonitoringEnabled(self, boolean: bool) -> None: ...
    def setThreadCpuTimeEnabled(self, boolean: bool) -> None: ...

class GarbageCollectorMXBean(MemoryManagerMXBean):
    """
    Java class 'java.lang.management.GarbageCollectorMXBean'
    
        Interfaces:
            java.lang.management.MemoryManagerMXBean
    
    """
    def getCollectionCount(self) -> int: ...
    def getCollectionTime(self) -> int: ...
