import java.lang
import org.slf4j
import org.slf4j.helpers
import org.slf4j.spi
import typing


class SimpleLogger(org.slf4j.helpers.MarkerIgnoringBase):
    """
    Java class 'org.slf4j.impl.SimpleLogger'
    
        Extends:
            org.slf4j.helpers.MarkerIgnoringBase
    
      Attributes:
        ERROR (int): final static field
        WARN (int): final static field
        INFO (int): final static field
        DEBUG (int): final static field
        TRACE (int): final static field
        LINE_SEPARATOR (java.lang.String): final static field
    
    """
    ERROR: typing.ClassVar[int] = ...
    WARN: typing.ClassVar[int] = ...
    INFO: typing.ClassVar[int] = ...
    DEBUG: typing.ClassVar[int] = ...
    TRACE: typing.ClassVar[int] = ...
    LINE_SEPARATOR: typing.ClassVar[java.lang.String] = ...
    @typing.overload
    def debug(self, marker: org.slf4j.Marker, string: java.lang.String) -> None: ...
    @typing.overload
    def debug(self, marker: org.slf4j.Marker, string: java.lang.String, object: typing.Any) -> None: ...
    @typing.overload
    def debug(self, marker: org.slf4j.Marker, string: java.lang.String, object: typing.Any, object2: typing.Any) -> None: ...
    @typing.overload
    def debug(self, marker: org.slf4j.Marker, string: java.lang.String, objectArray: typing.List[typing.Any]) -> None: ...
    @typing.overload
    def debug(self, marker: org.slf4j.Marker, string: java.lang.String, throwable: java.lang.Throwable) -> None: ...
    @typing.overload
    def debug(self, string: java.lang.String) -> None: ...
    @typing.overload
    def debug(self, string: java.lang.String, object: typing.Any) -> None: ...
    @typing.overload
    def debug(self, string: java.lang.String, object: typing.Any, object2: typing.Any) -> None: ...
    @typing.overload
    def debug(self, string: java.lang.String, objectArray: typing.List[typing.Any]) -> None: ...
    @typing.overload
    def debug(self, string: java.lang.String, throwable: java.lang.Throwable) -> None: ...
    @typing.overload
    def error(self, marker: org.slf4j.Marker, string: java.lang.String) -> None: ...
    @typing.overload
    def error(self, marker: org.slf4j.Marker, string: java.lang.String, object: typing.Any) -> None: ...
    @typing.overload
    def error(self, marker: org.slf4j.Marker, string: java.lang.String, object: typing.Any, object2: typing.Any) -> None: ...
    @typing.overload
    def error(self, marker: org.slf4j.Marker, string: java.lang.String, objectArray: typing.List[typing.Any]) -> None: ...
    @typing.overload
    def error(self, marker: org.slf4j.Marker, string: java.lang.String, throwable: java.lang.Throwable) -> None: ...
    @typing.overload
    def error(self, string: java.lang.String) -> None: ...
    @typing.overload
    def error(self, string: java.lang.String, object: typing.Any) -> None: ...
    @typing.overload
    def error(self, string: java.lang.String, object: typing.Any, object2: typing.Any) -> None: ...
    @typing.overload
    def error(self, string: java.lang.String, objectArray: typing.List[typing.Any]) -> None: ...
    @typing.overload
    def error(self, string: java.lang.String, throwable: java.lang.Throwable) -> None: ...
    @classmethod
    def getLevel(cls) -> int: ...
    def getName(self) -> java.lang.String: ...
    @typing.overload
    def info(self, marker: org.slf4j.Marker, string: java.lang.String) -> None: ...
    @typing.overload
    def info(self, marker: org.slf4j.Marker, string: java.lang.String, object: typing.Any) -> None: ...
    @typing.overload
    def info(self, marker: org.slf4j.Marker, string: java.lang.String, object: typing.Any, object2: typing.Any) -> None: ...
    @typing.overload
    def info(self, marker: org.slf4j.Marker, string: java.lang.String, objectArray: typing.List[typing.Any]) -> None: ...
    @typing.overload
    def info(self, marker: org.slf4j.Marker, string: java.lang.String, throwable: java.lang.Throwable) -> None: ...
    @typing.overload
    def info(self, string: java.lang.String) -> None: ...
    @typing.overload
    def info(self, string: java.lang.String, object: typing.Any) -> None: ...
    @typing.overload
    def info(self, string: java.lang.String, object: typing.Any, object2: typing.Any) -> None: ...
    @typing.overload
    def info(self, string: java.lang.String, objectArray: typing.List[typing.Any]) -> None: ...
    @typing.overload
    def info(self, string: java.lang.String, throwable: java.lang.Throwable) -> None: ...
    @typing.overload
    def isDebugEnabled(self, marker: org.slf4j.Marker) -> bool: ...
    @typing.overload
    def isDebugEnabled(self) -> bool: ...
    @typing.overload
    def isErrorEnabled(self, marker: org.slf4j.Marker) -> bool: ...
    @typing.overload
    def isErrorEnabled(self) -> bool: ...
    @typing.overload
    def isInfoEnabled(self, marker: org.slf4j.Marker) -> bool: ...
    @typing.overload
    def isInfoEnabled(self) -> bool: ...
    @typing.overload
    def isTraceEnabled(self, marker: org.slf4j.Marker) -> bool: ...
    @typing.overload
    def isTraceEnabled(self) -> bool: ...
    @typing.overload
    def isWarnEnabled(self, marker: org.slf4j.Marker) -> bool: ...
    @typing.overload
    def isWarnEnabled(self) -> bool: ...
    @classmethod
    def setLevel(cls, int: int) -> None: ...
    @typing.overload
    def trace(self, marker: org.slf4j.Marker, string: java.lang.String) -> None: ...
    @typing.overload
    def trace(self, marker: org.slf4j.Marker, string: java.lang.String, object: typing.Any) -> None: ...
    @typing.overload
    def trace(self, marker: org.slf4j.Marker, string: java.lang.String, object: typing.Any, object2: typing.Any) -> None: ...
    @typing.overload
    def trace(self, marker: org.slf4j.Marker, string: java.lang.String, objectArray: typing.List[typing.Any]) -> None: ...
    @typing.overload
    def trace(self, marker: org.slf4j.Marker, string: java.lang.String, throwable: java.lang.Throwable) -> None: ...
    @typing.overload
    def trace(self, string: java.lang.String) -> None: ...
    @typing.overload
    def trace(self, string: java.lang.String, object: typing.Any) -> None: ...
    @typing.overload
    def trace(self, string: java.lang.String, object: typing.Any, object2: typing.Any) -> None: ...
    @typing.overload
    def trace(self, string: java.lang.String, objectArray: typing.List[typing.Any]) -> None: ...
    @typing.overload
    def trace(self, string: java.lang.String, throwable: java.lang.Throwable) -> None: ...
    @typing.overload
    def warn(self, marker: org.slf4j.Marker, string: java.lang.String) -> None: ...
    @typing.overload
    def warn(self, marker: org.slf4j.Marker, string: java.lang.String, object: typing.Any) -> None: ...
    @typing.overload
    def warn(self, marker: org.slf4j.Marker, string: java.lang.String, object: typing.Any, object2: typing.Any) -> None: ...
    @typing.overload
    def warn(self, marker: org.slf4j.Marker, string: java.lang.String, objectArray: typing.List[typing.Any]) -> None: ...
    @typing.overload
    def warn(self, marker: org.slf4j.Marker, string: java.lang.String, throwable: java.lang.Throwable) -> None: ...
    @typing.overload
    def warn(self, string: java.lang.String) -> None: ...
    @typing.overload
    def warn(self, string: java.lang.String, object: typing.Any) -> None: ...
    @typing.overload
    def warn(self, string: java.lang.String, object: typing.Any, object2: typing.Any) -> None: ...
    @typing.overload
    def warn(self, string: java.lang.String, objectArray: typing.List[typing.Any]) -> None: ...
    @typing.overload
    def warn(self, string: java.lang.String, throwable: java.lang.Throwable) -> None: ...

class SimpleLoggerFactory(org.slf4j.ILoggerFactory):
    """
    Java class 'org.slf4j.impl.SimpleLoggerFactory'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            org.slf4j.ILoggerFactory
    
      Constructors:
        * SimpleLoggerFactory()
    
    """
    def __init__(self): ...
    def getLogger(self, string: java.lang.String) -> org.slf4j.Logger: ...

class StaticLoggerBinder(org.slf4j.spi.LoggerFactoryBinder):
    """
    Java class 'org.slf4j.impl.StaticLoggerBinder'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            org.slf4j.spi.LoggerFactoryBinder
    
      Attributes:
        REQUESTED_API_VERSION (java.lang.String): static field
    
    """
    REQUESTED_API_VERSION: typing.ClassVar[java.lang.String] = ...
    def getLoggerFactory(self) -> org.slf4j.ILoggerFactory: ...
    def getLoggerFactoryClassStr(self) -> java.lang.String: ...
    @classmethod
    def getSingleton(cls) -> 'StaticLoggerBinder': ...

class StaticMDCBinder(java.lang.Object):
    """
    Java class 'org.slf4j.impl.StaticMDCBinder'
    
        Extends:
            java.lang.Object
    
      Attributes:
        SINGLETON (org.slf4j.impl.StaticMDCBinder): final static field
    
    """
    SINGLETON: typing.ClassVar['StaticMDCBinder'] = ...
    def getMDCA(self) -> org.slf4j.spi.MDCAdapter: ...
    def getMDCAdapterClassStr(self) -> java.lang.String: ...
    @classmethod
    def getSingleton(cls) -> 'StaticMDCBinder': ...

class StaticMarkerBinder(org.slf4j.spi.MarkerFactoryBinder):
    """
    Java class 'org.slf4j.impl.StaticMarkerBinder'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            org.slf4j.spi.MarkerFactoryBinder
    
      Attributes:
        SINGLETON (org.slf4j.impl.StaticMarkerBinder): final static field
    
    """
    SINGLETON: typing.ClassVar['StaticMarkerBinder'] = ...
    def getMarkerFactory(self) -> org.slf4j.IMarkerFactory: ...
    def getMarkerFactoryClassStr(self) -> java.lang.String: ...
    @classmethod
    def getSingleton(cls) -> 'StaticMarkerBinder': ...
