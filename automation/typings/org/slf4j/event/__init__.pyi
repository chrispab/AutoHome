import java.lang
import java.util
import org
import org.slf4j
import org.slf4j.helpers
import typing


class EventConstants(java.lang.Object):
    """
    Java class 'org.slf4j.event.EventConstants'
    
        Extends:
            java.lang.Object
    
      Constructors:
        * EventConstants()
    
      Attributes:
        ERROR_INT (int): final static field
        WARN_INT (int): final static field
        INFO_INT (int): final static field
        DEBUG_INT (int): final static field
        TRACE_INT (int): final static field
        NA_SUBST (java.lang.String): final static field
    
    """
    ERROR_INT: typing.ClassVar[int] = ...
    WARN_INT: typing.ClassVar[int] = ...
    INFO_INT: typing.ClassVar[int] = ...
    DEBUG_INT: typing.ClassVar[int] = ...
    TRACE_INT: typing.ClassVar[int] = ...
    NA_SUBST: typing.ClassVar[java.lang.String] = ...
    def __init__(self): ...

class EventRecodingLogger(org.slf4j.Logger):
    """
    Java class 'org.slf4j.event.EventRecodingLogger'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            org.slf4j.Logger
    
      Constructors:
        * EventRecodingLogger(org.slf4j.helpers.SubstituteLogger, java.util.Queue)
    
    """
    def __init__(self, substituteLogger: org.slf4j.helpers.SubstituteLogger, queue: java.util.Queue['SubstituteLoggingEvent']): ...
    @typing.overload
    def debug(self, string: java.lang.String) -> None: ...
    @typing.overload
    def debug(self, string: java.lang.String, object: typing.Any) -> None: ...
    @typing.overload
    def debug(self, string: java.lang.String, object: typing.Any, object2: typing.Any) -> None: ...
    @typing.overload
    def debug(self, string: java.lang.String, objectArray: typing.List[typing.Any]) -> None: ...
    @typing.overload
    def debug(self, string: java.lang.String, throwable: java.lang.Throwable) -> None: ...
    @typing.overload
    def debug(self, marker: org.slf4j.Marker, string: java.lang.String) -> None: ...
    @typing.overload
    def debug(self, marker: org.slf4j.Marker, string: java.lang.String, object: typing.Any) -> None: ...
    @typing.overload
    def debug(self, marker: org.slf4j.Marker, string: java.lang.String, object: typing.Any, object2: typing.Any) -> None: ...
    @typing.overload
    def debug(self, marker: org.slf4j.Marker, string: java.lang.String, objectArray: typing.List[typing.Any]) -> None: ...
    @typing.overload
    def debug(self, marker: org.slf4j.Marker, string: java.lang.String, throwable: java.lang.Throwable) -> None: ...
    @typing.overload
    def error(self, string: java.lang.String) -> None: ...
    @typing.overload
    def error(self, string: java.lang.String, object: typing.Any) -> None: ...
    @typing.overload
    def error(self, string: java.lang.String, object: typing.Any, object2: typing.Any) -> None: ...
    @typing.overload
    def error(self, string: java.lang.String, objectArray: typing.List[typing.Any]) -> None: ...
    @typing.overload
    def error(self, string: java.lang.String, throwable: java.lang.Throwable) -> None: ...
    @typing.overload
    def error(self, marker: org.slf4j.Marker, string: java.lang.String) -> None: ...
    @typing.overload
    def error(self, marker: org.slf4j.Marker, string: java.lang.String, object: typing.Any) -> None: ...
    @typing.overload
    def error(self, marker: org.slf4j.Marker, string: java.lang.String, object: typing.Any, object2: typing.Any) -> None: ...
    @typing.overload
    def error(self, marker: org.slf4j.Marker, string: java.lang.String, objectArray: typing.List[typing.Any]) -> None: ...
    @typing.overload
    def error(self, marker: org.slf4j.Marker, string: java.lang.String, throwable: java.lang.Throwable) -> None: ...
    def getName(self) -> java.lang.String: ...
    @typing.overload
    def info(self, string: java.lang.String) -> None: ...
    @typing.overload
    def info(self, string: java.lang.String, object: typing.Any) -> None: ...
    @typing.overload
    def info(self, string: java.lang.String, object: typing.Any, object2: typing.Any) -> None: ...
    @typing.overload
    def info(self, string: java.lang.String, objectArray: typing.List[typing.Any]) -> None: ...
    @typing.overload
    def info(self, string: java.lang.String, throwable: java.lang.Throwable) -> None: ...
    @typing.overload
    def info(self, marker: org.slf4j.Marker, string: java.lang.String) -> None: ...
    @typing.overload
    def info(self, marker: org.slf4j.Marker, string: java.lang.String, object: typing.Any) -> None: ...
    @typing.overload
    def info(self, marker: org.slf4j.Marker, string: java.lang.String, object: typing.Any, object2: typing.Any) -> None: ...
    @typing.overload
    def info(self, marker: org.slf4j.Marker, string: java.lang.String, objectArray: typing.List[typing.Any]) -> None: ...
    @typing.overload
    def info(self, marker: org.slf4j.Marker, string: java.lang.String, throwable: java.lang.Throwable) -> None: ...
    @typing.overload
    def isDebugEnabled(self) -> bool: ...
    @typing.overload
    def isDebugEnabled(self, marker: org.slf4j.Marker) -> bool: ...
    @typing.overload
    def isErrorEnabled(self) -> bool: ...
    @typing.overload
    def isErrorEnabled(self, marker: org.slf4j.Marker) -> bool: ...
    @typing.overload
    def isInfoEnabled(self) -> bool: ...
    @typing.overload
    def isInfoEnabled(self, marker: org.slf4j.Marker) -> bool: ...
    @typing.overload
    def isTraceEnabled(self) -> bool: ...
    @typing.overload
    def isTraceEnabled(self, marker: org.slf4j.Marker) -> bool: ...
    @typing.overload
    def isWarnEnabled(self) -> bool: ...
    @typing.overload
    def isWarnEnabled(self, marker: org.slf4j.Marker) -> bool: ...
    @typing.overload
    def trace(self, string: java.lang.String) -> None: ...
    @typing.overload
    def trace(self, string: java.lang.String, object: typing.Any) -> None: ...
    @typing.overload
    def trace(self, string: java.lang.String, object: typing.Any, object2: typing.Any) -> None: ...
    @typing.overload
    def trace(self, string: java.lang.String, objectArray: typing.List[typing.Any]) -> None: ...
    @typing.overload
    def trace(self, string: java.lang.String, throwable: java.lang.Throwable) -> None: ...
    @typing.overload
    def trace(self, marker: org.slf4j.Marker, string: java.lang.String) -> None: ...
    @typing.overload
    def trace(self, marker: org.slf4j.Marker, string: java.lang.String, object: typing.Any) -> None: ...
    @typing.overload
    def trace(self, marker: org.slf4j.Marker, string: java.lang.String, object: typing.Any, object2: typing.Any) -> None: ...
    @typing.overload
    def trace(self, marker: org.slf4j.Marker, string: java.lang.String, objectArray: typing.List[typing.Any]) -> None: ...
    @typing.overload
    def trace(self, marker: org.slf4j.Marker, string: java.lang.String, throwable: java.lang.Throwable) -> None: ...
    @typing.overload
    def warn(self, string: java.lang.String) -> None: ...
    @typing.overload
    def warn(self, string: java.lang.String, object: typing.Any) -> None: ...
    @typing.overload
    def warn(self, string: java.lang.String, object: typing.Any, object2: typing.Any) -> None: ...
    @typing.overload
    def warn(self, string: java.lang.String, objectArray: typing.List[typing.Any]) -> None: ...
    @typing.overload
    def warn(self, string: java.lang.String, throwable: java.lang.Throwable) -> None: ...
    @typing.overload
    def warn(self, marker: org.slf4j.Marker, string: java.lang.String) -> None: ...
    @typing.overload
    def warn(self, marker: org.slf4j.Marker, string: java.lang.String, object: typing.Any) -> None: ...
    @typing.overload
    def warn(self, marker: org.slf4j.Marker, string: java.lang.String, object: typing.Any, object2: typing.Any) -> None: ...
    @typing.overload
    def warn(self, marker: org.slf4j.Marker, string: java.lang.String, objectArray: typing.List[typing.Any]) -> None: ...
    @typing.overload
    def warn(self, marker: org.slf4j.Marker, string: java.lang.String, throwable: java.lang.Throwable) -> None: ...

class Level(java.lang.Enum[org.slf4j.event.Level]):
    """
    Java class 'org.slf4j.event.Level'
    
        Extends:
            java.lang.Enum
    
      Attributes:
        ERROR (org.slf4j.event.Level): final static enum constant
        WARN (org.slf4j.event.Level): final static enum constant
        INFO (org.slf4j.event.Level): final static enum constant
        DEBUG (org.slf4j.event.Level): final static enum constant
        TRACE (org.slf4j.event.Level): final static enum constant
    
    """
    ERROR: typing.ClassVar['Level'] = ...
    WARN: typing.ClassVar['Level'] = ...
    INFO: typing.ClassVar['Level'] = ...
    DEBUG: typing.ClassVar['Level'] = ...
    TRACE: typing.ClassVar['Level'] = ...
    def toInt(self) -> int: ...
    def toString(self) -> java.lang.String: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @classmethod
    @typing.overload
    def valueOf(cls, class_: typing.Type[_valueOf_0__T], string: java.lang.String) -> _valueOf_0__T: ...
    @classmethod
    @typing.overload
    def valueOf(cls, string: java.lang.String) -> 'Level': ...
    @classmethod
    def values(cls) -> typing.List['Level']: ...

class LoggingEvent(java.lang.Object):
    """
    Java class 'org.slf4j.event.LoggingEvent'
    
    """
    def getArgumentArray(self) -> typing.List[typing.Any]: ...
    def getLevel(self) -> Level: ...
    def getLoggerName(self) -> java.lang.String: ...
    def getMarker(self) -> org.slf4j.Marker: ...
    def getMessage(self) -> java.lang.String: ...
    def getThreadName(self) -> java.lang.String: ...
    def getThrowable(self) -> java.lang.Throwable: ...
    def getTimeStamp(self) -> int: ...

class SubstituteLoggingEvent(LoggingEvent):
    """
    Java class 'org.slf4j.event.SubstituteLoggingEvent'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            org.slf4j.event.LoggingEvent
    
      Constructors:
        * SubstituteLoggingEvent()
    
    """
    def __init__(self): ...
    def getArgumentArray(self) -> typing.List[typing.Any]: ...
    def getLevel(self) -> Level: ...
    def getLogger(self) -> org.slf4j.helpers.SubstituteLogger: ...
    def getLoggerName(self) -> java.lang.String: ...
    def getMarker(self) -> org.slf4j.Marker: ...
    def getMessage(self) -> java.lang.String: ...
    def getThreadName(self) -> java.lang.String: ...
    def getThrowable(self) -> java.lang.Throwable: ...
    def getTimeStamp(self) -> int: ...
    def setArgumentArray(self, objectArray: typing.List[typing.Any]) -> None: ...
    def setLevel(self, level: Level) -> None: ...
    def setLogger(self, substituteLogger: org.slf4j.helpers.SubstituteLogger) -> None: ...
    def setLoggerName(self, string: java.lang.String) -> None: ...
    def setMarker(self, marker: org.slf4j.Marker) -> None: ...
    def setMessage(self, string: java.lang.String) -> None: ...
    def setThreadName(self, string: java.lang.String) -> None: ...
    def setThrowable(self, throwable: java.lang.Throwable) -> None: ...
    def setTimeStamp(self, long: int) -> None: ...
