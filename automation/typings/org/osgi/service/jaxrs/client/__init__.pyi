import java.lang
import javax.ws.rs.client
import javax.ws.rs.core
import javax.ws.rs.sse
import org.osgi.util.promise
import typing


class PromiseRxInvoker(javax.ws.rs.client.RxInvoker[org.osgi.util.promise.Promise]):
    """
    Java class 'org.osgi.service.jaxrs.client.PromiseRxInvoker'
    
        Interfaces:
            javax.ws.rs.client.RxInvoker
    
    """
    @typing.overload
    def delete(self) -> org.osgi.util.promise.Promise[javax.ws.rs.core.Response]: ...
    _delete_1__R = typing.TypeVar('_delete_1__R')  # <R>
    @typing.overload
    def delete(self, class_: typing.Type[_delete_1__R]) -> org.osgi.util.promise.Promise[_delete_1__R]: ...
    _delete_2__R = typing.TypeVar('_delete_2__R')  # <R>
    @typing.overload
    def delete(self, genericType: javax.ws.rs.core.GenericType[_delete_2__R]) -> org.osgi.util.promise.Promise[_delete_2__R]: ...
    @typing.overload
    def delete(self) -> typing.Any: ...
    @typing.overload
    def delete(self, class_: typing.Type) -> typing.Any: ...
    @typing.overload
    def delete(self, genericType: javax.ws.rs.core.GenericType) -> typing.Any: ...
    @typing.overload
    def get(self) -> org.osgi.util.promise.Promise[javax.ws.rs.core.Response]: ...
    _get_1__R = typing.TypeVar('_get_1__R')  # <R>
    @typing.overload
    def get(self, class_: typing.Type[_get_1__R]) -> org.osgi.util.promise.Promise[_get_1__R]: ...
    _get_2__R = typing.TypeVar('_get_2__R')  # <R>
    @typing.overload
    def get(self, genericType: javax.ws.rs.core.GenericType[_get_2__R]) -> org.osgi.util.promise.Promise[_get_2__R]: ...
    @typing.overload
    def get(self) -> typing.Any: ...
    @typing.overload
    def get(self, class_: typing.Type) -> typing.Any: ...
    @typing.overload
    def get(self, genericType: javax.ws.rs.core.GenericType) -> typing.Any: ...
    @typing.overload
    def head(self) -> org.osgi.util.promise.Promise[javax.ws.rs.core.Response]: ...
    @typing.overload
    def head(self) -> typing.Any: ...
    @typing.overload
    def method(self, string: java.lang.String) -> org.osgi.util.promise.Promise[javax.ws.rs.core.Response]: ...
    _method_1__R = typing.TypeVar('_method_1__R')  # <R>
    @typing.overload
    def method(self, string: java.lang.String, class_: typing.Type[_method_1__R]) -> org.osgi.util.promise.Promise[_method_1__R]: ...
    @typing.overload
    def method(self, string: java.lang.String, entity: javax.ws.rs.client.Entity[typing.Any]) -> org.osgi.util.promise.Promise[javax.ws.rs.core.Response]: ...
    _method_3__R = typing.TypeVar('_method_3__R')  # <R>
    @typing.overload
    def method(self, string: java.lang.String, entity: javax.ws.rs.client.Entity[typing.Any], class_: typing.Type[_method_3__R]) -> org.osgi.util.promise.Promise[_method_3__R]: ...
    _method_4__R = typing.TypeVar('_method_4__R')  # <R>
    @typing.overload
    def method(self, string: java.lang.String, entity: javax.ws.rs.client.Entity[typing.Any], genericType: javax.ws.rs.core.GenericType[_method_4__R]) -> org.osgi.util.promise.Promise[_method_4__R]: ...
    _method_5__R = typing.TypeVar('_method_5__R')  # <R>
    @typing.overload
    def method(self, string: java.lang.String, genericType: javax.ws.rs.core.GenericType[_method_5__R]) -> org.osgi.util.promise.Promise[_method_5__R]: ...
    @typing.overload
    def method(self, string: java.lang.String) -> typing.Any: ...
    @typing.overload
    def method(self, string: java.lang.String, class_: typing.Type) -> typing.Any: ...
    @typing.overload
    def method(self, string: java.lang.String, entity: javax.ws.rs.client.Entity) -> typing.Any: ...
    @typing.overload
    def method(self, string: java.lang.String, entity: javax.ws.rs.client.Entity, class_: typing.Type) -> typing.Any: ...
    @typing.overload
    def method(self, string: java.lang.String, entity: javax.ws.rs.client.Entity, genericType: javax.ws.rs.core.GenericType) -> typing.Any: ...
    @typing.overload
    def method(self, string: java.lang.String, genericType: javax.ws.rs.core.GenericType) -> typing.Any: ...
    @typing.overload
    def options(self) -> org.osgi.util.promise.Promise[javax.ws.rs.core.Response]: ...
    _options_1__R = typing.TypeVar('_options_1__R')  # <R>
    @typing.overload
    def options(self, class_: typing.Type[_options_1__R]) -> org.osgi.util.promise.Promise[_options_1__R]: ...
    _options_2__R = typing.TypeVar('_options_2__R')  # <R>
    @typing.overload
    def options(self, genericType: javax.ws.rs.core.GenericType[_options_2__R]) -> org.osgi.util.promise.Promise[_options_2__R]: ...
    @typing.overload
    def options(self) -> typing.Any: ...
    @typing.overload
    def options(self, class_: typing.Type) -> typing.Any: ...
    @typing.overload
    def options(self, genericType: javax.ws.rs.core.GenericType) -> typing.Any: ...
    @typing.overload
    def post(self, entity: javax.ws.rs.client.Entity[typing.Any]) -> org.osgi.util.promise.Promise[javax.ws.rs.core.Response]: ...
    _post_1__R = typing.TypeVar('_post_1__R')  # <R>
    @typing.overload
    def post(self, entity: javax.ws.rs.client.Entity[typing.Any], class_: typing.Type[_post_1__R]) -> org.osgi.util.promise.Promise[_post_1__R]: ...
    _post_2__R = typing.TypeVar('_post_2__R')  # <R>
    @typing.overload
    def post(self, entity: javax.ws.rs.client.Entity[typing.Any], genericType: javax.ws.rs.core.GenericType[_post_2__R]) -> org.osgi.util.promise.Promise[_post_2__R]: ...
    @typing.overload
    def post(self, entity: javax.ws.rs.client.Entity) -> typing.Any: ...
    @typing.overload
    def post(self, entity: javax.ws.rs.client.Entity, class_: typing.Type) -> typing.Any: ...
    @typing.overload
    def post(self, entity: javax.ws.rs.client.Entity, genericType: javax.ws.rs.core.GenericType) -> typing.Any: ...
    @typing.overload
    def put(self, entity: javax.ws.rs.client.Entity[typing.Any]) -> org.osgi.util.promise.Promise[javax.ws.rs.core.Response]: ...
    _put_1__R = typing.TypeVar('_put_1__R')  # <R>
    @typing.overload
    def put(self, entity: javax.ws.rs.client.Entity[typing.Any], class_: typing.Type[_put_1__R]) -> org.osgi.util.promise.Promise[_put_1__R]: ...
    _put_2__R = typing.TypeVar('_put_2__R')  # <R>
    @typing.overload
    def put(self, entity: javax.ws.rs.client.Entity[typing.Any], genericType: javax.ws.rs.core.GenericType[_put_2__R]) -> org.osgi.util.promise.Promise[_put_2__R]: ...
    @typing.overload
    def put(self, entity: javax.ws.rs.client.Entity) -> typing.Any: ...
    @typing.overload
    def put(self, entity: javax.ws.rs.client.Entity, class_: typing.Type) -> typing.Any: ...
    @typing.overload
    def put(self, entity: javax.ws.rs.client.Entity, genericType: javax.ws.rs.core.GenericType) -> typing.Any: ...
    @typing.overload
    def trace(self) -> org.osgi.util.promise.Promise[javax.ws.rs.core.Response]: ...
    _trace_1__R = typing.TypeVar('_trace_1__R')  # <R>
    @typing.overload
    def trace(self, class_: typing.Type[_trace_1__R]) -> org.osgi.util.promise.Promise[_trace_1__R]: ...
    _trace_2__R = typing.TypeVar('_trace_2__R')  # <R>
    @typing.overload
    def trace(self, genericType: javax.ws.rs.core.GenericType[_trace_2__R]) -> org.osgi.util.promise.Promise[_trace_2__R]: ...
    @typing.overload
    def trace(self) -> typing.Any: ...
    @typing.overload
    def trace(self, class_: typing.Type) -> typing.Any: ...
    @typing.overload
    def trace(self, genericType: javax.ws.rs.core.GenericType) -> typing.Any: ...

class SseEventSourceFactory(java.lang.Object):
    """
    Java class 'org.osgi.service.jaxrs.client.SseEventSourceFactory'
    
    """
    def newBuilder(self, webTarget: javax.ws.rs.client.WebTarget) -> javax.ws.rs.sse.SseEventSource.Builder: ...
    def newSource(self, webTarget: javax.ws.rs.client.WebTarget) -> javax.ws.rs.sse.SseEventSource: ...
