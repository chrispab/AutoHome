import java.lang
import java.security
import java.util
import org.osgi.framework
import typing


class Event(java.lang.Object):
    """
    Java class 'org.osgi.service.event.Event'
    
        Extends:
            java.lang.Object
    
      Constructors:
        * Event(java.lang.String, java.util.Map)
        * Event(java.lang.String, java.util.Dictionary)
    
    """
    @typing.overload
    def __init__(self, string: java.lang.String, dictionary: java.util.Dictionary[java.lang.String, typing.Any]): ...
    @typing.overload
    def __init__(self, string: java.lang.String, map: typing.Union[java.util.Map[java.lang.String, typing.Any], typing.Mapping[java.lang.String, typing.Any]]): ...
    def containsProperty(self, string: java.lang.String) -> bool: ...
    def equals(self, object: typing.Any) -> bool: ...
    def getProperty(self, string: java.lang.String) -> typing.Any: ...
    def getPropertyNames(self) -> typing.List[java.lang.String]: ...
    def getTopic(self) -> java.lang.String: ...
    def hashCode(self) -> int: ...
    def matches(self, filter: org.osgi.framework.Filter) -> bool: ...
    def toString(self) -> java.lang.String: ...

class EventAdmin(java.lang.Object):
    """
    Java class 'org.osgi.service.event.EventAdmin'
    
    """
    def postEvent(self, event: Event) -> None: ...
    def sendEvent(self, event: Event) -> None: ...

class EventConstants(java.lang.Object):
    """
    Java class 'org.osgi.service.event.EventConstants'
    
      Attributes:
        EVENT_TOPIC (java.lang.String): final static field
        EVENT_FILTER (java.lang.String): final static field
        EVENT_DELIVERY (java.lang.String): final static field
        DELIVERY_ASYNC_ORDERED (java.lang.String): final static field
        DELIVERY_ASYNC_UNORDERED (java.lang.String): final static field
        BUNDLE_SIGNER (java.lang.String): final static field
        BUNDLE_SYMBOLICNAME (java.lang.String): final static field
        BUNDLE_ID (java.lang.String): final static field
        BUNDLE (java.lang.String): final static field
        BUNDLE_VERSION (java.lang.String): final static field
        EVENT (java.lang.String): final static field
        EXCEPTION (java.lang.String): final static field
        EXCEPTION_CLASS (java.lang.String): final static field
        EXCEPTION_MESSAGE (java.lang.String): final static field
        MESSAGE (java.lang.String): final static field
        SERVICE (java.lang.String): final static field
        SERVICE_ID (java.lang.String): final static field
        SERVICE_OBJECTCLASS (java.lang.String): final static field
        SERVICE_PID (java.lang.String): final static field
        TIMESTAMP (java.lang.String): final static field
        EVENT_ADMIN_IMPLEMENTATION (java.lang.String): final static field
        EVENT_ADMIN_SPECIFICATION_VERSION (java.lang.String): final static field
        EXECPTION_CLASS (java.lang.String): final static field
    
    """
    EVENT_TOPIC: typing.ClassVar[java.lang.String] = ...
    EVENT_FILTER: typing.ClassVar[java.lang.String] = ...
    EVENT_DELIVERY: typing.ClassVar[java.lang.String] = ...
    DELIVERY_ASYNC_ORDERED: typing.ClassVar[java.lang.String] = ...
    DELIVERY_ASYNC_UNORDERED: typing.ClassVar[java.lang.String] = ...
    BUNDLE_SIGNER: typing.ClassVar[java.lang.String] = ...
    BUNDLE_SYMBOLICNAME: typing.ClassVar[java.lang.String] = ...
    BUNDLE_ID: typing.ClassVar[java.lang.String] = ...
    BUNDLE: typing.ClassVar[java.lang.String] = ...
    BUNDLE_VERSION: typing.ClassVar[java.lang.String] = ...
    EVENT: typing.ClassVar[java.lang.String] = ...
    EXCEPTION: typing.ClassVar[java.lang.String] = ...
    EXCEPTION_CLASS: typing.ClassVar[java.lang.String] = ...
    EXCEPTION_MESSAGE: typing.ClassVar[java.lang.String] = ...
    MESSAGE: typing.ClassVar[java.lang.String] = ...
    SERVICE: typing.ClassVar[java.lang.String] = ...
    SERVICE_ID: typing.ClassVar[java.lang.String] = ...
    SERVICE_OBJECTCLASS: typing.ClassVar[java.lang.String] = ...
    SERVICE_PID: typing.ClassVar[java.lang.String] = ...
    TIMESTAMP: typing.ClassVar[java.lang.String] = ...
    EVENT_ADMIN_IMPLEMENTATION: typing.ClassVar[java.lang.String] = ...
    EVENT_ADMIN_SPECIFICATION_VERSION: typing.ClassVar[java.lang.String] = ...
    EXECPTION_CLASS: typing.ClassVar[java.lang.String] = ...

class EventHandler(java.lang.Object):
    """
    Java class 'org.osgi.service.event.EventHandler'
    
    """
    def handleEvent(self, event: Event) -> None: ...

class EventProperties(java.util.Map[java.lang.String, typing.Any]):
    """
    Java class 'org.osgi.service.event.EventProperties'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            java.util.Map
    
      Constructors:
        * EventProperties(java.util.Map)
    
    """
    def __init__(self, map: typing.Union[java.util.Map[java.lang.String, typing.Any], typing.Mapping[java.lang.String, typing.Any]]): ...
    def clear(self) -> None: ...
    def containsKey(self, object: typing.Any) -> bool: ...
    def containsValue(self, object: typing.Any) -> bool: ...
    def entrySet(self) -> java.util.Set[java.util.Map.Entry[java.lang.String, typing.Any]]: ...
    def equals(self, object: typing.Any) -> bool: ...
    def get(self, object: typing.Any) -> typing.Any: ...
    def hashCode(self) -> int: ...
    def isEmpty(self) -> bool: ...
    def keySet(self) -> java.util.Set[java.lang.String]: ...
    @typing.overload
    def put(self, object: typing.Any, object2: typing.Any) -> typing.Any: ...
    @typing.overload
    def put(self, string: java.lang.String, object: typing.Any) -> typing.Any: ...
    def putAll(self, map: typing.Union[java.util.Map[java.lang.String, typing.Any], typing.Mapping[java.lang.String, typing.Any]]) -> None: ...
    @typing.overload
    def remove(self, object: typing.Any, object2: typing.Any) -> bool: ...
    @typing.overload
    def remove(self, object: typing.Any) -> typing.Any: ...
    def size(self) -> int: ...
    def toString(self) -> java.lang.String: ...
    def values(self) -> java.util.Collection[typing.Any]: ...

class TopicPermission(java.security.Permission):
    """
    Java class 'org.osgi.service.event.TopicPermission'
    
        Extends:
            java.security.Permission
    
      Constructors:
        * TopicPermission(java.lang.String, java.lang.String)
    
      Attributes:
        PUBLISH (java.lang.String): final static field
        SUBSCRIBE (java.lang.String): final static field
    
    """
    PUBLISH: typing.ClassVar[java.lang.String] = ...
    SUBSCRIBE: typing.ClassVar[java.lang.String] = ...
    def __init__(self, string: java.lang.String, string2: java.lang.String): ...
    def equals(self, object: typing.Any) -> bool: ...
    def getActions(self) -> java.lang.String: ...
    def hashCode(self) -> int: ...
    def implies(self, permission: java.security.Permission) -> bool: ...
    def newPermissionCollection(self) -> java.security.PermissionCollection: ...
