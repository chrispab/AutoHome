import java.lang
import java.security
import java.util
import org.osgi.framework
import org.osgi.service.permissionadmin
import typing


class BundleLocationCondition(java.lang.Object):
    """
    Java class 'org.osgi.service.condpermadmin.BundleLocationCondition'
    
        Extends:
            java.lang.Object
    
    """
    @classmethod
    def getCondition(cls, bundle: org.osgi.framework.Bundle, conditionInfo: 'ConditionInfo') -> 'Condition': ...

class BundleSignerCondition(java.lang.Object):
    """
    Java class 'org.osgi.service.condpermadmin.BundleSignerCondition'
    
        Extends:
            java.lang.Object
    
    """
    @classmethod
    def getCondition(cls, bundle: org.osgi.framework.Bundle, conditionInfo: 'ConditionInfo') -> 'Condition': ...

class Condition(java.lang.Object):
    """
    Java class 'org.osgi.service.condpermadmin.Condition'
    
      Attributes:
        TRUE (org.osgi.service.condpermadmin.Condition): final static field
        FALSE (org.osgi.service.condpermadmin.Condition): final static field
    
    """
    TRUE: typing.ClassVar['Condition'] = ...
    FALSE: typing.ClassVar['Condition'] = ...
    def isMutable(self) -> bool: ...
    def isPostponed(self) -> bool: ...
    @typing.overload
    def isSatisfied(self) -> bool: ...
    @typing.overload
    def isSatisfied(self, conditionArray: typing.List['Condition'], dictionary: java.util.Dictionary[typing.Any, typing.Any]) -> bool: ...

class ConditionInfo(java.lang.Object):
    """
    Java class 'org.osgi.service.condpermadmin.ConditionInfo'
    
        Extends:
            java.lang.Object
    
      Constructors:
        * ConditionInfo(java.lang.String, java.lang.String[])
        * ConditionInfo(java.lang.String)
    
    """
    @typing.overload
    def __init__(self, string: java.lang.String): ...
    @typing.overload
    def __init__(self, string: java.lang.String, stringArray: typing.List[java.lang.String]): ...
    def equals(self, object: typing.Any) -> bool: ...
    def getArgs(self) -> typing.List[java.lang.String]: ...
    def getEncoded(self) -> java.lang.String: ...
    def getType(self) -> java.lang.String: ...
    def hashCode(self) -> int: ...
    def toString(self) -> java.lang.String: ...

class ConditionalPermissionAdmin(java.lang.Object):
    """
    Java class 'org.osgi.service.condpermadmin.ConditionalPermissionAdmin'
    
    """
    def addConditionalPermissionInfo(self, conditionInfoArray: typing.List[ConditionInfo], permissionInfoArray: typing.List[org.osgi.service.permissionadmin.PermissionInfo]) -> 'ConditionalPermissionInfo': ...
    def getAccessControlContext(self, stringArray: typing.List[java.lang.String]) -> java.security.AccessControlContext: ...
    def getConditionalPermissionInfo(self, string: java.lang.String) -> 'ConditionalPermissionInfo': ...
    def getConditionalPermissionInfos(self) -> java.util.Enumeration['ConditionalPermissionInfo']: ...
    @typing.overload
    def newConditionalPermissionInfo(self, string: java.lang.String) -> 'ConditionalPermissionInfo': ...
    @typing.overload
    def newConditionalPermissionInfo(self, string: java.lang.String, conditionInfoArray: typing.List[ConditionInfo], permissionInfoArray: typing.List[org.osgi.service.permissionadmin.PermissionInfo], string2: java.lang.String) -> 'ConditionalPermissionInfo': ...
    def newConditionalPermissionUpdate(self) -> 'ConditionalPermissionUpdate': ...
    def setConditionalPermissionInfo(self, string: java.lang.String, conditionInfoArray: typing.List[ConditionInfo], permissionInfoArray: typing.List[org.osgi.service.permissionadmin.PermissionInfo]) -> 'ConditionalPermissionInfo': ...

class ConditionalPermissionInfo(java.lang.Object):
    """
    Java class 'org.osgi.service.condpermadmin.ConditionalPermissionInfo'
    
      Attributes:
        ALLOW (java.lang.String): final static field
        DENY (java.lang.String): final static field
    
    """
    ALLOW: typing.ClassVar[java.lang.String] = ...
    DENY: typing.ClassVar[java.lang.String] = ...
    def delete(self) -> None: ...
    def equals(self, object: typing.Any) -> bool: ...
    def getAccessDecision(self) -> java.lang.String: ...
    def getConditionInfos(self) -> typing.List[ConditionInfo]: ...
    def getEncoded(self) -> java.lang.String: ...
    def getName(self) -> java.lang.String: ...
    def getPermissionInfos(self) -> typing.List[org.osgi.service.permissionadmin.PermissionInfo]: ...
    def hashCode(self) -> int: ...
    def toString(self) -> java.lang.String: ...

class ConditionalPermissionUpdate(java.lang.Object):
    """
    Java class 'org.osgi.service.condpermadmin.ConditionalPermissionUpdate'
    
    """
    def commit(self) -> bool: ...
    def getConditionalPermissionInfos(self) -> java.util.List[ConditionalPermissionInfo]: ...
