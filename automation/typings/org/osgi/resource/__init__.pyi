import java.lang
import java.util
import typing


class Capability(java.lang.Object):
    """
    Java class 'org.osgi.resource.Capability'
    
    """
    def equals(self, object: typing.Any) -> bool: ...
    def getAttributes(self) -> java.util.Map[java.lang.String, typing.Any]: ...
    def getDirectives(self) -> java.util.Map[java.lang.String, java.lang.String]: ...
    def getNamespace(self) -> java.lang.String: ...
    def getResource(self) -> 'Resource': ...
    def hashCode(self) -> int: ...

class Namespace(java.lang.Object):
    """
    Java class 'org.osgi.resource.Namespace'
    
        Extends:
            java.lang.Object
    
      Attributes:
        CAPABILITY_USES_DIRECTIVE (java.lang.String): final static field
        CAPABILITY_EFFECTIVE_DIRECTIVE (java.lang.String): final static field
        REQUIREMENT_FILTER_DIRECTIVE (java.lang.String): final static field
        REQUIREMENT_RESOLUTION_DIRECTIVE (java.lang.String): final static field
        RESOLUTION_MANDATORY (java.lang.String): final static field
        RESOLUTION_OPTIONAL (java.lang.String): final static field
        REQUIREMENT_EFFECTIVE_DIRECTIVE (java.lang.String): final static field
        EFFECTIVE_RESOLVE (java.lang.String): final static field
        EFFECTIVE_ACTIVE (java.lang.String): final static field
        REQUIREMENT_CARDINALITY_DIRECTIVE (java.lang.String): final static field
        CARDINALITY_MULTIPLE (java.lang.String): final static field
        CARDINALITY_SINGLE (java.lang.String): final static field
    
    """
    CAPABILITY_USES_DIRECTIVE: typing.ClassVar[java.lang.String] = ...
    CAPABILITY_EFFECTIVE_DIRECTIVE: typing.ClassVar[java.lang.String] = ...
    REQUIREMENT_FILTER_DIRECTIVE: typing.ClassVar[java.lang.String] = ...
    REQUIREMENT_RESOLUTION_DIRECTIVE: typing.ClassVar[java.lang.String] = ...
    RESOLUTION_MANDATORY: typing.ClassVar[java.lang.String] = ...
    RESOLUTION_OPTIONAL: typing.ClassVar[java.lang.String] = ...
    REQUIREMENT_EFFECTIVE_DIRECTIVE: typing.ClassVar[java.lang.String] = ...
    EFFECTIVE_RESOLVE: typing.ClassVar[java.lang.String] = ...
    EFFECTIVE_ACTIVE: typing.ClassVar[java.lang.String] = ...
    REQUIREMENT_CARDINALITY_DIRECTIVE: typing.ClassVar[java.lang.String] = ...
    CARDINALITY_MULTIPLE: typing.ClassVar[java.lang.String] = ...
    CARDINALITY_SINGLE: typing.ClassVar[java.lang.String] = ...

class Requirement(java.lang.Object):
    """
    Java class 'org.osgi.resource.Requirement'
    
    """
    def equals(self, object: typing.Any) -> bool: ...
    def getAttributes(self) -> java.util.Map[java.lang.String, typing.Any]: ...
    def getDirectives(self) -> java.util.Map[java.lang.String, java.lang.String]: ...
    def getNamespace(self) -> java.lang.String: ...
    def getResource(self) -> 'Resource': ...
    def hashCode(self) -> int: ...

class Resource(java.lang.Object):
    """
    Java class 'org.osgi.resource.Resource'
    
    """
    def equals(self, object: typing.Any) -> bool: ...
    def getCapabilities(self, string: java.lang.String) -> java.util.List[Capability]: ...
    def getRequirements(self, string: java.lang.String) -> java.util.List[Requirement]: ...
    def hashCode(self) -> int: ...

class Wire(java.lang.Object):
    """
    Java class 'org.osgi.resource.Wire'
    
    """
    def equals(self, object: typing.Any) -> bool: ...
    def getCapability(self) -> Capability: ...
    def getProvider(self) -> Resource: ...
    def getRequirement(self) -> Requirement: ...
    def getRequirer(self) -> Resource: ...
    def hashCode(self) -> int: ...

class Wiring(java.lang.Object):
    """
    Java class 'org.osgi.resource.Wiring'
    
    """
    def getProvidedResourceWires(self, string: java.lang.String) -> java.util.List[Wire]: ...
    def getRequiredResourceWires(self, string: java.lang.String) -> java.util.List[Wire]: ...
    def getResource(self) -> Resource: ...
    def getResourceCapabilities(self, string: java.lang.String) -> java.util.List[Capability]: ...
    def getResourceRequirements(self, string: java.lang.String) -> java.util.List[Requirement]: ...
