import java.io
import java.lang
import java.net
import java.util
import org.osgi.framework
import typing


class Framework(org.osgi.framework.Bundle):
    """
    Java class 'org.osgi.framework.launch.Framework'
    
        Interfaces:
            org.osgi.framework.Bundle
    
    """
    _adapt__A = typing.TypeVar('_adapt__A')  # <A>
    def adapt(self, class_: typing.Type[_adapt__A]) -> _adapt__A: ...
    def findEntries(self, string: java.lang.String, string2: java.lang.String, boolean: bool) -> java.util.Enumeration[java.net.URL]: ...
    def getBundleId(self) -> int: ...
    def getEntry(self, string: java.lang.String) -> java.net.URL: ...
    def getEntryPaths(self, string: java.lang.String) -> java.util.Enumeration[java.lang.String]: ...
    def getLastModified(self) -> int: ...
    def getLocation(self) -> java.lang.String: ...
    def getSymbolicName(self) -> java.lang.String: ...
    @typing.overload
    def init(self) -> None: ...
    @typing.overload
    def init(self, frameworkListenerArray: typing.List[org.osgi.framework.FrameworkListener]) -> None: ...
    @typing.overload
    def start(self) -> None: ...
    @typing.overload
    def start(self, int: int) -> None: ...
    @typing.overload
    def stop(self) -> None: ...
    @typing.overload
    def stop(self, int: int) -> None: ...
    def uninstall(self) -> None: ...
    @typing.overload
    def update(self) -> None: ...
    @typing.overload
    def update(self, inputStream: java.io.InputStream) -> None: ...
    def waitForStop(self, long: int) -> org.osgi.framework.FrameworkEvent: ...

class FrameworkFactory(java.lang.Object):
    """
    Java class 'org.osgi.framework.launch.FrameworkFactory'
    
    """
    def newFramework(self, map: typing.Union[java.util.Map[java.lang.String, java.lang.String], typing.Mapping[java.lang.String, java.lang.String]]) -> Framework: ...
