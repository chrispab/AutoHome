import java.io
import java.lang
import java.net
import java.security
import java.security.cert
import java.util
import org
import typing


class AdaptPermission(java.security.BasicPermission):
    """
    Java class 'org.osgi.framework.AdaptPermission'
    
        Extends:
            java.security.BasicPermission
    
      Constructors:
        * AdaptPermission(java.lang.String, org.osgi.framework.Bundle, java.lang.String)
        * AdaptPermission(java.lang.String, java.lang.String)
    
      Attributes:
        ADAPT (java.lang.String): final static field
    
    """
    ADAPT: typing.ClassVar[java.lang.String] = ...
    @typing.overload
    def __init__(self, string: java.lang.String, string2: java.lang.String): ...
    @typing.overload
    def __init__(self, string: java.lang.String, bundle: 'Bundle', string2: java.lang.String): ...
    def equals(self, object: typing.Any) -> bool: ...
    def getActions(self) -> java.lang.String: ...
    def hashCode(self) -> int: ...
    def implies(self, permission: java.security.Permission) -> bool: ...
    def newPermissionCollection(self) -> java.security.PermissionCollection: ...

class AdminPermission(java.security.BasicPermission):
    """
    Java class 'org.osgi.framework.AdminPermission'
    
        Extends:
            java.security.BasicPermission
    
      Constructors:
        * AdminPermission(org.osgi.framework.Bundle, java.lang.String)
        * AdminPermission(java.lang.String, java.lang.String)
        * AdminPermission()
    
      Attributes:
        CLASS (java.lang.String): final static field
        EXECUTE (java.lang.String): final static field
        EXTENSIONLIFECYCLE (java.lang.String): final static field
        LIFECYCLE (java.lang.String): final static field
        LISTENER (java.lang.String): final static field
        METADATA (java.lang.String): final static field
        RESOLVE (java.lang.String): final static field
        RESOURCE (java.lang.String): final static field
        STARTLEVEL (java.lang.String): final static field
        CONTEXT (java.lang.String): final static field
        WEAVE (java.lang.String): final static field
    
    """
    CLASS: typing.ClassVar[java.lang.String] = ...
    EXECUTE: typing.ClassVar[java.lang.String] = ...
    EXTENSIONLIFECYCLE: typing.ClassVar[java.lang.String] = ...
    LIFECYCLE: typing.ClassVar[java.lang.String] = ...
    LISTENER: typing.ClassVar[java.lang.String] = ...
    METADATA: typing.ClassVar[java.lang.String] = ...
    RESOLVE: typing.ClassVar[java.lang.String] = ...
    RESOURCE: typing.ClassVar[java.lang.String] = ...
    STARTLEVEL: typing.ClassVar[java.lang.String] = ...
    CONTEXT: typing.ClassVar[java.lang.String] = ...
    WEAVE: typing.ClassVar[java.lang.String] = ...
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, string: java.lang.String, string2: java.lang.String): ...
    @typing.overload
    def __init__(self, bundle: 'Bundle', string: java.lang.String): ...
    def equals(self, object: typing.Any) -> bool: ...
    def getActions(self) -> java.lang.String: ...
    def hashCode(self) -> int: ...
    def implies(self, permission: java.security.Permission) -> bool: ...
    def newPermissionCollection(self) -> java.security.PermissionCollection: ...

class Bundle(java.lang.Comparable[org.osgi.framework.Bundle]):
    """
    Java class 'org.osgi.framework.Bundle'
    
        Interfaces:
            java.lang.Comparable
    
      Attributes:
        UNINSTALLED (int): final static field
        INSTALLED (int): final static field
        RESOLVED (int): final static field
        STARTING (int): final static field
        STOPPING (int): final static field
        ACTIVE (int): final static field
        START_TRANSIENT (int): final static field
        START_ACTIVATION_POLICY (int): final static field
        STOP_TRANSIENT (int): final static field
        SIGNERS_ALL (int): final static field
        SIGNERS_TRUSTED (int): final static field
    
    """
    UNINSTALLED: typing.ClassVar[int] = ...
    INSTALLED: typing.ClassVar[int] = ...
    RESOLVED: typing.ClassVar[int] = ...
    STARTING: typing.ClassVar[int] = ...
    STOPPING: typing.ClassVar[int] = ...
    ACTIVE: typing.ClassVar[int] = ...
    START_TRANSIENT: typing.ClassVar[int] = ...
    START_ACTIVATION_POLICY: typing.ClassVar[int] = ...
    STOP_TRANSIENT: typing.ClassVar[int] = ...
    SIGNERS_ALL: typing.ClassVar[int] = ...
    SIGNERS_TRUSTED: typing.ClassVar[int] = ...
    _adapt__A = typing.TypeVar('_adapt__A')  # <A>
    def adapt(self, class_: typing.Type[_adapt__A]) -> _adapt__A: ...
    def findEntries(self, string: java.lang.String, string2: java.lang.String, boolean: bool) -> java.util.Enumeration[java.net.URL]: ...
    def getBundleContext(self) -> 'BundleContext': ...
    def getBundleId(self) -> int: ...
    def getDataFile(self, string: java.lang.String) -> java.io.File: ...
    def getEntry(self, string: java.lang.String) -> java.net.URL: ...
    def getEntryPaths(self, string: java.lang.String) -> java.util.Enumeration[java.lang.String]: ...
    @typing.overload
    def getHeaders(self) -> java.util.Dictionary[java.lang.String, java.lang.String]: ...
    @typing.overload
    def getHeaders(self, string: java.lang.String) -> java.util.Dictionary[java.lang.String, java.lang.String]: ...
    def getLastModified(self) -> int: ...
    def getLocation(self) -> java.lang.String: ...
    def getRegisteredServices(self) -> typing.List['ServiceReference'[typing.Any]]: ...
    def getResource(self, string: java.lang.String) -> java.net.URL: ...
    def getResources(self, string: java.lang.String) -> java.util.Enumeration[java.net.URL]: ...
    def getServicesInUse(self) -> typing.List['ServiceReference'[typing.Any]]: ...
    def getSignerCertificates(self, int: int) -> java.util.Map[java.security.cert.X509Certificate, java.util.List[java.security.cert.X509Certificate]]: ...
    def getState(self) -> int: ...
    def getSymbolicName(self) -> java.lang.String: ...
    def getVersion(self) -> 'Version': ...
    def hasPermission(self, object: typing.Any) -> bool: ...
    def loadClass(self, string: java.lang.String) -> typing.Type[typing.Any]: ...
    @typing.overload
    def start(self) -> None: ...
    @typing.overload
    def start(self, int: int) -> None: ...
    @typing.overload
    def stop(self) -> None: ...
    @typing.overload
    def stop(self, int: int) -> None: ...
    def uninstall(self) -> None: ...
    @typing.overload
    def update(self) -> None: ...
    @typing.overload
    def update(self, inputStream: java.io.InputStream) -> None: ...

class BundleActivator(java.lang.Object):
    """
    Java class 'org.osgi.framework.BundleActivator'
    
    """
    def start(self, bundleContext: 'BundleContext') -> None: ...
    def stop(self, bundleContext: 'BundleContext') -> None: ...

class BundleEvent(java.util.EventObject):
    """
    Java class 'org.osgi.framework.BundleEvent'
    
        Extends:
            java.util.EventObject
    
      Constructors:
        * BundleEvent(int, org.osgi.framework.Bundle, org.osgi.framework.Bundle)
        * BundleEvent(int, org.osgi.framework.Bundle)
    
      Attributes:
        INSTALLED (int): final static field
        STARTED (int): final static field
        STOPPED (int): final static field
        UPDATED (int): final static field
        UNINSTALLED (int): final static field
        RESOLVED (int): final static field
        UNRESOLVED (int): final static field
        STARTING (int): final static field
        STOPPING (int): final static field
        LAZY_ACTIVATION (int): final static field
    
    """
    INSTALLED: typing.ClassVar[int] = ...
    STARTED: typing.ClassVar[int] = ...
    STOPPED: typing.ClassVar[int] = ...
    UPDATED: typing.ClassVar[int] = ...
    UNINSTALLED: typing.ClassVar[int] = ...
    RESOLVED: typing.ClassVar[int] = ...
    UNRESOLVED: typing.ClassVar[int] = ...
    STARTING: typing.ClassVar[int] = ...
    STOPPING: typing.ClassVar[int] = ...
    LAZY_ACTIVATION: typing.ClassVar[int] = ...
    @typing.overload
    def __init__(self, int: int, bundle: Bundle): ...
    @typing.overload
    def __init__(self, int: int, bundle: Bundle, bundle2: Bundle): ...
    def getBundle(self) -> Bundle: ...
    def getOrigin(self) -> Bundle: ...
    def getType(self) -> int: ...

class BundleException(java.lang.Exception):
    """
    Java class 'org.osgi.framework.BundleException'
    
        Extends:
            java.lang.Exception
    
      Constructors:
        * BundleException(java.lang.String, int)
        * BundleException(java.lang.String, int, java.lang.Throwable)
        * BundleException(java.lang.String)
        * BundleException(java.lang.String, java.lang.Throwable)
    
      Attributes:
        UNSPECIFIED (int): final static field
        UNSUPPORTED_OPERATION (int): final static field
        INVALID_OPERATION (int): final static field
        MANIFEST_ERROR (int): final static field
        RESOLVE_ERROR (int): final static field
        ACTIVATOR_ERROR (int): final static field
        SECURITY_ERROR (int): final static field
        STATECHANGE_ERROR (int): final static field
        NATIVECODE_ERROR (int): final static field
        DUPLICATE_BUNDLE_ERROR (int): final static field
        START_TRANSIENT_ERROR (int): final static field
        READ_ERROR (int): final static field
        REJECTED_BY_HOOK (int): final static field
    
    """
    UNSPECIFIED: typing.ClassVar[int] = ...
    UNSUPPORTED_OPERATION: typing.ClassVar[int] = ...
    INVALID_OPERATION: typing.ClassVar[int] = ...
    MANIFEST_ERROR: typing.ClassVar[int] = ...
    RESOLVE_ERROR: typing.ClassVar[int] = ...
    ACTIVATOR_ERROR: typing.ClassVar[int] = ...
    SECURITY_ERROR: typing.ClassVar[int] = ...
    STATECHANGE_ERROR: typing.ClassVar[int] = ...
    NATIVECODE_ERROR: typing.ClassVar[int] = ...
    DUPLICATE_BUNDLE_ERROR: typing.ClassVar[int] = ...
    START_TRANSIENT_ERROR: typing.ClassVar[int] = ...
    READ_ERROR: typing.ClassVar[int] = ...
    REJECTED_BY_HOOK: typing.ClassVar[int] = ...
    @typing.overload
    def __init__(self, string: java.lang.String): ...
    @typing.overload
    def __init__(self, string: java.lang.String, int: int): ...
    @typing.overload
    def __init__(self, string: java.lang.String, int: int, throwable: java.lang.Throwable): ...
    @typing.overload
    def __init__(self, string: java.lang.String, throwable: java.lang.Throwable): ...
    def getCause(self) -> java.lang.Throwable: ...
    def getNestedException(self) -> java.lang.Throwable: ...
    def getType(self) -> int: ...
    def initCause(self, throwable: java.lang.Throwable) -> java.lang.Throwable: ...

class BundleListener(java.util.EventListener):
    """
    Java class 'org.osgi.framework.BundleListener'
    
        Interfaces:
            java.util.EventListener
    
    """
    def bundleChanged(self, bundleEvent: BundleEvent) -> None: ...

class BundlePermission(java.security.BasicPermission):
    """
    Java class 'org.osgi.framework.BundlePermission'
    
        Extends:
            java.security.BasicPermission
    
      Constructors:
        * BundlePermission(java.lang.String, java.lang.String)
    
      Attributes:
        PROVIDE (java.lang.String): final static field
        REQUIRE (java.lang.String): final static field
        HOST (java.lang.String): final static field
        FRAGMENT (java.lang.String): final static field
    
    """
    PROVIDE: typing.ClassVar[java.lang.String] = ...
    REQUIRE: typing.ClassVar[java.lang.String] = ...
    HOST: typing.ClassVar[java.lang.String] = ...
    FRAGMENT: typing.ClassVar[java.lang.String] = ...
    def __init__(self, string: java.lang.String, string2: java.lang.String): ...
    def equals(self, object: typing.Any) -> bool: ...
    def getActions(self) -> java.lang.String: ...
    def hashCode(self) -> int: ...
    def implies(self, permission: java.security.Permission) -> bool: ...
    def newPermissionCollection(self) -> java.security.PermissionCollection: ...

class BundleReference(java.lang.Object):
    """
    Java class 'org.osgi.framework.BundleReference'
    
    """
    def getBundle(self) -> Bundle: ...

class CapabilityPermission(java.security.BasicPermission):
    """
    Java class 'org.osgi.framework.CapabilityPermission'
    
        Extends:
            java.security.BasicPermission
    
      Constructors:
        * CapabilityPermission(java.lang.String, java.util.Map, org.osgi.framework.Bundle, java.lang.String)
        * CapabilityPermission(java.lang.String, java.lang.String)
    
      Attributes:
        REQUIRE (java.lang.String): final static field
        PROVIDE (java.lang.String): final static field
    
    """
    REQUIRE: typing.ClassVar[java.lang.String] = ...
    PROVIDE: typing.ClassVar[java.lang.String] = ...
    @typing.overload
    def __init__(self, string: java.lang.String, string2: java.lang.String): ...
    @typing.overload
    def __init__(self, string: java.lang.String, map: typing.Union[java.util.Map[java.lang.String, typing.Any], typing.Mapping[java.lang.String, typing.Any]], bundle: Bundle, string2: java.lang.String): ...
    def equals(self, object: typing.Any) -> bool: ...
    def getActions(self) -> java.lang.String: ...
    def hashCode(self) -> int: ...
    def implies(self, permission: java.security.Permission) -> bool: ...
    def newPermissionCollection(self) -> java.security.PermissionCollection: ...

class Configurable(java.lang.Object):
    """
    Java class 'org.osgi.framework.Configurable'
    
    """
    def getConfigurationObject(self) -> typing.Any: ...

class Constants(java.lang.Object):
    """
    Java class 'org.osgi.framework.Constants'
    
      Attributes:
        SYSTEM_BUNDLE_LOCATION (java.lang.String): final static field
        SYSTEM_BUNDLE_SYMBOLICNAME (java.lang.String): final static field
        SYSTEM_BUNDLE_ID (long): final static field
        BUNDLE_CATEGORY (java.lang.String): final static field
        BUNDLE_CLASSPATH (java.lang.String): final static field
        BUNDLE_COPYRIGHT (java.lang.String): final static field
        BUNDLE_DESCRIPTION (java.lang.String): final static field
        BUNDLE_NAME (java.lang.String): final static field
        BUNDLE_NATIVECODE (java.lang.String): final static field
        EXPORT_PACKAGE (java.lang.String): final static field
        EXPORT_SERVICE (java.lang.String): final static field
        IMPORT_PACKAGE (java.lang.String): final static field
        DYNAMICIMPORT_PACKAGE (java.lang.String): final static field
        IMPORT_SERVICE (java.lang.String): final static field
        BUNDLE_VENDOR (java.lang.String): final static field
        BUNDLE_VERSION (java.lang.String): final static field
        BUNDLE_DOCURL (java.lang.String): final static field
        BUNDLE_CONTACTADDRESS (java.lang.String): final static field
        BUNDLE_ACTIVATOR (java.lang.String): final static field
        EXTENSION_BUNDLE_ACTIVATOR (java.lang.String): final static field
        BUNDLE_UPDATELOCATION (java.lang.String): final static field
        PACKAGE_SPECIFICATION_VERSION (java.lang.String): final static field
        BUNDLE_NATIVECODE_PROCESSOR (java.lang.String): final static field
        BUNDLE_NATIVECODE_OSNAME (java.lang.String): final static field
        BUNDLE_NATIVECODE_OSVERSION (java.lang.String): final static field
        BUNDLE_NATIVECODE_LANGUAGE (java.lang.String): final static field
        BUNDLE_REQUIREDEXECUTIONENVIRONMENT (java.lang.String): final static field
        BUNDLE_SYMBOLICNAME (java.lang.String): final static field
        SINGLETON_DIRECTIVE (java.lang.String): final static field
        FRAGMENT_ATTACHMENT_DIRECTIVE (java.lang.String): final static field
        FRAGMENT_ATTACHMENT_ALWAYS (java.lang.String): final static field
        FRAGMENT_ATTACHMENT_RESOLVETIME (java.lang.String): final static field
        FRAGMENT_ATTACHMENT_NEVER (java.lang.String): final static field
        BUNDLE_LOCALIZATION (java.lang.String): final static field
        BUNDLE_LOCALIZATION_DEFAULT_BASENAME (java.lang.String): final static field
        REQUIRE_BUNDLE (java.lang.String): final static field
        BUNDLE_VERSION_ATTRIBUTE (java.lang.String): final static field
        FRAGMENT_HOST (java.lang.String): final static field
        SELECTION_FILTER_ATTRIBUTE (java.lang.String): final static field
        BUNDLE_MANIFESTVERSION (java.lang.String): final static field
        VERSION_ATTRIBUTE (java.lang.String): final static field
        BUNDLE_SYMBOLICNAME_ATTRIBUTE (java.lang.String): final static field
        RESOLUTION_DIRECTIVE (java.lang.String): final static field
        RESOLUTION_MANDATORY (java.lang.String): final static field
        RESOLUTION_OPTIONAL (java.lang.String): final static field
        USES_DIRECTIVE (java.lang.String): final static field
        INCLUDE_DIRECTIVE (java.lang.String): final static field
        EXCLUDE_DIRECTIVE (java.lang.String): final static field
        MANDATORY_DIRECTIVE (java.lang.String): final static field
        VISIBILITY_DIRECTIVE (java.lang.String): final static field
        VISIBILITY_PRIVATE (java.lang.String): final static field
        VISIBILITY_REEXPORT (java.lang.String): final static field
        EXTENSION_DIRECTIVE (java.lang.String): final static field
        EXTENSION_FRAMEWORK (java.lang.String): final static field
        EXTENSION_BOOTCLASSPATH (java.lang.String): final static field
        BUNDLE_ACTIVATIONPOLICY (java.lang.String): final static field
        ACTIVATION_LAZY (java.lang.String): final static field
        FRAMEWORK_VERSION (java.lang.String): final static field
        FRAMEWORK_VENDOR (java.lang.String): final static field
        FRAMEWORK_LANGUAGE (java.lang.String): final static field
        FRAMEWORK_OS_NAME (java.lang.String): final static field
        FRAMEWORK_OS_VERSION (java.lang.String): final static field
        FRAMEWORK_PROCESSOR (java.lang.String): final static field
        FRAMEWORK_EXECUTIONENVIRONMENT (java.lang.String): final static field
        FRAMEWORK_BOOTDELEGATION (java.lang.String): final static field
        FRAMEWORK_SYSTEMPACKAGES (java.lang.String): final static field
        FRAMEWORK_SYSTEMPACKAGES_EXTRA (java.lang.String): final static field
        SUPPORTS_FRAMEWORK_EXTENSION (java.lang.String): final static field
        SUPPORTS_BOOTCLASSPATH_EXTENSION (java.lang.String): final static field
        SUPPORTS_FRAMEWORK_FRAGMENT (java.lang.String): final static field
        SUPPORTS_FRAMEWORK_REQUIREBUNDLE (java.lang.String): final static field
        FRAMEWORK_SECURITY (java.lang.String): final static field
        FRAMEWORK_SECURITY_OSGI (java.lang.String): final static field
        FRAMEWORK_STORAGE (java.lang.String): final static field
        FRAMEWORK_STORAGE_CLEAN (java.lang.String): final static field
        FRAMEWORK_STORAGE_CLEAN_ONFIRSTINIT (java.lang.String): final static field
        FRAMEWORK_LIBRARY_EXTENSIONS (java.lang.String): final static field
        FRAMEWORK_EXECPERMISSION (java.lang.String): final static field
        FRAMEWORK_COMMAND_ABSPATH (java.lang.String): final static field
        FRAMEWORK_TRUST_REPOSITORIES (java.lang.String): final static field
        FRAMEWORK_WINDOWSYSTEM (java.lang.String): final static field
        FRAMEWORK_BEGINNING_STARTLEVEL (java.lang.String): final static field
        FRAMEWORK_BUNDLE_PARENT (java.lang.String): final static field
        FRAMEWORK_BUNDLE_PARENT_BOOT (java.lang.String): final static field
        FRAMEWORK_BUNDLE_PARENT_EXT (java.lang.String): final static field
        FRAMEWORK_BUNDLE_PARENT_APP (java.lang.String): final static field
        FRAMEWORK_BUNDLE_PARENT_FRAMEWORK (java.lang.String): final static field
        OBJECTCLASS (java.lang.String): final static field
        SERVICE_ID (java.lang.String): final static field
        SERVICE_PID (java.lang.String): final static field
        SERVICE_RANKING (java.lang.String): final static field
        SERVICE_VENDOR (java.lang.String): final static field
        SERVICE_DESCRIPTION (java.lang.String): final static field
        SERVICE_BUNDLEID (java.lang.String): final static field
        SERVICE_SCOPE (java.lang.String): final static field
        SCOPE_SINGLETON (java.lang.String): final static field
        SCOPE_BUNDLE (java.lang.String): final static field
        SCOPE_PROTOTYPE (java.lang.String): final static field
        FRAMEWORK_UUID (java.lang.String): final static field
        REMOTE_CONFIGS_SUPPORTED (java.lang.String): final static field
        REMOTE_INTENTS_SUPPORTED (java.lang.String): final static field
        SERVICE_EXPORTED_CONFIGS (java.lang.String): final static field
        SERVICE_EXPORTED_INTENTS (java.lang.String): final static field
        SERVICE_EXPORTED_INTENTS_EXTRA (java.lang.String): final static field
        SERVICE_EXPORTED_INTERFACES (java.lang.String): final static field
        SERVICE_IMPORTED (java.lang.String): final static field
        SERVICE_IMPORTED_CONFIGS (java.lang.String): final static field
        SERVICE_INTENTS (java.lang.String): final static field
        PROVIDE_CAPABILITY (java.lang.String): final static field
        REQUIRE_CAPABILITY (java.lang.String): final static field
        EFFECTIVE_DIRECTIVE (java.lang.String): final static field
        EFFECTIVE_RESOLVE (java.lang.String): final static field
        EFFECTIVE_ACTIVE (java.lang.String): final static field
        FILTER_DIRECTIVE (java.lang.String): final static field
        FRAMEWORK_SYSTEMCAPABILITIES (java.lang.String): final static field
        FRAMEWORK_SYSTEMCAPABILITIES_EXTRA (java.lang.String): final static field
        FRAMEWORK_BSNVERSION (java.lang.String): final static field
        FRAMEWORK_BSNVERSION_MULTIPLE (java.lang.String): final static field
        FRAMEWORK_BSNVERSION_SINGLE (java.lang.String): final static field
        FRAMEWORK_BSNVERSION_MANAGED (java.lang.String): final static field
        BUNDLE_ICON (java.lang.String): final static field
        BUNDLE_LICENSE (java.lang.String): final static field
    
    """
    SYSTEM_BUNDLE_LOCATION: typing.ClassVar[java.lang.String] = ...
    SYSTEM_BUNDLE_SYMBOLICNAME: typing.ClassVar[java.lang.String] = ...
    SYSTEM_BUNDLE_ID: typing.ClassVar[int] = ...
    BUNDLE_CATEGORY: typing.ClassVar[java.lang.String] = ...
    BUNDLE_CLASSPATH: typing.ClassVar[java.lang.String] = ...
    BUNDLE_COPYRIGHT: typing.ClassVar[java.lang.String] = ...
    BUNDLE_DESCRIPTION: typing.ClassVar[java.lang.String] = ...
    BUNDLE_NAME: typing.ClassVar[java.lang.String] = ...
    BUNDLE_NATIVECODE: typing.ClassVar[java.lang.String] = ...
    EXPORT_PACKAGE: typing.ClassVar[java.lang.String] = ...
    EXPORT_SERVICE: typing.ClassVar[java.lang.String] = ...
    IMPORT_PACKAGE: typing.ClassVar[java.lang.String] = ...
    DYNAMICIMPORT_PACKAGE: typing.ClassVar[java.lang.String] = ...
    IMPORT_SERVICE: typing.ClassVar[java.lang.String] = ...
    BUNDLE_VENDOR: typing.ClassVar[java.lang.String] = ...
    BUNDLE_VERSION: typing.ClassVar[java.lang.String] = ...
    BUNDLE_DOCURL: typing.ClassVar[java.lang.String] = ...
    BUNDLE_CONTACTADDRESS: typing.ClassVar[java.lang.String] = ...
    BUNDLE_ACTIVATOR: typing.ClassVar[java.lang.String] = ...
    EXTENSION_BUNDLE_ACTIVATOR: typing.ClassVar[java.lang.String] = ...
    BUNDLE_UPDATELOCATION: typing.ClassVar[java.lang.String] = ...
    PACKAGE_SPECIFICATION_VERSION: typing.ClassVar[java.lang.String] = ...
    BUNDLE_NATIVECODE_PROCESSOR: typing.ClassVar[java.lang.String] = ...
    BUNDLE_NATIVECODE_OSNAME: typing.ClassVar[java.lang.String] = ...
    BUNDLE_NATIVECODE_OSVERSION: typing.ClassVar[java.lang.String] = ...
    BUNDLE_NATIVECODE_LANGUAGE: typing.ClassVar[java.lang.String] = ...
    BUNDLE_REQUIREDEXECUTIONENVIRONMENT: typing.ClassVar[java.lang.String] = ...
    BUNDLE_SYMBOLICNAME: typing.ClassVar[java.lang.String] = ...
    SINGLETON_DIRECTIVE: typing.ClassVar[java.lang.String] = ...
    FRAGMENT_ATTACHMENT_DIRECTIVE: typing.ClassVar[java.lang.String] = ...
    FRAGMENT_ATTACHMENT_ALWAYS: typing.ClassVar[java.lang.String] = ...
    FRAGMENT_ATTACHMENT_RESOLVETIME: typing.ClassVar[java.lang.String] = ...
    FRAGMENT_ATTACHMENT_NEVER: typing.ClassVar[java.lang.String] = ...
    BUNDLE_LOCALIZATION: typing.ClassVar[java.lang.String] = ...
    BUNDLE_LOCALIZATION_DEFAULT_BASENAME: typing.ClassVar[java.lang.String] = ...
    REQUIRE_BUNDLE: typing.ClassVar[java.lang.String] = ...
    BUNDLE_VERSION_ATTRIBUTE: typing.ClassVar[java.lang.String] = ...
    FRAGMENT_HOST: typing.ClassVar[java.lang.String] = ...
    SELECTION_FILTER_ATTRIBUTE: typing.ClassVar[java.lang.String] = ...
    BUNDLE_MANIFESTVERSION: typing.ClassVar[java.lang.String] = ...
    VERSION_ATTRIBUTE: typing.ClassVar[java.lang.String] = ...
    BUNDLE_SYMBOLICNAME_ATTRIBUTE: typing.ClassVar[java.lang.String] = ...
    RESOLUTION_DIRECTIVE: typing.ClassVar[java.lang.String] = ...
    RESOLUTION_MANDATORY: typing.ClassVar[java.lang.String] = ...
    RESOLUTION_OPTIONAL: typing.ClassVar[java.lang.String] = ...
    USES_DIRECTIVE: typing.ClassVar[java.lang.String] = ...
    INCLUDE_DIRECTIVE: typing.ClassVar[java.lang.String] = ...
    EXCLUDE_DIRECTIVE: typing.ClassVar[java.lang.String] = ...
    MANDATORY_DIRECTIVE: typing.ClassVar[java.lang.String] = ...
    VISIBILITY_DIRECTIVE: typing.ClassVar[java.lang.String] = ...
    VISIBILITY_PRIVATE: typing.ClassVar[java.lang.String] = ...
    VISIBILITY_REEXPORT: typing.ClassVar[java.lang.String] = ...
    EXTENSION_DIRECTIVE: typing.ClassVar[java.lang.String] = ...
    EXTENSION_FRAMEWORK: typing.ClassVar[java.lang.String] = ...
    EXTENSION_BOOTCLASSPATH: typing.ClassVar[java.lang.String] = ...
    BUNDLE_ACTIVATIONPOLICY: typing.ClassVar[java.lang.String] = ...
    ACTIVATION_LAZY: typing.ClassVar[java.lang.String] = ...
    FRAMEWORK_VERSION: typing.ClassVar[java.lang.String] = ...
    FRAMEWORK_VENDOR: typing.ClassVar[java.lang.String] = ...
    FRAMEWORK_LANGUAGE: typing.ClassVar[java.lang.String] = ...
    FRAMEWORK_OS_NAME: typing.ClassVar[java.lang.String] = ...
    FRAMEWORK_OS_VERSION: typing.ClassVar[java.lang.String] = ...
    FRAMEWORK_PROCESSOR: typing.ClassVar[java.lang.String] = ...
    FRAMEWORK_EXECUTIONENVIRONMENT: typing.ClassVar[java.lang.String] = ...
    FRAMEWORK_BOOTDELEGATION: typing.ClassVar[java.lang.String] = ...
    FRAMEWORK_SYSTEMPACKAGES: typing.ClassVar[java.lang.String] = ...
    FRAMEWORK_SYSTEMPACKAGES_EXTRA: typing.ClassVar[java.lang.String] = ...
    SUPPORTS_FRAMEWORK_EXTENSION: typing.ClassVar[java.lang.String] = ...
    SUPPORTS_BOOTCLASSPATH_EXTENSION: typing.ClassVar[java.lang.String] = ...
    SUPPORTS_FRAMEWORK_FRAGMENT: typing.ClassVar[java.lang.String] = ...
    SUPPORTS_FRAMEWORK_REQUIREBUNDLE: typing.ClassVar[java.lang.String] = ...
    FRAMEWORK_SECURITY: typing.ClassVar[java.lang.String] = ...
    FRAMEWORK_SECURITY_OSGI: typing.ClassVar[java.lang.String] = ...
    FRAMEWORK_STORAGE: typing.ClassVar[java.lang.String] = ...
    FRAMEWORK_STORAGE_CLEAN: typing.ClassVar[java.lang.String] = ...
    FRAMEWORK_STORAGE_CLEAN_ONFIRSTINIT: typing.ClassVar[java.lang.String] = ...
    FRAMEWORK_LIBRARY_EXTENSIONS: typing.ClassVar[java.lang.String] = ...
    FRAMEWORK_EXECPERMISSION: typing.ClassVar[java.lang.String] = ...
    FRAMEWORK_COMMAND_ABSPATH: typing.ClassVar[java.lang.String] = ...
    FRAMEWORK_TRUST_REPOSITORIES: typing.ClassVar[java.lang.String] = ...
    FRAMEWORK_WINDOWSYSTEM: typing.ClassVar[java.lang.String] = ...
    FRAMEWORK_BEGINNING_STARTLEVEL: typing.ClassVar[java.lang.String] = ...
    FRAMEWORK_BUNDLE_PARENT: typing.ClassVar[java.lang.String] = ...
    FRAMEWORK_BUNDLE_PARENT_BOOT: typing.ClassVar[java.lang.String] = ...
    FRAMEWORK_BUNDLE_PARENT_EXT: typing.ClassVar[java.lang.String] = ...
    FRAMEWORK_BUNDLE_PARENT_APP: typing.ClassVar[java.lang.String] = ...
    FRAMEWORK_BUNDLE_PARENT_FRAMEWORK: typing.ClassVar[java.lang.String] = ...
    OBJECTCLASS: typing.ClassVar[java.lang.String] = ...
    SERVICE_ID: typing.ClassVar[java.lang.String] = ...
    SERVICE_PID: typing.ClassVar[java.lang.String] = ...
    SERVICE_RANKING: typing.ClassVar[java.lang.String] = ...
    SERVICE_VENDOR: typing.ClassVar[java.lang.String] = ...
    SERVICE_DESCRIPTION: typing.ClassVar[java.lang.String] = ...
    SERVICE_BUNDLEID: typing.ClassVar[java.lang.String] = ...
    SERVICE_SCOPE: typing.ClassVar[java.lang.String] = ...
    SCOPE_SINGLETON: typing.ClassVar[java.lang.String] = ...
    SCOPE_BUNDLE: typing.ClassVar[java.lang.String] = ...
    SCOPE_PROTOTYPE: typing.ClassVar[java.lang.String] = ...
    FRAMEWORK_UUID: typing.ClassVar[java.lang.String] = ...
    REMOTE_CONFIGS_SUPPORTED: typing.ClassVar[java.lang.String] = ...
    REMOTE_INTENTS_SUPPORTED: typing.ClassVar[java.lang.String] = ...
    SERVICE_EXPORTED_CONFIGS: typing.ClassVar[java.lang.String] = ...
    SERVICE_EXPORTED_INTENTS: typing.ClassVar[java.lang.String] = ...
    SERVICE_EXPORTED_INTENTS_EXTRA: typing.ClassVar[java.lang.String] = ...
    SERVICE_EXPORTED_INTERFACES: typing.ClassVar[java.lang.String] = ...
    SERVICE_IMPORTED: typing.ClassVar[java.lang.String] = ...
    SERVICE_IMPORTED_CONFIGS: typing.ClassVar[java.lang.String] = ...
    SERVICE_INTENTS: typing.ClassVar[java.lang.String] = ...
    PROVIDE_CAPABILITY: typing.ClassVar[java.lang.String] = ...
    REQUIRE_CAPABILITY: typing.ClassVar[java.lang.String] = ...
    EFFECTIVE_DIRECTIVE: typing.ClassVar[java.lang.String] = ...
    EFFECTIVE_RESOLVE: typing.ClassVar[java.lang.String] = ...
    EFFECTIVE_ACTIVE: typing.ClassVar[java.lang.String] = ...
    FILTER_DIRECTIVE: typing.ClassVar[java.lang.String] = ...
    FRAMEWORK_SYSTEMCAPABILITIES: typing.ClassVar[java.lang.String] = ...
    FRAMEWORK_SYSTEMCAPABILITIES_EXTRA: typing.ClassVar[java.lang.String] = ...
    FRAMEWORK_BSNVERSION: typing.ClassVar[java.lang.String] = ...
    FRAMEWORK_BSNVERSION_MULTIPLE: typing.ClassVar[java.lang.String] = ...
    FRAMEWORK_BSNVERSION_SINGLE: typing.ClassVar[java.lang.String] = ...
    FRAMEWORK_BSNVERSION_MANAGED: typing.ClassVar[java.lang.String] = ...
    BUNDLE_ICON: typing.ClassVar[java.lang.String] = ...
    BUNDLE_LICENSE: typing.ClassVar[java.lang.String] = ...

class Filter(java.lang.Object):
    """
    Java class 'org.osgi.framework.Filter'
    
    """
    def equals(self, object: typing.Any) -> bool: ...
    def hashCode(self) -> int: ...
    @typing.overload
    def match(self, dictionary: java.util.Dictionary[java.lang.String, typing.Any]) -> bool: ...
    @typing.overload
    def match(self, serviceReference: 'ServiceReference'[typing.Any]) -> bool: ...
    def matchCase(self, dictionary: java.util.Dictionary[java.lang.String, typing.Any]) -> bool: ...
    def matches(self, map: typing.Union[java.util.Map[java.lang.String, typing.Any], typing.Mapping[java.lang.String, typing.Any]]) -> bool: ...
    def toString(self) -> java.lang.String: ...

class FrameworkEvent(java.util.EventObject):
    """
    Java class 'org.osgi.framework.FrameworkEvent'
    
        Extends:
            java.util.EventObject
    
      Constructors:
        * FrameworkEvent(int, java.lang.Object)
        * FrameworkEvent(int, org.osgi.framework.Bundle, java.lang.Throwable)
    
      Attributes:
        STARTED (int): final static field
        ERROR (int): final static field
        PACKAGES_REFRESHED (int): final static field
        STARTLEVEL_CHANGED (int): final static field
        WARNING (int): final static field
        INFO (int): final static field
        STOPPED (int): final static field
        STOPPED_UPDATE (int): final static field
        STOPPED_BOOTCLASSPATH_MODIFIED (int): final static field
        WAIT_TIMEDOUT (int): final static field
    
    """
    STARTED: typing.ClassVar[int] = ...
    ERROR: typing.ClassVar[int] = ...
    PACKAGES_REFRESHED: typing.ClassVar[int] = ...
    STARTLEVEL_CHANGED: typing.ClassVar[int] = ...
    WARNING: typing.ClassVar[int] = ...
    INFO: typing.ClassVar[int] = ...
    STOPPED: typing.ClassVar[int] = ...
    STOPPED_UPDATE: typing.ClassVar[int] = ...
    STOPPED_BOOTCLASSPATH_MODIFIED: typing.ClassVar[int] = ...
    WAIT_TIMEDOUT: typing.ClassVar[int] = ...
    @typing.overload
    def __init__(self, int: int, object: typing.Any): ...
    @typing.overload
    def __init__(self, int: int, bundle: Bundle, throwable: java.lang.Throwable): ...
    def getBundle(self) -> Bundle: ...
    def getThrowable(self) -> java.lang.Throwable: ...
    def getType(self) -> int: ...

class FrameworkListener(java.util.EventListener):
    """
    Java class 'org.osgi.framework.FrameworkListener'
    
        Interfaces:
            java.util.EventListener
    
    """
    def frameworkEvent(self, frameworkEvent: FrameworkEvent) -> None: ...

class FrameworkUtil(java.lang.Object):
    """
    Java class 'org.osgi.framework.FrameworkUtil'
    
        Extends:
            java.lang.Object
    
    """
    @classmethod
    def createFilter(cls, string: java.lang.String) -> Filter: ...
    @classmethod
    def getBundle(cls, class_: typing.Type[typing.Any]) -> Bundle: ...
    @classmethod
    def matchDistinguishedNameChain(cls, string: java.lang.String, list: java.util.List[java.lang.String]) -> bool: ...

class InvalidSyntaxException(java.lang.Exception):
    """
    Java class 'org.osgi.framework.InvalidSyntaxException'
    
        Extends:
            java.lang.Exception
    
      Constructors:
        * InvalidSyntaxException(java.lang.String, java.lang.String)
        * InvalidSyntaxException(java.lang.String, java.lang.String, java.lang.Throwable)
    
    """
    @typing.overload
    def __init__(self, string: java.lang.String, string2: java.lang.String): ...
    @typing.overload
    def __init__(self, string: java.lang.String, string2: java.lang.String, throwable: java.lang.Throwable): ...
    def getCause(self) -> java.lang.Throwable: ...
    def getFilter(self) -> java.lang.String: ...
    def initCause(self, throwable: java.lang.Throwable) -> java.lang.Throwable: ...

class PackagePermission(java.security.BasicPermission):
    """
    Java class 'org.osgi.framework.PackagePermission'
    
        Extends:
            java.security.BasicPermission
    
      Constructors:
        * PackagePermission(java.lang.String, org.osgi.framework.Bundle, java.lang.String)
        * PackagePermission(java.lang.String, java.lang.String)
    
      Attributes:
        EXPORT (java.lang.String): final static field
        EXPORTONLY (java.lang.String): final static field
        IMPORT (java.lang.String): final static field
    
    """
    EXPORT: typing.ClassVar[java.lang.String] = ...
    EXPORTONLY: typing.ClassVar[java.lang.String] = ...
    IMPORT: typing.ClassVar[java.lang.String] = ...
    @typing.overload
    def __init__(self, string: java.lang.String, string2: java.lang.String): ...
    @typing.overload
    def __init__(self, string: java.lang.String, bundle: Bundle, string2: java.lang.String): ...
    def equals(self, object: typing.Any) -> bool: ...
    def getActions(self) -> java.lang.String: ...
    def hashCode(self) -> int: ...
    def implies(self, permission: java.security.Permission) -> bool: ...
    def newPermissionCollection(self) -> java.security.PermissionCollection: ...

class ServiceEvent(java.util.EventObject):
    """
    Java class 'org.osgi.framework.ServiceEvent'
    
        Extends:
            java.util.EventObject
    
      Constructors:
        * ServiceEvent(int, org.osgi.framework.ServiceReference)
    
      Attributes:
        REGISTERED (int): final static field
        MODIFIED (int): final static field
        UNREGISTERING (int): final static field
        MODIFIED_ENDMATCH (int): final static field
    
    """
    REGISTERED: typing.ClassVar[int] = ...
    MODIFIED: typing.ClassVar[int] = ...
    UNREGISTERING: typing.ClassVar[int] = ...
    MODIFIED_ENDMATCH: typing.ClassVar[int] = ...
    def __init__(self, int: int, serviceReference: 'ServiceReference'[typing.Any]): ...
    def getServiceReference(self) -> 'ServiceReference'[typing.Any]: ...
    def getType(self) -> int: ...

class ServiceException(java.lang.RuntimeException):
    """
    Java class 'org.osgi.framework.ServiceException'
    
        Extends:
            java.lang.RuntimeException
    
      Constructors:
        * ServiceException(java.lang.String, int)
        * ServiceException(java.lang.String, int, java.lang.Throwable)
        * ServiceException(java.lang.String)
        * ServiceException(java.lang.String, java.lang.Throwable)
    
      Attributes:
        UNSPECIFIED (int): final static field
        UNREGISTERED (int): final static field
        FACTORY_ERROR (int): final static field
        FACTORY_EXCEPTION (int): final static field
        SUBCLASSED (int): final static field
        REMOTE (int): final static field
        FACTORY_RECURSION (int): final static field
        ASYNC_ERROR (int): final static field
    
    """
    UNSPECIFIED: typing.ClassVar[int] = ...
    UNREGISTERED: typing.ClassVar[int] = ...
    FACTORY_ERROR: typing.ClassVar[int] = ...
    FACTORY_EXCEPTION: typing.ClassVar[int] = ...
    SUBCLASSED: typing.ClassVar[int] = ...
    REMOTE: typing.ClassVar[int] = ...
    FACTORY_RECURSION: typing.ClassVar[int] = ...
    ASYNC_ERROR: typing.ClassVar[int] = ...
    @typing.overload
    def __init__(self, string: java.lang.String): ...
    @typing.overload
    def __init__(self, string: java.lang.String, int: int): ...
    @typing.overload
    def __init__(self, string: java.lang.String, int: int, throwable: java.lang.Throwable): ...
    @typing.overload
    def __init__(self, string: java.lang.String, throwable: java.lang.Throwable): ...
    def getType(self) -> int: ...

_ServiceFactory__S = typing.TypeVar('_ServiceFactory__S')  # <S>
class ServiceFactory(java.lang.Object, typing.Generic[_ServiceFactory__S]):
    """
    Java class 'org.osgi.framework.ServiceFactory'
    
    """
    def getService(self, bundle: Bundle, serviceRegistration: 'ServiceRegistration'[_ServiceFactory__S]) -> _ServiceFactory__S: ...
    def ungetService(self, bundle: Bundle, serviceRegistration: 'ServiceRegistration'[_ServiceFactory__S], s3: _ServiceFactory__S) -> None: ...

class ServiceListener(java.util.EventListener):
    """
    Java class 'org.osgi.framework.ServiceListener'
    
        Interfaces:
            java.util.EventListener
    
    """
    def serviceChanged(self, serviceEvent: ServiceEvent) -> None: ...

_ServiceObjects__S = typing.TypeVar('_ServiceObjects__S')  # <S>
class ServiceObjects(java.lang.Object, typing.Generic[_ServiceObjects__S]):
    """
    Java class 'org.osgi.framework.ServiceObjects'
    
    """
    def getService(self) -> _ServiceObjects__S: ...
    def getServiceReference(self) -> 'ServiceReference'[_ServiceObjects__S]: ...
    def ungetService(self, s2: _ServiceObjects__S) -> None: ...

class ServicePermission(java.security.BasicPermission):
    """
    Java class 'org.osgi.framework.ServicePermission'
    
        Extends:
            java.security.BasicPermission
    
      Constructors:
        * ServicePermission(org.osgi.framework.ServiceReference, java.lang.String)
        * ServicePermission(java.lang.String, java.lang.String)
    
      Attributes:
        GET (java.lang.String): final static field
        REGISTER (java.lang.String): final static field
    
    """
    GET: typing.ClassVar[java.lang.String] = ...
    REGISTER: typing.ClassVar[java.lang.String] = ...
    @typing.overload
    def __init__(self, string: java.lang.String, string2: java.lang.String): ...
    @typing.overload
    def __init__(self, serviceReference: 'ServiceReference'[typing.Any], string: java.lang.String): ...
    def equals(self, object: typing.Any) -> bool: ...
    def getActions(self) -> java.lang.String: ...
    def hashCode(self) -> int: ...
    def implies(self, permission: java.security.Permission) -> bool: ...
    def newPermissionCollection(self) -> java.security.PermissionCollection: ...

_ServiceReference__S = typing.TypeVar('_ServiceReference__S')  # <S>
class ServiceReference(java.lang.Comparable[typing.Any], typing.Generic[_ServiceReference__S]):
    """
    Java class 'org.osgi.framework.ServiceReference'
    
        Interfaces:
            java.lang.Comparable
    
    """
    def compareTo(self, object: typing.Any) -> int: ...
    def getBundle(self) -> Bundle: ...
    def getProperty(self, string: java.lang.String) -> typing.Any: ...
    def getPropertyKeys(self) -> typing.List[java.lang.String]: ...
    def getUsingBundles(self) -> typing.List[Bundle]: ...
    def isAssignableTo(self, bundle: Bundle, string: java.lang.String) -> bool: ...

_ServiceRegistration__S = typing.TypeVar('_ServiceRegistration__S')  # <S>
class ServiceRegistration(java.lang.Object, typing.Generic[_ServiceRegistration__S]):
    """
    Java class 'org.osgi.framework.ServiceRegistration'
    
    """
    def getReference(self) -> ServiceReference[_ServiceRegistration__S]: ...
    def setProperties(self, dictionary: java.util.Dictionary[java.lang.String, typing.Any]) -> None: ...
    def unregister(self) -> None: ...

class Version(java.lang.Comparable[org.osgi.framework.Version]):
    """
    Java class 'org.osgi.framework.Version'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            java.lang.Comparable
    
      Constructors:
        * Version(java.lang.String)
        * Version(int, int, int, java.lang.String)
        * Version(int, int, int)
    
      Attributes:
        emptyVersion (org.osgi.framework.Version): final static field
    
    """
    emptyVersion: typing.ClassVar['Version'] = ...
    @typing.overload
    def __init__(self, int: int, int2: int, int3: int): ...
    @typing.overload
    def __init__(self, int: int, int2: int, int3: int, string: java.lang.String): ...
    @typing.overload
    def __init__(self, string: java.lang.String): ...
    @typing.overload
    def compareTo(self, object: typing.Any) -> int: ...
    @typing.overload
    def compareTo(self, version: 'Version') -> int: ...
    def equals(self, object: typing.Any) -> bool: ...
    def getMajor(self) -> int: ...
    def getMicro(self) -> int: ...
    def getMinor(self) -> int: ...
    def getQualifier(self) -> java.lang.String: ...
    def hashCode(self) -> int: ...
    @classmethod
    def parseVersion(cls, string: java.lang.String) -> 'Version': ...
    def toString(self) -> java.lang.String: ...
    @classmethod
    def valueOf(cls, string: java.lang.String) -> 'Version': ...

class VersionRange(java.lang.Object):
    """
    Java class 'org.osgi.framework.VersionRange'
    
        Extends:
            java.lang.Object
    
      Constructors:
        * VersionRange(char, org.osgi.framework.Version, org.osgi.framework.Version, char)
        * VersionRange(java.lang.String)
    
      Attributes:
        LEFT_OPEN (char): final static field
        LEFT_CLOSED (char): final static field
        RIGHT_OPEN (char): final static field
        RIGHT_CLOSED (char): final static field
    
    """
    LEFT_OPEN: typing.ClassVar[str] = ...
    LEFT_CLOSED: typing.ClassVar[str] = ...
    RIGHT_OPEN: typing.ClassVar[str] = ...
    RIGHT_CLOSED: typing.ClassVar[str] = ...
    @typing.overload
    def __init__(self, char: str, version: Version, version2: Version, char2: str): ...
    @typing.overload
    def __init__(self, string: java.lang.String): ...
    def equals(self, object: typing.Any) -> bool: ...
    def getLeft(self) -> Version: ...
    def getLeftType(self) -> str: ...
    def getRight(self) -> Version: ...
    def getRightType(self) -> str: ...
    def hashCode(self) -> int: ...
    def includes(self, version: Version) -> bool: ...
    def intersection(self, versionRangeArray: typing.List['VersionRange']) -> 'VersionRange': ...
    def isEmpty(self) -> bool: ...
    def isExact(self) -> bool: ...
    def toFilterString(self, string: java.lang.String) -> java.lang.String: ...
    def toString(self) -> java.lang.String: ...
    @classmethod
    def valueOf(cls, string: java.lang.String) -> 'VersionRange': ...

class AllServiceListener(ServiceListener):
    """
    Java class 'org.osgi.framework.AllServiceListener'
    
        Interfaces:
            org.osgi.framework.ServiceListener
    
    """

class BundleContext(BundleReference):
    """
    Java class 'org.osgi.framework.BundleContext'
    
        Interfaces:
            org.osgi.framework.BundleReference
    
    """
    def addBundleListener(self, bundleListener: BundleListener) -> None: ...
    def addFrameworkListener(self, frameworkListener: FrameworkListener) -> None: ...
    @typing.overload
    def addServiceListener(self, serviceListener: ServiceListener) -> None: ...
    @typing.overload
    def addServiceListener(self, serviceListener: ServiceListener, string: java.lang.String) -> None: ...
    def createFilter(self, string: java.lang.String) -> Filter: ...
    def getAllServiceReferences(self, string: java.lang.String, string2: java.lang.String) -> typing.List[ServiceReference[typing.Any]]: ...
    @typing.overload
    def getBundle(self) -> Bundle: ...
    @typing.overload
    def getBundle(self, string: java.lang.String) -> Bundle: ...
    @typing.overload
    def getBundle(self, long: int) -> Bundle: ...
    def getBundles(self) -> typing.List[Bundle]: ...
    def getDataFile(self, string: java.lang.String) -> java.io.File: ...
    def getProperty(self, string: java.lang.String) -> java.lang.String: ...
    _getService__S = typing.TypeVar('_getService__S')  # <S>
    def getService(self, serviceReference: ServiceReference[_getService__S]) -> _getService__S: ...
    _getServiceObjects__S = typing.TypeVar('_getServiceObjects__S')  # <S>
    def getServiceObjects(self, serviceReference: ServiceReference[_getServiceObjects__S]) -> ServiceObjects[_getServiceObjects__S]: ...
    _getServiceReference_0__S = typing.TypeVar('_getServiceReference_0__S')  # <S>
    @typing.overload
    def getServiceReference(self, class_: typing.Type[_getServiceReference_0__S]) -> ServiceReference[_getServiceReference_0__S]: ...
    @typing.overload
    def getServiceReference(self, string: java.lang.String) -> ServiceReference[typing.Any]: ...
    _getServiceReferences_0__S = typing.TypeVar('_getServiceReferences_0__S')  # <S>
    @typing.overload
    def getServiceReferences(self, class_: typing.Type[_getServiceReferences_0__S], string: java.lang.String) -> java.util.Collection[ServiceReference[_getServiceReferences_0__S]]: ...
    @typing.overload
    def getServiceReferences(self, string: java.lang.String, string2: java.lang.String) -> typing.List[ServiceReference[typing.Any]]: ...
    @typing.overload
    def installBundle(self, string: java.lang.String) -> Bundle: ...
    @typing.overload
    def installBundle(self, string: java.lang.String, inputStream: java.io.InputStream) -> Bundle: ...
    _registerService_0__S = typing.TypeVar('_registerService_0__S')  # <S>
    @typing.overload
    def registerService(self, class_: typing.Type[_registerService_0__S], s2: _registerService_0__S, dictionary: java.util.Dictionary[java.lang.String, typing.Any]) -> ServiceRegistration[_registerService_0__S]: ...
    _registerService_1__S = typing.TypeVar('_registerService_1__S')  # <S>
    @typing.overload
    def registerService(self, class_: typing.Type[_registerService_1__S], serviceFactory: ServiceFactory[_registerService_1__S], dictionary: java.util.Dictionary[java.lang.String, typing.Any]) -> ServiceRegistration[_registerService_1__S]: ...
    @typing.overload
    def registerService(self, string: java.lang.String, object: typing.Any, dictionary: java.util.Dictionary[java.lang.String, typing.Any]) -> ServiceRegistration[typing.Any]: ...
    @typing.overload
    def registerService(self, stringArray: typing.List[java.lang.String], object: typing.Any, dictionary: java.util.Dictionary[java.lang.String, typing.Any]) -> ServiceRegistration[typing.Any]: ...
    def removeBundleListener(self, bundleListener: BundleListener) -> None: ...
    def removeFrameworkListener(self, frameworkListener: FrameworkListener) -> None: ...
    def removeServiceListener(self, serviceListener: ServiceListener) -> None: ...
    def ungetService(self, serviceReference: ServiceReference[typing.Any]) -> bool: ...

_PrototypeServiceFactory__S = typing.TypeVar('_PrototypeServiceFactory__S')  # <S>
class PrototypeServiceFactory(ServiceFactory[_PrototypeServiceFactory__S], typing.Generic[_PrototypeServiceFactory__S]):
    """
    Java class 'org.osgi.framework.PrototypeServiceFactory'
    
        Interfaces:
            org.osgi.framework.ServiceFactory
    
    """
    def getService(self, bundle: Bundle, serviceRegistration: ServiceRegistration[_PrototypeServiceFactory__S]) -> _PrototypeServiceFactory__S: ...
    def ungetService(self, bundle: Bundle, serviceRegistration: ServiceRegistration[_PrototypeServiceFactory__S], s3: _PrototypeServiceFactory__S) -> None: ...

class SynchronousBundleListener(BundleListener):
    """
    Java class 'org.osgi.framework.SynchronousBundleListener'
    
        Interfaces:
            org.osgi.framework.BundleListener
    
    """

class UnfilteredServiceListener(ServiceListener):
    """
    Java class 'org.osgi.framework.UnfilteredServiceListener'
    
        Interfaces:
            org.osgi.framework.ServiceListener
    
    """
