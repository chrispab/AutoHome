import java.lang
import java.util
import org.osgi.framework
import typing


_BundleTrackerCustomizer__T = typing.TypeVar('_BundleTrackerCustomizer__T')  # <T>
class BundleTrackerCustomizer(java.lang.Object, typing.Generic[_BundleTrackerCustomizer__T]):
    """
    Java class 'org.osgi.util.tracker.BundleTrackerCustomizer'
    
    """
    def addingBundle(self, bundle: org.osgi.framework.Bundle, bundleEvent: org.osgi.framework.BundleEvent) -> _BundleTrackerCustomizer__T: ...
    def modifiedBundle(self, bundle: org.osgi.framework.Bundle, bundleEvent: org.osgi.framework.BundleEvent, t: _BundleTrackerCustomizer__T) -> None: ...
    def removedBundle(self, bundle: org.osgi.framework.Bundle, bundleEvent: org.osgi.framework.BundleEvent, t: _BundleTrackerCustomizer__T) -> None: ...

_ServiceTrackerCustomizer__S = typing.TypeVar('_ServiceTrackerCustomizer__S')  # <S>
_ServiceTrackerCustomizer__T = typing.TypeVar('_ServiceTrackerCustomizer__T')  # <T>
class ServiceTrackerCustomizer(java.lang.Object, typing.Generic[_ServiceTrackerCustomizer__S, _ServiceTrackerCustomizer__T]):
    """
    Java class 'org.osgi.util.tracker.ServiceTrackerCustomizer'
    
    """
    def addingService(self, serviceReference: org.osgi.framework.ServiceReference[_ServiceTrackerCustomizer__S]) -> _ServiceTrackerCustomizer__T: ...
    def modifiedService(self, serviceReference: org.osgi.framework.ServiceReference[_ServiceTrackerCustomizer__S], t: _ServiceTrackerCustomizer__T) -> None: ...
    def removedService(self, serviceReference: org.osgi.framework.ServiceReference[_ServiceTrackerCustomizer__S], t: _ServiceTrackerCustomizer__T) -> None: ...

_BundleTracker__T = typing.TypeVar('_BundleTracker__T')  # <T>
class BundleTracker(BundleTrackerCustomizer[_BundleTracker__T], typing.Generic[_BundleTracker__T]):
    """
    Java class 'org.osgi.util.tracker.BundleTracker'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            org.osgi.util.tracker.BundleTrackerCustomizer
    
      Constructors:
        * BundleTracker(org.osgi.framework.BundleContext, int, org.osgi.util.tracker.BundleTrackerCustomizer)
    
    """
    def __init__(self, bundleContext: org.osgi.framework.BundleContext, int: int, bundleTrackerCustomizer: BundleTrackerCustomizer[_BundleTracker__T]): ...
    def addingBundle(self, bundle: org.osgi.framework.Bundle, bundleEvent: org.osgi.framework.BundleEvent) -> _BundleTracker__T: ...
    def close(self) -> None: ...
    def getBundles(self) -> typing.List[org.osgi.framework.Bundle]: ...
    def getObject(self, bundle: org.osgi.framework.Bundle) -> _BundleTracker__T: ...
    def getTracked(self) -> java.util.Map[org.osgi.framework.Bundle, _BundleTracker__T]: ...
    def getTrackingCount(self) -> int: ...
    def isEmpty(self) -> bool: ...
    def modifiedBundle(self, bundle: org.osgi.framework.Bundle, bundleEvent: org.osgi.framework.BundleEvent, t: _BundleTracker__T) -> None: ...
    def open(self) -> None: ...
    def remove(self, bundle: org.osgi.framework.Bundle) -> None: ...
    def removedBundle(self, bundle: org.osgi.framework.Bundle, bundleEvent: org.osgi.framework.BundleEvent, t: _BundleTracker__T) -> None: ...
    def size(self) -> int: ...

_ServiceTracker__S = typing.TypeVar('_ServiceTracker__S')  # <S>
_ServiceTracker__T = typing.TypeVar('_ServiceTracker__T')  # <T>
class ServiceTracker(ServiceTrackerCustomizer[_ServiceTracker__S, _ServiceTracker__T], typing.Generic[_ServiceTracker__S, _ServiceTracker__T]):
    """
    Java class 'org.osgi.util.tracker.ServiceTracker'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            org.osgi.util.tracker.ServiceTrackerCustomizer
    
      Constructors:
        * ServiceTracker(org.osgi.framework.BundleContext, java.lang.Class, org.osgi.util.tracker.ServiceTrackerCustomizer)
        * ServiceTracker(org.osgi.framework.BundleContext, java.lang.String, org.osgi.util.tracker.ServiceTrackerCustomizer)
        * ServiceTracker(org.osgi.framework.BundleContext, org.osgi.framework.ServiceReference, org.osgi.util.tracker.ServiceTrackerCustomizer)
        * ServiceTracker(org.osgi.framework.BundleContext, org.osgi.framework.Filter, org.osgi.util.tracker.ServiceTrackerCustomizer)
    
    """
    @typing.overload
    def __init__(self, bundleContext: org.osgi.framework.BundleContext, class_: typing.Type[_ServiceTracker__S], serviceTrackerCustomizer: ServiceTrackerCustomizer[_ServiceTracker__S, _ServiceTracker__T]): ...
    @typing.overload
    def __init__(self, bundleContext: org.osgi.framework.BundleContext, string: java.lang.String, serviceTrackerCustomizer: ServiceTrackerCustomizer[_ServiceTracker__S, _ServiceTracker__T]): ...
    @typing.overload
    def __init__(self, bundleContext: org.osgi.framework.BundleContext, filter: org.osgi.framework.Filter, serviceTrackerCustomizer: ServiceTrackerCustomizer[_ServiceTracker__S, _ServiceTracker__T]): ...
    @typing.overload
    def __init__(self, bundleContext: org.osgi.framework.BundleContext, serviceReference: org.osgi.framework.ServiceReference[_ServiceTracker__S], serviceTrackerCustomizer: ServiceTrackerCustomizer[_ServiceTracker__S, _ServiceTracker__T]): ...
    def addingService(self, serviceReference: org.osgi.framework.ServiceReference[_ServiceTracker__S]) -> _ServiceTracker__T: ...
    def close(self) -> None: ...
    @typing.overload
    def getService(self) -> _ServiceTracker__T: ...
    @typing.overload
    def getService(self, serviceReference: org.osgi.framework.ServiceReference[_ServiceTracker__S]) -> _ServiceTracker__T: ...
    def getServiceReference(self) -> org.osgi.framework.ServiceReference[_ServiceTracker__S]: ...
    def getServiceReferences(self) -> typing.List[org.osgi.framework.ServiceReference[_ServiceTracker__S]]: ...
    @typing.overload
    def getServices(self) -> typing.List[typing.Any]: ...
    @typing.overload
    def getServices(self, tArray: typing.List[_ServiceTracker__T]) -> typing.List[_ServiceTracker__T]: ...
    def getTracked(self) -> java.util.SortedMap[org.osgi.framework.ServiceReference[_ServiceTracker__S], _ServiceTracker__T]: ...
    def getTrackingCount(self) -> int: ...
    def isEmpty(self) -> bool: ...
    def modifiedService(self, serviceReference: org.osgi.framework.ServiceReference[_ServiceTracker__S], t: _ServiceTracker__T) -> None: ...
    @typing.overload
    def open(self) -> None: ...
    @typing.overload
    def open(self, boolean: bool) -> None: ...
    def remove(self, serviceReference: org.osgi.framework.ServiceReference[_ServiceTracker__S]) -> None: ...
    def removedService(self, serviceReference: org.osgi.framework.ServiceReference[_ServiceTracker__S], t: _ServiceTracker__T) -> None: ...
    def size(self) -> int: ...
    def waitForService(self, long: int) -> _ServiceTracker__T: ...
