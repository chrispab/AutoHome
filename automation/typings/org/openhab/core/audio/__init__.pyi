import java.io
import java.lang
import java.util
import org.openhab.core.library.types
import typing


class AudioException(java.lang.Exception):
    """
    Java class 'org.openhab.core.audio.AudioException'
    
        Extends:
            java.lang.Exception
    
      Constructors:
        * AudioException(java.lang.Throwable)
        * AudioException(java.lang.String)
        * AudioException(java.lang.String, java.lang.Throwable)
        * AudioException()
    
    """
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, message: java.lang.String): ...
    @typing.overload
    def __init__(self, message: java.lang.String, cause: java.lang.Throwable): ...
    @typing.overload
    def __init__(self, cause: java.lang.Throwable): ...

class AudioFormat(java.lang.Object):
    """
    Java class 'org.openhab.core.audio.AudioFormat'
    
        Extends:
            java.lang.Object
    
      Constructors:
        * AudioFormat(java.lang.String, java.lang.String, java.lang.Boolean, java.lang.Integer, java.lang.Integer, java.lang.Long)
    
      Attributes:
        MP3 (org.openhab.core.audio.AudioFormat): final static field
        WAV (org.openhab.core.audio.AudioFormat): final static field
        OGG (org.openhab.core.audio.AudioFormat): final static field
        AAC (org.openhab.core.audio.AudioFormat): final static field
        CONTAINER_NONE (java.lang.String): final static field
        CONTAINER_WAVE (java.lang.String): final static field
        CONTAINER_OGG (java.lang.String): final static field
        CODEC_PCM_SIGNED (java.lang.String): final static field
        CODEC_PCM_UNSIGNED (java.lang.String): final static field
        CODEC_PCM_ALAW (java.lang.String): final static field
        CODEC_PCM_ULAW (java.lang.String): final static field
        CODEC_MP3 (java.lang.String): final static field
        CODEC_VORBIS (java.lang.String): final static field
        CODEC_AAC (java.lang.String): final static field
    
    """
    MP3: typing.ClassVar['AudioFormat'] = ...
    WAV: typing.ClassVar['AudioFormat'] = ...
    OGG: typing.ClassVar['AudioFormat'] = ...
    AAC: typing.ClassVar['AudioFormat'] = ...
    CONTAINER_NONE: typing.ClassVar[java.lang.String] = ...
    CONTAINER_WAVE: typing.ClassVar[java.lang.String] = ...
    CONTAINER_OGG: typing.ClassVar[java.lang.String] = ...
    CODEC_PCM_SIGNED: typing.ClassVar[java.lang.String] = ...
    CODEC_PCM_UNSIGNED: typing.ClassVar[java.lang.String] = ...
    CODEC_PCM_ALAW: typing.ClassVar[java.lang.String] = ...
    CODEC_PCM_ULAW: typing.ClassVar[java.lang.String] = ...
    CODEC_MP3: typing.ClassVar[java.lang.String] = ...
    CODEC_VORBIS: typing.ClassVar[java.lang.String] = ...
    CODEC_AAC: typing.ClassVar[java.lang.String] = ...
    def __init__(self, container: java.lang.String, codec: java.lang.String, bigEndian: bool, bitDepth: int, bitRate: int, frequency: int): ...
    def equals(self, obj: typing.Any) -> bool: ...
    @classmethod
    def getBestMatch(cls, inputs: java.util.Set['AudioFormat'], outputs: java.util.Set['AudioFormat']) -> 'AudioFormat': ...
    def getBitDepth(self) -> int: ...
    def getBitRate(self) -> int: ...
    def getCodec(self) -> java.lang.String: ...
    def getContainer(self) -> java.lang.String: ...
    def getFrequency(self) -> int: ...
    @classmethod
    def getPreferredFormat(cls, audioFormats: java.util.Set['AudioFormat']) -> 'AudioFormat': ...
    def hashCode(self) -> int: ...
    def isBigEndian(self) -> bool: ...
    def isCompatible(self, audioFormat: 'AudioFormat') -> bool: ...
    def toString(self) -> java.lang.String: ...

class AudioHTTPServer(java.lang.Object):
    """
    @NonNullByDefault public interface AudioHTTPServer
    
        This is an interface that is implemented by :code:`AudioServlet` and which allows exposing audio streams through HTTP.
        Streams are only served a single time and then discarded.
    
    
    """
    @typing.overload
    def serve(self, stream: 'AudioStream') -> java.lang.String: ...
    @typing.overload
    def serve(self, stream: 'FixedLengthAudioStream', seconds: int) -> java.lang.String: ...

class AudioManager(java.lang.Object):
    """
    @NonNullByDefault public interface AudioManager
    
        This service provides functionality around audio services and is the central service to be used directly by others.
    
    
    """
    SOUND_DIR: typing.ClassVar[java.lang.String] = ...
    def getAllSinks(self) -> java.util.Set['AudioSink']: ...
    def getAllSources(self) -> java.util.Set['AudioSource']: ...
    @typing.overload
    def getSink(self) -> 'AudioSink': ...
    @typing.overload
    def getSink(self, sinkId: java.lang.String) -> 'AudioSink': ...
    def getSinkIds(self, pattern: java.lang.String) -> java.util.Set[java.lang.String]: ...
    def getSource(self) -> 'AudioSource': ...
    def getSourceIds(self, pattern: java.lang.String) -> java.util.Set[java.lang.String]: ...
    def getVolume(self, sinkId: java.lang.String) -> org.openhab.core.library.types.PercentType: ...
    @typing.overload
    def play(self, audioStream: 'AudioStream') -> None: ...
    @typing.overload
    def play(self, audioStream: 'AudioStream', sinkId: java.lang.String) -> None: ...
    @typing.overload
    def play(self, audioStream: 'AudioStream', sinkId: java.lang.String, volume: org.openhab.core.library.types.PercentType) -> None: ...
    @typing.overload
    def playFile(self, fileName: java.lang.String) -> None: ...
    @typing.overload
    def playFile(self, fileName: java.lang.String, sinkId: java.lang.String) -> None: ...
    @typing.overload
    def playFile(self, fileName: java.lang.String, sinkId: java.lang.String, volume: org.openhab.core.library.types.PercentType) -> None: ...
    @typing.overload
    def playFile(self, fileName: java.lang.String, volume: org.openhab.core.library.types.PercentType) -> None: ...
    def setVolume(self, volume: org.openhab.core.library.types.PercentType, sinkId: java.lang.String) -> None: ...
    @typing.overload
    def stream(self, url: java.lang.String) -> None: ...
    @typing.overload
    def stream(self, url: java.lang.String, sinkId: java.lang.String) -> None: ...

class AudioSink(java.lang.Object):
    """
    @NonNullByDefault public interface AudioSink
    
        Definition of an audio output like headphones, a speaker or for writing to a file / clip.
    
    
    """
    def getId(self) -> java.lang.String: ...
    def getLabel(self, locale: java.util.Locale) -> java.lang.String: ...
    def getSupportedFormats(self) -> java.util.Set[AudioFormat]: ...
    def getSupportedStreams(self) -> java.util.Set[typing.Type['AudioStream']]: ...
    def getVolume(self) -> org.openhab.core.library.types.PercentType: ...
    def process(self, audioStream: 'AudioStream') -> None: ...
    def setVolume(self, volume: org.openhab.core.library.types.PercentType) -> None: ...

class AudioSource(java.lang.Object):
    """
    @NonNullByDefault public interface AudioSource
    
        This is an audio source, which can provide a continuous live stream of audio. Its main use is for microphones and other
        "line-in" sources and it can be registered as a service in order to make it available throughout the system.
    
    
    """
    def getId(self) -> java.lang.String: ...
    def getInputStream(self, format: AudioFormat) -> 'AudioStream': ...
    def getLabel(self, locale: java.util.Locale) -> java.lang.String: ...
    def getSupportedFormats(self) -> java.util.Set[AudioFormat]: ...

class AudioStream(java.io.InputStream):
    """
    Java class 'org.openhab.core.audio.AudioStream'
    
        Extends:
            java.io.InputStream
    
      Constructors:
        * AudioStream()
    
    """
    def __init__(self): ...
    def getFormat(self) -> AudioFormat: ...

class FixedLengthAudioStream(AudioStream):
    """
    Java class 'org.openhab.core.audio.FixedLengthAudioStream'
    
        Extends:
            org.openhab.core.audio.AudioStream
    
      Constructors:
        * FixedLengthAudioStream()
    
    """
    def __init__(self): ...
    def getClonedStream(self) -> java.io.InputStream: ...
    def length(self) -> int: ...

class URLAudioStream(AudioStream):
    """
    Java class 'org.openhab.core.audio.URLAudioStream'
    
        Extends:
            org.openhab.core.audio.AudioStream
    
      Constructors:
        * URLAudioStream(java.lang.String)
    
      Raises:
        org.openhab.core.audio.AudioException: from java
    
      Attributes:
        M3U_EXTENSION (java.lang.String): final static field
        PLS_EXTENSION (java.lang.String): final static field
    
    """
    M3U_EXTENSION: typing.ClassVar[java.lang.String] = ...
    PLS_EXTENSION: typing.ClassVar[java.lang.String] = ...
    def __init__(self, url: java.lang.String): ...
    def close(self) -> None: ...
    def getFormat(self) -> AudioFormat: ...
    def getURL(self) -> java.lang.String: ...
    @typing.overload
    def read(self, byteArray: typing.List[int]) -> int: ...
    @typing.overload
    def read(self, byteArray: typing.List[int], int: int, int2: int) -> int: ...
    @typing.overload
    def read(self) -> int: ...
    def toString(self) -> java.lang.String: ...

class UnsupportedAudioFormatException(AudioException):
    """
    Java class 'org.openhab.core.audio.UnsupportedAudioFormatException'
    
        Extends:
            org.openhab.core.audio.AudioException
    
      Constructors:
        * UnsupportedAudioFormatException(java.lang.String, org.openhab.core.audio.AudioFormat, java.lang.Throwable)
        * UnsupportedAudioFormatException(java.lang.String, org.openhab.core.audio.AudioFormat)
    
    """
    @typing.overload
    def __init__(self, message: java.lang.String, unsupportedFormat: AudioFormat): ...
    @typing.overload
    def __init__(self, message: java.lang.String, unsupportedFormat: AudioFormat, cause: java.lang.Throwable): ...
    def getUnsupportedFormat(self) -> AudioFormat: ...

class UnsupportedAudioStreamException(AudioException):
    """
    Java class 'org.openhab.core.audio.UnsupportedAudioStreamException'
    
        Extends:
            org.openhab.core.audio.AudioException
    
      Constructors:
        * UnsupportedAudioStreamException(java.lang.String, java.lang.Class, java.lang.Throwable)
        * UnsupportedAudioStreamException(java.lang.String, java.lang.Class)
    
    """
    @typing.overload
    def __init__(self, message: java.lang.String, unsupportedAudioStreamClass: typing.Type[AudioStream]): ...
    @typing.overload
    def __init__(self, message: java.lang.String, unsupportedAudioStreamClass: typing.Type[AudioStream], cause: java.lang.Throwable): ...
    def getUnsupportedAudioStreamClass(self) -> typing.Type[AudioStream]: ...

class ByteArrayAudioStream(FixedLengthAudioStream):
    """
    Java class 'org.openhab.core.audio.ByteArrayAudioStream'
    
        Extends:
            org.openhab.core.audio.FixedLengthAudioStream
    
      Constructors:
        * ByteArrayAudioStream(byte[], org.openhab.core.audio.AudioFormat)
    
    """
    def __init__(self, bytes: typing.List[int], format: AudioFormat): ...
    def close(self) -> None: ...
    def getClonedStream(self) -> java.io.InputStream: ...
    def getFormat(self) -> AudioFormat: ...
    def length(self) -> int: ...
    @typing.overload
    def read(self, byteArray: typing.List[int]) -> int: ...
    @typing.overload
    def read(self, byteArray: typing.List[int], int: int, int2: int) -> int: ...
    @typing.overload
    def read(self) -> int: ...

class FileAudioStream(FixedLengthAudioStream):
    """
    Java class 'org.openhab.core.audio.FileAudioStream'
    
        Extends:
            org.openhab.core.audio.FixedLengthAudioStream
    
      Constructors:
        * FileAudioStream(java.io.File)
        * FileAudioStream(java.io.File, org.openhab.core.audio.AudioFormat)
    
      Raises:
        org.openhab.core.audio.AudioException: from java
    
      Attributes:
        WAV_EXTENSION (java.lang.String): final static field
        MP3_EXTENSION (java.lang.String): final static field
        OGG_EXTENSION (java.lang.String): final static field
        AAC_EXTENSION (java.lang.String): final static field
    
    """
    WAV_EXTENSION: typing.ClassVar[java.lang.String] = ...
    MP3_EXTENSION: typing.ClassVar[java.lang.String] = ...
    OGG_EXTENSION: typing.ClassVar[java.lang.String] = ...
    AAC_EXTENSION: typing.ClassVar[java.lang.String] = ...
    @typing.overload
    def __init__(self, file: java.io.File): ...
    @typing.overload
    def __init__(self, file: java.io.File, format: AudioFormat): ...
    def close(self) -> None: ...
    def getClonedStream(self) -> java.io.InputStream: ...
    def getFormat(self) -> AudioFormat: ...
    def length(self) -> int: ...
    @typing.overload
    def read(self, byteArray: typing.List[int]) -> int: ...
    @typing.overload
    def read(self, byteArray: typing.List[int], int: int, int2: int) -> int: ...
    @typing.overload
    def read(self) -> int: ...
    def reset(self) -> None: ...
