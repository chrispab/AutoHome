import java.io
import java.lang
import java.net
import java.util
import org.openhab.core.automation
import org.openhab.core.automation.template
import org.openhab.core.automation.type
import org.openhab.core.common.registry
import org.openhab.core.io.console
import org.openhab.core.io.console.extensions
import org.osgi.framework
import org.osgi.service.component
import org.osgi.util.tracker
import typing


_AbstractCommandProvider__E = typing.TypeVar('_AbstractCommandProvider__E')  # <E>
class AbstractCommandProvider(org.osgi.util.tracker.ServiceTrackerCustomizer, typing.Generic[_AbstractCommandProvider__E]):
    """
    Java class 'org.openhab.core.automation.internal.commands.AbstractCommandProvider'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            org.osgi.util.tracker.ServiceTrackerCustomizer
    
      Constructors:
        * AbstractCommandProvider(org.osgi.framework.BundleContext)
    
    """
    def __init__(self, context: org.osgi.framework.BundleContext): ...
    def addingService(self, reference: org.osgi.framework.ServiceReference) -> typing.Any: ...
    def close(self) -> None: ...
    def exportData(self, parserType: java.lang.String, set: java.util.Set[_AbstractCommandProvider__E], file: java.io.File) -> java.lang.String: ...
    def modifiedService(self, reference: org.osgi.framework.ServiceReference, service: typing.Any) -> None: ...
    def removedService(self, reference: org.osgi.framework.ServiceReference, service: typing.Any) -> None: ...

class AutomationCommand(java.lang.Object):
    """
    Java class 'org.openhab.core.automation.internal.commands.AutomationCommand'
    
        Extends:
            java.lang.Object
    
      Constructors:
        * AutomationCommand(java.lang.String, java.lang.String[], int, org.openhab.core.automation.internal.commands.AutomationCommandsPluggable)
    
    """
    def __init__(self, command: java.lang.String, parameterValues: typing.List[java.lang.String], providerType: int, autoCommands: 'AutomationCommandsPluggable'): ...
    def execute(self) -> java.lang.String: ...

class AutomationCommands(java.lang.Object):
    """
    Java class 'org.openhab.core.automation.internal.commands.AutomationCommands'
    
        Extends:
            java.lang.Object
    
      Constructors:
        * AutomationCommands()
    
    """
    def __init__(self): ...
    def dispose(self) -> None: ...
    def executeCommand(self, command: java.lang.String, parameterValues: typing.List[java.lang.String]) -> java.lang.String: ...
    def exportModuleTypes(self, parserType: java.lang.String, set: java.util.Set[org.openhab.core.automation.type.ModuleType], file: java.io.File) -> java.lang.String: ...
    def exportRules(self, parserType: java.lang.String, set: java.util.Set[org.openhab.core.automation.Rule], file: java.io.File) -> java.lang.String: ...
    def exportTemplates(self, parserType: java.lang.String, set: java.util.Set[org.openhab.core.automation.template.RuleTemplate], file: java.io.File) -> java.lang.String: ...
    _getActions__T = typing.TypeVar('_getActions__T', bound=org.openhab.core.automation.type.ModuleType)  # <T>
    def getActions(self, locale: java.util.Locale) -> java.util.Collection[_getActions__T]: ...
    _getConditions__T = typing.TypeVar('_getConditions__T', bound=org.openhab.core.automation.type.ModuleType)  # <T>
    def getConditions(self, locale: java.util.Locale) -> java.util.Collection[_getConditions__T]: ...
    def getModuleType(self, typeUID: java.lang.String, locale: java.util.Locale) -> org.openhab.core.automation.type.ModuleType: ...
    def getRule(self, uid: java.lang.String) -> org.openhab.core.automation.Rule: ...
    def getRuleStatus(self, uid: java.lang.String) -> org.openhab.core.automation.RuleStatus: ...
    def getRules(self) -> java.util.Collection[org.openhab.core.automation.Rule]: ...
    def getTemplate(self, templateUID: java.lang.String, locale: java.util.Locale) -> org.openhab.core.automation.template.Template: ...
    def getTemplates(self, locale: java.util.Locale) -> java.util.Collection[org.openhab.core.automation.template.RuleTemplate]: ...
    _getTriggers__T = typing.TypeVar('_getTriggers__T', bound=org.openhab.core.automation.type.ModuleType)  # <T>
    def getTriggers(self, locale: java.util.Locale) -> java.util.Collection[_getTriggers__T]: ...
    def importModuleTypes(self, parserType: java.lang.String, url: java.net.URL) -> java.util.Set[org.openhab.core.automation.type.ModuleType]: ...
    def importRules(self, parserType: java.lang.String, url: java.net.URL) -> java.util.Set[org.openhab.core.automation.Rule]: ...
    def importTemplates(self, parserType: java.lang.String, url: java.net.URL) -> java.util.Set[org.openhab.core.automation.template.RuleTemplate]: ...
    def initialize(self, bundleContext: org.osgi.framework.BundleContext, moduleTypeRegistry: org.openhab.core.automation.type.ModuleTypeRegistry, templateRegistry: org.openhab.core.automation.template.TemplateRegistry[org.openhab.core.automation.template.RuleTemplate], ruleRegistry: org.openhab.core.automation.RuleRegistry) -> None: ...
    def remove(self, providerType: int, url: java.net.URL) -> java.lang.String: ...
    def removeRule(self, uid: java.lang.String) -> java.lang.String: ...
    def removeRules(self, ruleFilter: java.lang.String) -> java.lang.String: ...
    def setEnabled(self, uid: java.lang.String, isEnabled: bool) -> None: ...

class Printer(java.lang.Object):
    """
    Java class 'org.openhab.core.automation.internal.commands.Printer'
    
        Extends:
            java.lang.Object
    
      Constructors:
        * Printer()
    
    """
    def __init__(self): ...

class Utils(java.lang.Object):
    """
    Java class 'org.openhab.core.automation.internal.commands.Utils'
    
        Extends:
            java.lang.Object
    
      Constructors:
        * Utils()
    
    """
    def __init__(self): ...

class AutomationCommandEnableRule(AutomationCommand):
    """
    Java class 'org.openhab.core.automation.internal.commands.AutomationCommandEnableRule'
    
        Extends:
            org.openhab.core.automation.internal.commands.AutomationCommand
    
      Constructors:
        * AutomationCommandEnableRule(java.lang.String, java.lang.String[], int, org.openhab.core.automation.internal.commands.AutomationCommandsPluggable)
    
    """
    def __init__(self, command: java.lang.String, parameterValues: typing.List[java.lang.String], providerType: int, autoCommands: 'AutomationCommandsPluggable'): ...
    def execute(self) -> java.lang.String: ...

class AutomationCommandExport(AutomationCommand):
    """
    Java class 'org.openhab.core.automation.internal.commands.AutomationCommandExport'
    
        Extends:
            org.openhab.core.automation.internal.commands.AutomationCommand
    
      Constructors:
        * AutomationCommandExport(java.lang.String, java.lang.String[], int, org.openhab.core.automation.internal.commands.AutomationCommandsPluggable)
    
    """
    def __init__(self, command: java.lang.String, params: typing.List[java.lang.String], providerType: int, autoCommands: 'AutomationCommandsPluggable'): ...
    def execute(self) -> java.lang.String: ...

class AutomationCommandImport(AutomationCommand):
    """
    Java class 'org.openhab.core.automation.internal.commands.AutomationCommandImport'
    
        Extends:
            org.openhab.core.automation.internal.commands.AutomationCommand
    
      Constructors:
        * AutomationCommandImport(java.lang.String, java.lang.String[], int, org.openhab.core.automation.internal.commands.AutomationCommandsPluggable)
    
    """
    def __init__(self, command: java.lang.String, params: typing.List[java.lang.String], adminType: int, autoCommands: 'AutomationCommandsPluggable'): ...
    def execute(self) -> java.lang.String: ...

class AutomationCommandList(AutomationCommand):
    """
    Java class 'org.openhab.core.automation.internal.commands.AutomationCommandList'
    
        Extends:
            org.openhab.core.automation.internal.commands.AutomationCommand
    
      Constructors:
        * AutomationCommandList(java.lang.String, java.lang.String[], int, org.openhab.core.automation.internal.commands.AutomationCommandsPluggable)
    
    """
    def __init__(self, command: java.lang.String, params: typing.List[java.lang.String], adminType: int, autoCommands: 'AutomationCommandsPluggable'): ...
    def execute(self) -> java.lang.String: ...

class AutomationCommandRemove(AutomationCommand):
    """
    Java class 'org.openhab.core.automation.internal.commands.AutomationCommandRemove'
    
        Extends:
            org.openhab.core.automation.internal.commands.AutomationCommand
    
      Constructors:
        * AutomationCommandRemove(java.lang.String, java.lang.String[], int, org.openhab.core.automation.internal.commands.AutomationCommandsPluggable)
    
    """
    def __init__(self, command: java.lang.String, params: typing.List[java.lang.String], providerType: int, autoCommands: 'AutomationCommandsPluggable'): ...
    def execute(self) -> java.lang.String: ...

class AutomationCommandsPluggable(AutomationCommands, org.openhab.core.io.console.extensions.ConsoleCommandExtension):
    """
    Java class 'org.openhab.core.automation.internal.commands.AutomationCommandsPluggable'
    
        Extends:
            org.openhab.core.automation.internal.commands.AutomationCommands
    
        Interfaces:
            org.openhab.core.io.console.extensions.ConsoleCommandExtension
    
      Constructors:
        * AutomationCommandsPluggable(org.osgi.service.component.ComponentContext, org.openhab.core.automation.RuleRegistry, org.openhab.core.automation.type.ModuleTypeRegistry, org.openhab.core.automation.template.TemplateRegistry, org.openhab.core.automation.RuleManager)
    
      Attributes:
        NAME (java.lang.String): final static field
        DESCRIPTION (java.lang.String): final static field
    
    """
    NAME: typing.ClassVar[java.lang.String] = ...
    DESCRIPTION: typing.ClassVar[java.lang.String] = ...
    def __init__(self, componentContext: org.osgi.service.component.ComponentContext, ruleRegistry: org.openhab.core.automation.RuleRegistry, moduleTypeRegistry: org.openhab.core.automation.type.ModuleTypeRegistry, templateRegistry: org.openhab.core.automation.template.TemplateRegistry[org.openhab.core.automation.template.RuleTemplate], ruleManager: org.openhab.core.automation.RuleManager): ...
    def execute(self, args: typing.List[java.lang.String], console: org.openhab.core.io.console.Console) -> None: ...
    def getActions(self, locale: java.util.Locale) -> java.util.Collection[org.openhab.core.automation.type.ActionType]: ...
    def getCommand(self) -> java.lang.String: ...
    def getConditions(self, locale: java.util.Locale) -> java.util.Collection[org.openhab.core.automation.type.ConditionType]: ...
    def getDescription(self) -> java.lang.String: ...
    def getModuleType(self, typeUID: java.lang.String, locale: java.util.Locale) -> org.openhab.core.automation.type.ModuleType: ...
    def getRule(self, uid: java.lang.String) -> org.openhab.core.automation.Rule: ...
    def getRuleStatus(self, ruleUID: java.lang.String) -> org.openhab.core.automation.RuleStatus: ...
    def getRules(self) -> java.util.Collection[org.openhab.core.automation.Rule]: ...
    @typing.overload
    def getTemplate(self, templateUID: java.lang.String, locale: java.util.Locale) -> org.openhab.core.automation.template.RuleTemplate: ...
    @typing.overload
    def getTemplate(self, string: java.lang.String, locale: java.util.Locale) -> org.openhab.core.automation.template.Template: ...
    def getTemplates(self, locale: java.util.Locale) -> java.util.Collection[org.openhab.core.automation.template.RuleTemplate]: ...
    def getTriggers(self, locale: java.util.Locale) -> java.util.Collection[org.openhab.core.automation.type.TriggerType]: ...
    def getUsages(self) -> java.util.List[java.lang.String]: ...
    def removeRule(self, uid: java.lang.String) -> java.lang.String: ...
    def removeRules(self, ruleFilter: java.lang.String) -> java.lang.String: ...
    def setEnabled(self, uid: java.lang.String, isEnabled: bool) -> None: ...

class CommandlineModuleTypeProvider(AbstractCommandProvider[org.openhab.core.automation.type.ModuleType], org.openhab.core.automation.type.ModuleTypeProvider):
    """
    Java class 'org.openhab.core.automation.internal.commands.CommandlineModuleTypeProvider'
    
        Extends:
            org.openhab.core.automation.internal.commands.AbstractCommandProvider
    
        Interfaces:
            org.openhab.core.automation.type.ModuleTypeProvider
    
      Constructors:
        * CommandlineModuleTypeProvider(org.osgi.framework.BundleContext, org.openhab.core.automation.type.ModuleTypeRegistry)
    
    """
    def __init__(self, bundleContext: org.osgi.framework.BundleContext, moduleTypeRegistry: org.openhab.core.automation.type.ModuleTypeRegistry): ...
    def addProviderChangeListener(self, listener: org.openhab.core.common.registry.ProviderChangeListener[org.openhab.core.automation.type.ModuleType]) -> None: ...
    def addingService(self, reference: org.osgi.framework.ServiceReference) -> typing.Any: ...
    def close(self) -> None: ...
    def exportModuleTypes(self, parserType: java.lang.String, set: java.util.Set[org.openhab.core.automation.type.ModuleType], file: java.io.File) -> java.lang.String: ...
    def getAll(self) -> java.util.Collection[org.openhab.core.automation.type.ModuleType]: ...
    def getModuleType(self, UID: java.lang.String, locale: java.util.Locale) -> org.openhab.core.automation.type.ModuleType: ...
    def getModuleTypes(self, locale: java.util.Locale) -> java.util.Collection[org.openhab.core.automation.type.ModuleType]: ...
    def importModuleTypes(self, parserType: java.lang.String, url: java.net.URL) -> java.util.Set[org.openhab.core.automation.type.ModuleType]: ...
    def remove(self, url: java.net.URL) -> java.lang.String: ...
    def removeProviderChangeListener(self, listener: org.openhab.core.common.registry.ProviderChangeListener[org.openhab.core.automation.type.ModuleType]) -> None: ...

class CommandlineRuleImporter(AbstractCommandProvider[org.openhab.core.automation.Rule]):
    """
    Java class 'org.openhab.core.automation.internal.commands.CommandlineRuleImporter'
    
        Extends:
            org.openhab.core.automation.internal.commands.AbstractCommandProvider
    
      Constructors:
        * CommandlineRuleImporter(org.osgi.framework.BundleContext, org.openhab.core.automation.RuleRegistry)
    
    """
    def __init__(self, context: org.osgi.framework.BundleContext, ruleRegistry: org.openhab.core.automation.RuleRegistry): ...
    def addingService(self, reference: org.osgi.framework.ServiceReference) -> typing.Any: ...
    def exportRules(self, parserType: java.lang.String, set: java.util.Set[org.openhab.core.automation.Rule], file: java.io.File) -> java.lang.String: ...
    def importRules(self, parserType: java.lang.String, url: java.net.URL) -> java.util.Set[org.openhab.core.automation.Rule]: ...

class CommandlineTemplateProvider(AbstractCommandProvider[org.openhab.core.automation.template.RuleTemplate], org.openhab.core.automation.template.RuleTemplateProvider):
    """
    Java class 'org.openhab.core.automation.internal.commands.CommandlineTemplateProvider'
    
        Extends:
            org.openhab.core.automation.internal.commands.AbstractCommandProvider
    
        Interfaces:
            org.openhab.core.automation.template.RuleTemplateProvider
    
      Constructors:
        * CommandlineTemplateProvider(org.osgi.framework.BundleContext, org.openhab.core.automation.template.TemplateRegistry)
    
    """
    def __init__(self, bundleContext: org.osgi.framework.BundleContext, templateRegistry: org.openhab.core.automation.template.TemplateRegistry[org.openhab.core.automation.template.RuleTemplate]): ...
    def addProviderChangeListener(self, listener: org.openhab.core.common.registry.ProviderChangeListener[org.openhab.core.automation.template.RuleTemplate]) -> None: ...
    def addingService(self, reference: org.osgi.framework.ServiceReference) -> typing.Any: ...
    def close(self) -> None: ...
    def exportTemplates(self, parserType: java.lang.String, set: java.util.Set[org.openhab.core.automation.template.RuleTemplate], file: java.io.File) -> java.lang.String: ...
    def getAll(self) -> java.util.Collection[org.openhab.core.automation.template.RuleTemplate]: ...
    @typing.overload
    def getTemplate(self, UID: java.lang.String, locale: java.util.Locale) -> org.openhab.core.automation.template.RuleTemplate: ...
    @typing.overload
    def getTemplate(self, string: java.lang.String, locale: java.util.Locale) -> org.openhab.core.automation.template.Template: ...
    def getTemplates(self, locale: java.util.Locale) -> java.util.Collection[org.openhab.core.automation.template.RuleTemplate]: ...
    def importTemplates(self, parserType: java.lang.String, url: java.net.URL) -> java.util.Set[org.openhab.core.automation.template.RuleTemplate]: ...
    def remove(self, url: java.net.URL) -> java.lang.String: ...
    def removeProviderChangeListener(self, listener: org.openhab.core.common.registry.ProviderChangeListener[org.openhab.core.automation.template.RuleTemplate]) -> None: ...
