import java.lang
import java.util
import org.openhab.core.automation
import org.openhab.core.automation.events
import org.openhab.core.automation.handler
import org.openhab.core.automation.template
import org.openhab.core.automation.type
import org.openhab.core.common.registry
import org.openhab.core.config.core
import org.openhab.core.events
import org.openhab.core.service
import org.openhab.core.storage
import typing


class Connection(java.lang.Object):
    """
    Java class 'org.openhab.core.automation.internal.Connection'
    
        Extends:
            java.lang.Object
    
      Constructors:
        * Connection(java.lang.String, java.lang.String)
        * Connection(java.lang.String, java.lang.String, java.lang.String, java.lang.String)
    
    """
    @typing.overload
    def __init__(self, inputName: java.lang.String, reference: java.lang.String): ...
    @typing.overload
    def __init__(self, inputName: java.lang.String, outputModuleId: java.lang.String, outputName: java.lang.String, reference: java.lang.String): ...
    def equals(self, obj: typing.Any) -> bool: ...
    def getInputName(self) -> java.lang.String: ...
    def getOutputModuleId(self) -> java.lang.String: ...
    def getOutputName(self) -> java.lang.String: ...
    def getReference(self) -> java.lang.String: ...
    def hashCode(self) -> int: ...
    def toString(self) -> java.lang.String: ...

class ConnectionValidator(java.lang.Object):
    """
    Java class 'org.openhab.core.automation.internal.ConnectionValidator'
    
        Extends:
            java.lang.Object
    
      Constructors:
        * ConnectionValidator()
    
      Attributes:
        CONFIG_REFERENCE_PATTERN (java.lang.String): final static field
        OUTPUT_REFERENCE_PATTERN (java.lang.String): final static field
        MODULE_OUTPUT_PATTERN (java.lang.String): final static field
        CONNECTION_PATTERN (java.lang.String): final static field
    
    """
    CONFIG_REFERENCE_PATTERN: typing.ClassVar[java.lang.String] = ...
    OUTPUT_REFERENCE_PATTERN: typing.ClassVar[java.lang.String] = ...
    MODULE_OUTPUT_PATTERN: typing.ClassVar[java.lang.String] = ...
    CONNECTION_PATTERN: typing.ClassVar[java.lang.String] = ...
    def __init__(self): ...
    @classmethod
    def getConnections(cls, inputs: typing.Union[java.util.Map[java.lang.String, java.lang.String], typing.Mapping[java.lang.String, java.lang.String]]) -> java.util.Set[Connection]: ...
    @classmethod
    @typing.overload
    def validateConnections(cls, mtRegistry: org.openhab.core.automation.type.ModuleTypeRegistry, triggers: java.util.List[org.openhab.core.automation.Trigger], conditions: java.util.List[org.openhab.core.automation.Condition], actions: java.util.List[org.openhab.core.automation.Action]) -> None: ...
    @classmethod
    @typing.overload
    def validateConnections(cls, mtRegistry: org.openhab.core.automation.type.ModuleTypeRegistry, r: org.openhab.core.automation.Rule) -> None: ...

class ModuleImpl(org.openhab.core.automation.Module):
    """
    Java class 'org.openhab.core.automation.internal.ModuleImpl'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            org.openhab.core.automation.Module
    
      Constructors:
        * ModuleImpl(java.lang.String, java.lang.String, org.openhab.core.config.core.Configuration, java.lang.String, java.lang.String)
    
    """
    def __init__(self, id: java.lang.String, typeUID: java.lang.String, configuration: org.openhab.core.config.core.Configuration, label: java.lang.String, description: java.lang.String): ...
    def getConfiguration(self) -> org.openhab.core.config.core.Configuration: ...
    def getDescription(self) -> java.lang.String: ...
    def getId(self) -> java.lang.String: ...
    def getLabel(self) -> java.lang.String: ...
    def getTypeUID(self) -> java.lang.String: ...
    def setConfiguration(self, configuration: org.openhab.core.config.core.Configuration) -> None: ...
    def setDescription(self, description: java.lang.String) -> None: ...
    def setId(self, id: java.lang.String) -> None: ...
    def setLabel(self, label: java.lang.String) -> None: ...
    def setTypeUID(self, typeUID: java.lang.String) -> None: ...

class RuleEngineImpl(org.openhab.core.automation.RuleManager, org.openhab.core.common.registry.RegistryChangeListener[org.openhab.core.automation.type.ModuleType], org.openhab.core.service.ReadyService.ReadyTracker):
    """
    Java class 'org.openhab.core.automation.internal.RuleEngineImpl'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            org.openhab.core.automation.RuleManager,
            org.openhab.core.common.registry.RegistryChangeListener,
            org.openhab.core.service.ReadyService.ReadyTracker
    
      Constructors:
        * RuleEngineImpl(org.openhab.core.automation.type.ModuleTypeRegistry, org.openhab.core.automation.RuleRegistry, org.openhab.core.storage.StorageService, org.openhab.core.service.ReadyService)
    
      Attributes:
        OUTPUT_SEPARATOR (char): final static field
    
    """
    OUTPUT_SEPARATOR: typing.ClassVar[str] = ...
    def __init__(self, moduleTypeRegistry: org.openhab.core.automation.type.ModuleTypeRegistry, ruleRegistry: org.openhab.core.automation.RuleRegistry, storageService: org.openhab.core.storage.StorageService, readyService: org.openhab.core.service.ReadyService): ...
    @typing.overload
    def added(self, object: typing.Any) -> None: ...
    @typing.overload
    def added(self, moduleType: org.openhab.core.automation.type.ModuleType) -> None: ...
    def getModuleHandlerFactory(self, moduleTypeId: java.lang.String) -> org.openhab.core.automation.handler.ModuleHandlerFactory: ...
    def getStatus(self, ruleUID: java.lang.String) -> org.openhab.core.automation.RuleStatus: ...
    def getStatusInfo(self, ruleUID: java.lang.String) -> org.openhab.core.automation.RuleStatusInfo: ...
    def isEnabled(self, ruleUID: java.lang.String) -> bool: ...
    def isStarted(self) -> bool: ...
    def onReadyMarkerAdded(self, readyMarker: org.openhab.core.service.ReadyMarker) -> None: ...
    def onReadyMarkerRemoved(self, readyMarker: org.openhab.core.service.ReadyMarker) -> None: ...
    @typing.overload
    def removed(self, object: typing.Any) -> None: ...
    @typing.overload
    def removed(self, moduleType: org.openhab.core.automation.type.ModuleType) -> None: ...
    @typing.overload
    def runNow(self, ruleUID: java.lang.String) -> None: ...
    @typing.overload
    def runNow(self, ruleUID: java.lang.String, considerConditions: bool, context: typing.Union[java.util.Map[java.lang.String, typing.Any], typing.Mapping[java.lang.String, typing.Any]]) -> None: ...
    def setEnabled(self, uid: java.lang.String, enable: bool) -> None: ...
    def updateMapModuleTypeToRule(self, rUID: java.lang.String, moduleTypeId: java.lang.String) -> None: ...
    @typing.overload
    def updated(self, object: typing.Any, object2: typing.Any) -> None: ...
    @typing.overload
    def updated(self, oldElement: org.openhab.core.automation.type.ModuleType, moduleType: org.openhab.core.automation.type.ModuleType) -> None: ...

class RuleEventFactory(org.openhab.core.events.AbstractEventFactory):
    """
    Java class 'org.openhab.core.automation.internal.RuleEventFactory'
    
        Extends:
            org.openhab.core.events.AbstractEventFactory
    
      Constructors:
        * RuleEventFactory()
    
    """
    def __init__(self): ...
    @classmethod
    def createRuleAddedEvent(cls, rule: org.openhab.core.automation.Rule, source: java.lang.String) -> org.openhab.core.automation.events.RuleAddedEvent: ...
    @classmethod
    def createRuleRemovedEvent(cls, rule: org.openhab.core.automation.Rule, source: java.lang.String) -> org.openhab.core.automation.events.RuleRemovedEvent: ...
    @classmethod
    def createRuleStatusInfoEvent(cls, statusInfo: org.openhab.core.automation.RuleStatusInfo, ruleUID: java.lang.String, source: java.lang.String) -> org.openhab.core.automation.events.RuleStatusInfoEvent: ...
    @classmethod
    def createRuleUpdatedEvent(cls, rule: org.openhab.core.automation.Rule, oldRule: org.openhab.core.automation.Rule, source: java.lang.String) -> org.openhab.core.automation.events.RuleUpdatedEvent: ...

class RuleImpl(org.openhab.core.automation.Rule):
    """
    Java class 'org.openhab.core.automation.internal.RuleImpl'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            org.openhab.core.automation.Rule
    
      Constructors:
        * RuleImpl(java.lang.String)
        * RuleImpl(java.lang.String, java.lang.String, java.lang.String, java.util.Set, java.util.List, java.util.List, java.util.List, java.util.List, org.openhab.core.config.core.Configuration, java.lang.String, org.openhab.core.automation.Visibility)
    
    """
    @typing.overload
    def __init__(self, uid: java.lang.String): ...
    @typing.overload
    def __init__(self, uid: java.lang.String, name: java.lang.String, description: java.lang.String, tags: java.util.Set[java.lang.String], triggers: java.util.List[org.openhab.core.automation.Trigger], conditions: java.util.List[org.openhab.core.automation.Condition], actions: java.util.List[org.openhab.core.automation.Action], configDescriptions: java.util.List[org.openhab.core.config.core.ConfigDescriptionParameter], configuration: org.openhab.core.config.core.Configuration, templateUID: java.lang.String, visibility: org.openhab.core.automation.Visibility): ...
    def equals(self, obj: typing.Any) -> bool: ...
    def getActions(self) -> java.util.List[org.openhab.core.automation.Action]: ...
    def getConditions(self) -> java.util.List[org.openhab.core.automation.Condition]: ...
    def getConfiguration(self) -> org.openhab.core.config.core.Configuration: ...
    def getConfigurationDescriptions(self) -> java.util.List[org.openhab.core.config.core.ConfigDescriptionParameter]: ...
    def getDescription(self) -> java.lang.String: ...
    def getModules(self) -> java.util.List[org.openhab.core.automation.Module]: ...
    def getName(self) -> java.lang.String: ...
    def getTags(self) -> java.util.Set[java.lang.String]: ...
    def getTemplateUID(self) -> java.lang.String: ...
    def getTriggers(self) -> java.util.List[org.openhab.core.automation.Trigger]: ...
    @typing.overload
    def getUID(self) -> typing.Any: ...
    @typing.overload
    def getUID(self) -> java.lang.String: ...
    def getVisibility(self) -> org.openhab.core.automation.Visibility: ...
    def hashCode(self) -> int: ...
    def setActions(self, actions: java.util.List[org.openhab.core.automation.Action]) -> None: ...
    def setConditions(self, conditions: java.util.List[org.openhab.core.automation.Condition]) -> None: ...
    def setConfiguration(self, ruleConfiguration: org.openhab.core.config.core.Configuration) -> None: ...
    def setConfigurationDescriptions(self, configDescriptions: java.util.List[org.openhab.core.config.core.ConfigDescriptionParameter]) -> None: ...
    def setDescription(self, ruleDescription: java.lang.String) -> None: ...
    def setName(self, ruleName: java.lang.String) -> None: ...
    def setTags(self, ruleTags: java.util.Set[java.lang.String]) -> None: ...
    def setTemplateUID(self, templateUID: java.lang.String) -> None: ...
    def setTriggers(self, triggers: java.util.List[org.openhab.core.automation.Trigger]) -> None: ...
    def setVisibility(self, visibility: org.openhab.core.automation.Visibility) -> None: ...

class RuleRegistryImpl(org.openhab.core.common.registry.AbstractRegistry[org.openhab.core.automation.Rule, java.lang.String, org.openhab.core.automation.RuleProvider], org.openhab.core.automation.RuleRegistry, org.openhab.core.common.registry.RegistryChangeListener[org.openhab.core.automation.template.RuleTemplate]):
    """
    Java class 'org.openhab.core.automation.internal.RuleRegistryImpl'
    
        Extends:
            org.openhab.core.common.registry.AbstractRegistry
    
        Interfaces:
            org.openhab.core.automation.RuleRegistry,
            org.openhab.core.common.registry.RegistryChangeListener
    
      Constructors:
        * RuleRegistryImpl()
    
    """
    def __init__(self): ...
    @typing.overload
    def add(self, rule: org.openhab.core.automation.Rule) -> org.openhab.core.automation.Rule: ...
    @typing.overload
    def add(self, identifiable: org.openhab.core.common.registry.Identifiable) -> org.openhab.core.common.registry.Identifiable: ...
    @typing.overload
    def added(self, object: typing.Any) -> None: ...
    @typing.overload
    def added(self, element: org.openhab.core.automation.template.RuleTemplate) -> None: ...
    @typing.overload
    def added(self, provider: org.openhab.core.common.registry.Provider[org.openhab.core.automation.Rule], element: org.openhab.core.automation.Rule) -> None: ...
    @typing.overload
    def added(self, provider: org.openhab.core.common.registry.Provider, identifiable: org.openhab.core.common.registry.Identifiable) -> None: ...
    @typing.overload
    def added(self, provider: org.openhab.core.common.registry.Provider, object: typing.Any) -> None: ...
    def getByTag(self, tag: java.lang.String) -> java.util.Collection[org.openhab.core.automation.Rule]: ...
    def getByTags(self, tags: typing.List[java.lang.String]) -> java.util.Collection[org.openhab.core.automation.Rule]: ...
    @typing.overload
    def removed(self, object: typing.Any) -> None: ...
    @typing.overload
    def removed(self, element: org.openhab.core.automation.template.RuleTemplate) -> None: ...
    @typing.overload
    def removed(self, provider: org.openhab.core.common.registry.Provider, object: typing.Any) -> None: ...
    @typing.overload
    def removed(self, provider: org.openhab.core.common.registry.Provider[org.openhab.core.common.registry.Identifiable], element: org.openhab.core.common.registry.Identifiable) -> None: ...
    @typing.overload
    def updated(self, object: typing.Any, object2: typing.Any) -> None: ...
    @typing.overload
    def updated(self, oldElement: org.openhab.core.automation.template.RuleTemplate, element: org.openhab.core.automation.template.RuleTemplate) -> None: ...
    @typing.overload
    def updated(self, provider: org.openhab.core.common.registry.Provider[org.openhab.core.automation.Rule], oldElement: org.openhab.core.automation.Rule, element: org.openhab.core.automation.Rule) -> None: ...
    @typing.overload
    def updated(self, provider: org.openhab.core.common.registry.Provider, identifiable: org.openhab.core.common.registry.Identifiable, identifiable2: org.openhab.core.common.registry.Identifiable) -> None: ...
    @typing.overload
    def updated(self, provider: org.openhab.core.common.registry.Provider, object: typing.Any, object2: typing.Any) -> None: ...

class TriggerHandlerCallbackImpl(org.openhab.core.automation.handler.TriggerHandlerCallback):
    """
    Java class 'org.openhab.core.automation.internal.TriggerHandlerCallbackImpl'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            org.openhab.core.automation.handler.TriggerHandlerCallback
    
    """
    def dispose(self) -> None: ...
    def getStatus(self, ruleUID: java.lang.String) -> org.openhab.core.automation.RuleStatus: ...
    def getStatusInfo(self, ruleUID: java.lang.String) -> org.openhab.core.automation.RuleStatusInfo: ...
    def isEnabled(self, ruleUID: java.lang.String) -> bool: ...
    def isRunning(self) -> bool: ...
    @typing.overload
    def runNow(self, uid: java.lang.String) -> None: ...
    @typing.overload
    def runNow(self, uid: java.lang.String, considerConditions: bool, context: typing.Union[java.util.Map[java.lang.String, typing.Any], typing.Mapping[java.lang.String, typing.Any]]) -> None: ...
    def setEnabled(self, uid: java.lang.String, isEnabled: bool) -> None: ...
    def triggered(self, trigger: org.openhab.core.automation.Trigger, outputs: typing.Union[java.util.Map[java.lang.String, typing.Any], typing.Mapping[java.lang.String, typing.Any]]) -> None: ...

class ActionImpl(ModuleImpl, org.openhab.core.automation.Action):
    """
    Java class 'org.openhab.core.automation.internal.ActionImpl'
    
        Extends:
            org.openhab.core.automation.internal.ModuleImpl
    
        Interfaces:
            org.openhab.core.automation.Action
    
      Constructors:
        * ActionImpl(java.lang.String, java.lang.String, org.openhab.core.config.core.Configuration, java.lang.String, java.lang.String, java.util.Map)
    
    """
    def __init__(self, UID: java.lang.String, typeUID: java.lang.String, configuration: org.openhab.core.config.core.Configuration, label: java.lang.String, description: java.lang.String, inputs: typing.Union[java.util.Map[java.lang.String, java.lang.String], typing.Mapping[java.lang.String, java.lang.String]]): ...
    def getInputs(self) -> java.util.Map[java.lang.String, java.lang.String]: ...

class ConditionImpl(ModuleImpl, org.openhab.core.automation.Condition):
    """
    Java class 'org.openhab.core.automation.internal.ConditionImpl'
    
        Extends:
            org.openhab.core.automation.internal.ModuleImpl
    
        Interfaces:
            org.openhab.core.automation.Condition
    
      Constructors:
        * ConditionImpl(java.lang.String, java.lang.String, org.openhab.core.config.core.Configuration, java.lang.String, java.lang.String, java.util.Map)
    
    """
    def __init__(self, id: java.lang.String, typeUID: java.lang.String, configuration: org.openhab.core.config.core.Configuration, label: java.lang.String, description: java.lang.String, inputs: typing.Union[java.util.Map[java.lang.String, java.lang.String], typing.Mapping[java.lang.String, java.lang.String]]): ...
    def getInputs(self) -> java.util.Map[java.lang.String, java.lang.String]: ...

class TriggerImpl(ModuleImpl, org.openhab.core.automation.Trigger):
    """
    Java class 'org.openhab.core.automation.internal.TriggerImpl'
    
        Extends:
            org.openhab.core.automation.internal.ModuleImpl
    
        Interfaces:
            org.openhab.core.automation.Trigger
    
      Constructors:
        * TriggerImpl(java.lang.String, java.lang.String, org.openhab.core.config.core.Configuration, java.lang.String, java.lang.String)
    
    """
    def __init__(self, id: java.lang.String, typeUID: java.lang.String, configuration: org.openhab.core.config.core.Configuration, label: java.lang.String, description: java.lang.String): ...
