import java.lang
import java.util
import org.openhab.core.automation
import org.openhab.core.automation.module.script
import org.openhab.core.events
import org.openhab.core.items
import org.openhab.core.thing
import org.openhab.core.thing.binding
import org.openhab.core.types
import typing


class DefaultScriptScopeProvider(org.openhab.core.automation.module.script.ScriptExtensionProvider):
    """
    Java class 'org.openhab.core.automation.module.script.internal.defaultscope.DefaultScriptScopeProvider'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            org.openhab.core.automation.module.script.ScriptExtensionProvi
            der
    
      Constructors:
        * DefaultScriptScopeProvider(org.openhab.core.items.ItemRegistry, org.openhab.core.thing.ThingRegistry, org.openhab.core.automation.RuleRegistry, org.openhab.core.events.EventPublisher)
    
    """
    def __init__(self, itemRegistry: org.openhab.core.items.ItemRegistry, thingRegistry: org.openhab.core.thing.ThingRegistry, ruleRegistry: org.openhab.core.automation.RuleRegistry, eventPublisher: org.openhab.core.events.EventPublisher): ...
    def get(self, scriptIdentifier: java.lang.String, type: java.lang.String) -> typing.Any: ...
    def getDefaultPresets(self) -> java.util.Collection[java.lang.String]: ...
    def getPresets(self) -> java.util.Collection[java.lang.String]: ...
    def getTypes(self) -> java.util.Collection[java.lang.String]: ...
    def importPreset(self, scriptIdentifier: java.lang.String, preset: java.lang.String) -> java.util.Map[java.lang.String, typing.Any]: ...
    def unload(self, scriptIdentifier: java.lang.String) -> None: ...

class ItemRegistryDelegate(java.util.Map[java.lang.String, org.openhab.core.types.State]):
    """
    Java class 'org.openhab.core.automation.module.script.internal.defaultscope.ItemRegistryDelegate'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            java.util.Map
    
      Constructors:
        * ItemRegistryDelegate(org.openhab.core.items.ItemRegistry)
    
    """
    def __init__(self, itemRegistry: org.openhab.core.items.ItemRegistry): ...
    def clear(self) -> None: ...
    def containsKey(self, key: typing.Any) -> bool: ...
    def containsValue(self, value: typing.Any) -> bool: ...
    def entrySet(self) -> java.util.Set[java.util.Map.Entry[java.lang.String, org.openhab.core.types.State]]: ...
    @typing.overload
    def get(self, object: typing.Any) -> typing.Any: ...
    @typing.overload
    def get(self, key: typing.Any) -> org.openhab.core.types.State: ...
    def isEmpty(self) -> bool: ...
    def keySet(self) -> java.util.Set[java.lang.String]: ...
    @typing.overload
    def put(self, object: typing.Any, object2: typing.Any) -> typing.Any: ...
    @typing.overload
    def put(self, key: java.lang.String, value: org.openhab.core.types.State) -> org.openhab.core.types.State: ...
    def putAll(self, m: typing.Union[java.util.Map[java.lang.String, org.openhab.core.types.State], typing.Mapping[java.lang.String, org.openhab.core.types.State]]) -> None: ...
    @typing.overload
    def remove(self, object: typing.Any, object2: typing.Any) -> bool: ...
    @typing.overload
    def remove(self, object: typing.Any) -> typing.Any: ...
    @typing.overload
    def remove(self, key: typing.Any) -> org.openhab.core.types.State: ...
    def size(self) -> int: ...
    def values(self) -> java.util.Collection[org.openhab.core.types.State]: ...

class LifecycleScriptExtensionProvider(org.openhab.core.automation.module.script.ScriptExtensionProvider):
    """
    Java class 'org.openhab.core.automation.module.script.internal.defaultscope.LifecycleScriptExtensionProvider'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            org.openhab.core.automation.module.script.ScriptExtensionProvi
            der
    
      Constructors:
        * LifecycleScriptExtensionProvider()
    
    """
    def __init__(self): ...
    def get(self, scriptIdentifier: java.lang.String, type: java.lang.String) -> typing.Any: ...
    def getDefaultPresets(self) -> java.util.Collection[java.lang.String]: ...
    def getPresets(self) -> java.util.Collection[java.lang.String]: ...
    def getTypes(self) -> java.util.Collection[java.lang.String]: ...
    def importPreset(self, scriptIdentifier: java.lang.String, preset: java.lang.String) -> java.util.Map[java.lang.String, typing.Any]: ...
    def unload(self, scriptIdentifier: java.lang.String) -> None: ...
    class LifecycleTracker(java.lang.Object):
        """
        Java class 'org.openhab.core.automation.module.script.internal.defaultscope.LifecycleScriptExtensionProvider$LifecycleTracker'
        
            Extends:
                java.lang.Object
        
          Constructors:
            * LifecycleTracker()
        
        """
        def __init__(self): ...
        def addDisposeHook(self, disposable: 'LifecycleScriptExtensionProvider.Disposable') -> None: ...
    class Disposable: ...

class ScriptBusEvent(java.lang.Object):
    """
    Java class 'org.openhab.core.automation.module.script.internal.defaultscope.ScriptBusEvent'
    
        Extends:
            java.lang.Object
    
    """
    def dispose(self) -> None: ...
    @typing.overload
    def postUpdate(self, itemName: java.lang.String, stateString: java.lang.String) -> typing.Any: ...
    @typing.overload
    def postUpdate(self, item: org.openhab.core.items.Item, state: java.lang.Number) -> typing.Any: ...
    @typing.overload
    def postUpdate(self, item: org.openhab.core.items.Item, stateAsString: java.lang.String) -> typing.Any: ...
    @typing.overload
    def postUpdate(self, item: org.openhab.core.items.Item, state: org.openhab.core.types.State) -> typing.Any: ...
    def restoreStates(self, statesMap: typing.Union[java.util.Map[org.openhab.core.items.Item, org.openhab.core.types.State], typing.Mapping[org.openhab.core.items.Item, org.openhab.core.types.State]]) -> typing.Any: ...
    @typing.overload
    def sendCommand(self, itemName: java.lang.String, commandString: java.lang.String) -> typing.Any: ...
    @typing.overload
    def sendCommand(self, item: org.openhab.core.items.Item, number: java.lang.Number) -> typing.Any: ...
    @typing.overload
    def sendCommand(self, item: org.openhab.core.items.Item, commandString: java.lang.String) -> typing.Any: ...
    @typing.overload
    def sendCommand(self, item: org.openhab.core.items.Item, command: org.openhab.core.types.Command) -> typing.Any: ...
    def storeStates(self, items: typing.List[org.openhab.core.items.Item]) -> java.util.Map[org.openhab.core.items.Item, org.openhab.core.types.State]: ...

class ScriptThingActions(java.lang.Object):
    """
    Java class 'org.openhab.core.automation.module.script.internal.defaultscope.ScriptThingActions'
    
        Extends:
            java.lang.Object
    
    """
    def dispose(self) -> None: ...
    def get(self, scope: java.lang.String, thingUid: java.lang.String) -> org.openhab.core.thing.binding.ThingActions: ...
