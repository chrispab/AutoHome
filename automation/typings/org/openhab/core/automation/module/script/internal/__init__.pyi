import java.io
import java.lang
import java.util
import javax.script
import org.openhab.core.automation.module.script
import typing


class GenericScriptEngineFactory(org.openhab.core.automation.module.script.AbstractScriptEngineFactory):
    """
    Java class 'org.openhab.core.automation.module.script.internal.GenericScriptEngineFactory'
    
        Extends:
            org.openhab.core.automation.module.script.AbstractScriptEngineFactory
    
      Constructors:
        * GenericScriptEngineFactory()
    
    """
    def __init__(self): ...

class NashornScriptEngineFactory(org.openhab.core.automation.module.script.AbstractScriptEngineFactory):
    """
    Java class 'org.openhab.core.automation.module.script.internal.NashornScriptEngineFactory'
    
        Extends:
            org.openhab.core.automation.module.script.AbstractScriptEngineFactory
    
      Constructors:
        * NashornScriptEngineFactory()
    
    """
    def __init__(self): ...
    def createScriptEngine(self, scriptType: java.lang.String) -> javax.script.ScriptEngine: ...
    def getScriptTypes(self) -> java.util.List[java.lang.String]: ...
    def scopeValues(self, scriptEngine: javax.script.ScriptEngine, scopeValues: typing.Union[java.util.Map[java.lang.String, typing.Any], typing.Mapping[java.lang.String, typing.Any]]) -> None: ...

class ScriptEngineManagerImpl(org.openhab.core.automation.module.script.ScriptEngineManager):
    """
    Java class 'org.openhab.core.automation.module.script.internal.ScriptEngineManagerImpl'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            org.openhab.core.automation.module.script.ScriptEngineManager
    
      Constructors:
        * ScriptEngineManagerImpl(org.openhab.core.automation.module.script.internal.ScriptExtensionManager)
    
    """
    def __init__(self, scriptExtensionManager: 'ScriptExtensionManager'): ...
    def addScriptEngineFactory(self, engineFactory: org.openhab.core.automation.module.script.ScriptEngineFactory) -> None: ...
    def createScriptEngine(self, scriptType: java.lang.String, engineIdentifier: java.lang.String) -> org.openhab.core.automation.module.script.ScriptEngineContainer: ...
    def isSupported(self, scriptType: java.lang.String) -> bool: ...
    def loadScript(self, engineIdentifier: java.lang.String, scriptData: java.io.InputStreamReader) -> None: ...
    def removeEngine(self, engineIdentifier: java.lang.String) -> None: ...
    def removeScriptEngineFactory(self, engineFactory: org.openhab.core.automation.module.script.ScriptEngineFactory) -> None: ...

class ScriptExtensionManager(org.openhab.core.automation.module.script.ScriptExtensionAccessor):
    """
    Java class 'org.openhab.core.automation.module.script.internal.ScriptExtensionManager'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            org.openhab.core.automation.module.script.ScriptExtensionAcces
            sor
    
      Constructors:
        * ScriptExtensionManager()
    
    """
    def __init__(self): ...
    def addExtension(self, provider: org.openhab.core.automation.module.script.ScriptExtensionProvider) -> None: ...
    def addScriptExtensionProvider(self, provider: org.openhab.core.automation.module.script.ScriptExtensionProvider) -> None: ...
    def dispose(self, scriptIdentifier: java.lang.String) -> None: ...
    def findDefaultPresets(self, scriptIdentifier: java.lang.String) -> java.util.Map[java.lang.String, typing.Any]: ...
    def findPreset(self, preset: java.lang.String, scriptIdentifier: java.lang.String) -> java.util.Map[java.lang.String, typing.Any]: ...
    def get(self, type: java.lang.String, scriptIdentifier: java.lang.String) -> typing.Any: ...
    def getDefaultPresets(self) -> java.util.List[java.lang.String]: ...
    def getPresets(self) -> java.util.List[java.lang.String]: ...
    def getTypes(self) -> java.util.List[java.lang.String]: ...
    def importDefaultPresets(self, engineProvider: org.openhab.core.automation.module.script.ScriptEngineFactory, scriptEngine: javax.script.ScriptEngine, scriptIdentifier: java.lang.String) -> None: ...
    def importPreset(self, preset: java.lang.String, engineProvider: org.openhab.core.automation.module.script.ScriptEngineFactory, scriptEngine: javax.script.ScriptEngine, scriptIdentifier: java.lang.String) -> java.util.Map[java.lang.String, typing.Any]: ...
    def removeExtension(self, provider: org.openhab.core.automation.module.script.ScriptExtensionProvider) -> None: ...
    def removeScriptExtensionProvider(self, provider: org.openhab.core.automation.module.script.ScriptExtensionProvider) -> None: ...

class ScriptExtensionManagerWrapper(java.lang.Object):
    """
    Java class 'org.openhab.core.automation.module.script.internal.ScriptExtensionManagerWrapper'
    
        Extends:
            java.lang.Object
    
      Constructors:
        * ScriptExtensionManagerWrapper(org.openhab.core.automation.module.script.internal.ScriptExtensionManager, org.openhab.core.automation.module.script.ScriptEngineContainer)
    
    """
    def __init__(self, manager: ScriptExtensionManager, container: org.openhab.core.automation.module.script.ScriptEngineContainer): ...
    def addScriptExtensionProvider(self, provider: org.openhab.core.automation.module.script.ScriptExtensionProvider) -> None: ...
    def get(self, type: java.lang.String) -> typing.Any: ...
    def getDefaultPresets(self) -> java.util.List[java.lang.String]: ...
    def getPresets(self) -> java.util.List[java.lang.String]: ...
    def getTypes(self) -> java.util.List[java.lang.String]: ...
    def importPreset(self, preset: java.lang.String) -> java.util.Map[java.lang.String, typing.Any]: ...
    def removeScriptExtensionProvider(self, provider: org.openhab.core.automation.module.script.ScriptExtensionProvider) -> None: ...
