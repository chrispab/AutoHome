import java.lang
import java.util
import java.util.stream
import org.openhab.core.automation
import org.openhab.core.automation.module.script.rulesupport.internal
import org.openhab.core.automation.module.script.rulesupport.shared.simple
import org.openhab.core.automation.type
import org.openhab.core.common.registry
import typing


class RuleSupportRuleRegistryDelegate(org.openhab.core.automation.RuleRegistry):
    """
    Java class 'org.openhab.core.automation.module.script.rulesupport.shared.RuleSupportRuleRegistryDelegate'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            org.openhab.core.automation.RuleRegistry
    
      Constructors:
        * RuleSupportRuleRegistryDelegate(org.openhab.core.automation.RuleRegistry, org.openhab.core.automation.module.script.rulesupport.shared.ScriptedRuleProvider)
    
    """
    def __init__(self, ruleRegistry: org.openhab.core.automation.RuleRegistry, ruleProvider: 'ScriptedRuleProvider'): ...
    @typing.overload
    def add(self, element: org.openhab.core.automation.Rule) -> org.openhab.core.automation.Rule: ...
    @typing.overload
    def add(self, identifiable: org.openhab.core.common.registry.Identifiable) -> org.openhab.core.common.registry.Identifiable: ...
    def addPermanent(self, element: org.openhab.core.automation.Rule) -> None: ...
    def addRegistryChangeListener(self, listener: org.openhab.core.common.registry.RegistryChangeListener[org.openhab.core.automation.Rule]) -> None: ...
    @typing.overload
    def get(self, key: java.lang.String) -> org.openhab.core.automation.Rule: ...
    @typing.overload
    def get(self, object: typing.Any) -> org.openhab.core.common.registry.Identifiable: ...
    def getAll(self) -> java.util.Collection[org.openhab.core.automation.Rule]: ...
    def getByTag(self, tag: java.lang.String) -> java.util.Collection[org.openhab.core.automation.Rule]: ...
    def getByTags(self, tags: typing.List[java.lang.String]) -> java.util.Collection[org.openhab.core.automation.Rule]: ...
    @typing.overload
    def remove(self, key: java.lang.String) -> org.openhab.core.automation.Rule: ...
    @typing.overload
    def remove(self, object: typing.Any) -> org.openhab.core.common.registry.Identifiable: ...
    def removeAllAddedByScript(self) -> None: ...
    def removeRegistryChangeListener(self, listener: org.openhab.core.common.registry.RegistryChangeListener[org.openhab.core.automation.Rule]) -> None: ...
    def stream(self) -> java.util.stream.Stream[org.openhab.core.automation.Rule]: ...
    @typing.overload
    def update(self, element: org.openhab.core.automation.Rule) -> org.openhab.core.automation.Rule: ...
    @typing.overload
    def update(self, identifiable: org.openhab.core.common.registry.Identifiable) -> org.openhab.core.common.registry.Identifiable: ...

class ScriptedAutomationManager(java.lang.Object):
    """
    Java class 'org.openhab.core.automation.module.script.rulesupport.shared.ScriptedAutomationManager'
    
        Extends:
            java.lang.Object
    
      Constructors:
        * ScriptedAutomationManager(org.openhab.core.automation.module.script.rulesupport.shared.RuleSupportRuleRegistryDelegate, org.openhab.core.automation.module.script.rulesupport.internal.ScriptedCustomModuleHandlerFactory, org.openhab.core.automation.module.script.rulesupport.internal.ScriptedCustomModuleTypeProvider, org.openhab.core.automation.module.script.rulesupport.internal.ScriptedPrivateModuleHandlerFactory)
    
    """
    def __init__(self, ruleRegistryDelegate: RuleSupportRuleRegistryDelegate, scriptedCustomModuleHandlerFactory: org.openhab.core.automation.module.script.rulesupport.internal.ScriptedCustomModuleHandlerFactory, scriptedCustomModuleTypeProvider: org.openhab.core.automation.module.script.rulesupport.internal.ScriptedCustomModuleTypeProvider, scriptedPrivateModuleHandlerFactory: org.openhab.core.automation.module.script.rulesupport.internal.ScriptedPrivateModuleHandlerFactory): ...
    def addActionHandler(self, uid: java.lang.String, actionHandler: 'ScriptedHandler') -> None: ...
    def addActionType(self, actionType: org.openhab.core.automation.type.ActionType) -> None: ...
    def addConditionHandler(self, uid: java.lang.String, conditionHandler: 'ScriptedHandler') -> None: ...
    def addConditionType(self, condititonType: org.openhab.core.automation.type.ConditionType) -> None: ...
    def addPrivateActionHandler(self, actionHandler: org.openhab.core.automation.module.script.rulesupport.shared.simple.SimpleActionHandler) -> java.lang.String: ...
    def addPrivateConditionHandler(self, conditionHandler: org.openhab.core.automation.module.script.rulesupport.shared.simple.SimpleConditionHandler) -> java.lang.String: ...
    def addPrivateTriggerHandler(self, triggerHandler: org.openhab.core.automation.module.script.rulesupport.shared.simple.SimpleTriggerHandler) -> java.lang.String: ...
    def addRule(self, element: org.openhab.core.automation.Rule) -> org.openhab.core.automation.Rule: ...
    def addTriggerHandler(self, uid: java.lang.String, triggerHandler: 'ScriptedHandler') -> None: ...
    def addTriggerType(self, triggerType: org.openhab.core.automation.type.TriggerType) -> None: ...
    def removeAll(self) -> None: ...
    def removeHandler(self, typeUID: java.lang.String) -> None: ...
    def removeModuleType(self, UID: java.lang.String) -> None: ...
    def removePrivateHandler(self, privId: java.lang.String) -> None: ...

class ScriptedHandler(java.lang.Object):
    """
    public interface ScriptedHandler
    
        Empty interface to identify scripted handlers
    
    
    """

class ScriptedRuleProvider(org.openhab.core.automation.RuleProvider):
    """
    Java class 'org.openhab.core.automation.module.script.rulesupport.shared.ScriptedRuleProvider'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            org.openhab.core.automation.RuleProvider
    
      Constructors:
        * ScriptedRuleProvider()
    
    """
    def __init__(self): ...
    def addProviderChangeListener(self, listener: org.openhab.core.common.registry.ProviderChangeListener[org.openhab.core.automation.Rule]) -> None: ...
    def addRule(self, rule: org.openhab.core.automation.Rule) -> None: ...
    def getAll(self) -> java.util.Collection[org.openhab.core.automation.Rule]: ...
    def removeProviderChangeListener(self, listener: org.openhab.core.common.registry.ProviderChangeListener[org.openhab.core.automation.Rule]) -> None: ...
    @typing.overload
    def removeRule(self, ruleUID: java.lang.String) -> None: ...
    @typing.overload
    def removeRule(self, rule: org.openhab.core.automation.Rule) -> None: ...
