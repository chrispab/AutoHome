import java.lang
import java.lang.reflect
import java.util
import org
import org.openhab.core.automation
import org.openhab.core.automation.type
import typing


class ActionModuleKind(java.lang.Enum[org.openhab.core.automation.module.provider.ActionModuleKind]):
    """
    Java class 'org.openhab.core.automation.module.provider.ActionModuleKind'
    
        Extends:
            java.lang.Enum
    
      Attributes:
        SINGLE (org.openhab.core.automation.module.provider.ActionModuleKind): final static enum constant
        SERVICE (org.openhab.core.automation.module.provider.ActionModuleKind): final static enum constant
        THING (org.openhab.core.automation.module.provider.ActionModuleKind): final static enum constant
    
    """
    SINGLE: typing.ClassVar['ActionModuleKind'] = ...
    SERVICE: typing.ClassVar['ActionModuleKind'] = ...
    THING: typing.ClassVar['ActionModuleKind'] = ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @classmethod
    @typing.overload
    def valueOf(cls, class_: typing.Type[_valueOf_0__T], string: java.lang.String) -> _valueOf_0__T: ...
    @classmethod
    @typing.overload
    def valueOf(cls, name: java.lang.String) -> 'ActionModuleKind': ...
    @classmethod
    def values(cls) -> typing.List['ActionModuleKind']: ...

class AnnotationActionModuleTypeHelper(java.lang.Object):
    """
    Java class 'org.openhab.core.automation.module.provider.AnnotationActionModuleTypeHelper'
    
        Extends:
            java.lang.Object
    
      Constructors:
        * AnnotationActionModuleTypeHelper()
    
      Attributes:
        CONFIG_PARAM (java.lang.String): final static field
    
    """
    CONFIG_PARAM: typing.ClassVar[java.lang.String] = ...
    def __init__(self): ...
    def buildModuleType(self, UID: java.lang.String, moduleInformation: typing.Union[java.util.Map[java.lang.String, java.util.Set['ModuleInformation']], typing.Mapping[java.lang.String, java.util.Set['ModuleInformation']]]) -> org.openhab.core.automation.type.ActionType: ...
    def getModuleInformationForIdentifier(self, module: org.openhab.core.automation.Action, moduleInformation: typing.Union[java.util.Map[java.lang.String, java.util.Set['ModuleInformation']], typing.Mapping[java.lang.String, java.util.Set['ModuleInformation']]], isThing: bool) -> 'ModuleInformation': ...
    @typing.overload
    def parseAnnotations(self, actionProvider: typing.Any) -> java.util.Collection['ModuleInformation']: ...
    @typing.overload
    def parseAnnotations(self, name: java.lang.String, actionProvider: typing.Any) -> java.util.Collection['ModuleInformation']: ...

class ModuleInformation(java.lang.Object):
    """
    Java class 'org.openhab.core.automation.module.provider.ModuleInformation'
    
        Extends:
            java.lang.Object
    
      Constructors:
        * ModuleInformation(java.lang.String, java.lang.Object, java.lang.reflect.Method)
    
    """
    def __init__(self, uid: java.lang.String, actionProvider: typing.Any, m: java.lang.reflect.Method): ...
    def equals(self, obj: typing.Any) -> bool: ...
    def getActionProvider(self) -> typing.Any: ...
    def getConfigName(self) -> java.lang.String: ...
    def getDescription(self) -> java.lang.String: ...
    def getInputs(self) -> java.util.List[org.openhab.core.automation.type.Input]: ...
    def getLabel(self) -> java.lang.String: ...
    def getMethod(self) -> java.lang.reflect.Method: ...
    def getOutputs(self) -> java.util.List[org.openhab.core.automation.type.Output]: ...
    def getTags(self) -> java.util.Set[java.lang.String]: ...
    def getThingUID(self) -> java.lang.String: ...
    def getUID(self) -> java.lang.String: ...
    def getVisibility(self) -> org.openhab.core.automation.Visibility: ...
    def hashCode(self) -> int: ...
    def setConfigName(self, configName: java.lang.String) -> None: ...
    def setDescription(self, description: java.lang.String) -> None: ...
    def setInputs(self, inputs: java.util.List[org.openhab.core.automation.type.Input]) -> None: ...
    def setLabel(self, label: java.lang.String) -> None: ...
    def setOutputs(self, outputs: java.util.List[org.openhab.core.automation.type.Output]) -> None: ...
    def setTags(self, tags: java.util.Set[java.lang.String]) -> None: ...
    def setThingUID(self, thingUID: java.lang.String) -> None: ...
    def setVisibility(self, visibility: org.openhab.core.automation.Visibility) -> None: ...
