import com.google.gson
import java.io
import java.lang
import java.time
import typing


class AccessTokenRefreshListener(java.lang.Object):
    """
    @NonNullByDefault public interface AccessTokenRefreshListener
    
        Handler to act up on changes of the access token.
    
    
    """
    def onAccessTokenResponse(self, tokenResponse: 'AccessTokenResponse') -> None: ...

class AccessTokenResponse(java.io.Serializable, java.lang.Cloneable):
    """
    Java class 'org.openhab.core.auth.client.oauth2.AccessTokenResponse'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            java.io.Serializable, java.lang.Cloneable
    
      Constructors:
        * AccessTokenResponse()
    
    """
    def __init__(self): ...
    def clone(self) -> typing.Any: ...
    def equals(self, thatAuthTokenObj: typing.Any) -> bool: ...
    def getAccessToken(self) -> java.lang.String: ...
    def getCreatedOn(self) -> java.time.LocalDateTime: ...
    def getExpiresIn(self) -> int: ...
    def getRefreshToken(self) -> java.lang.String: ...
    def getScope(self) -> java.lang.String: ...
    def getState(self) -> java.lang.String: ...
    def getTokenType(self) -> java.lang.String: ...
    def hashCode(self) -> int: ...
    def isExpired(self, givenTime: java.time.LocalDateTime, tokenExpiresInBuffer: int) -> bool: ...
    def setAccessToken(self, accessToken: java.lang.String) -> None: ...
    def setCreatedOn(self, createdOn: java.time.LocalDateTime) -> None: ...
    def setExpiresIn(self, expiresIn: int) -> None: ...
    def setRefreshToken(self, refreshToken: java.lang.String) -> None: ...
    def setScope(self, scope: java.lang.String) -> None: ...
    def setState(self, state: java.lang.String) -> None: ...
    def setTokenType(self, tokenType: java.lang.String) -> None: ...
    def toString(self) -> java.lang.String: ...

class OAuthClientService(java.lang.AutoCloseable):
    """
    Java class 'org.openhab.core.auth.client.oauth2.OAuthClientService'
    
        Interfaces:
            java.lang.AutoCloseable
    
    """
    def addAccessTokenRefreshListener(self, listener: AccessTokenRefreshListener) -> None: ...
    def close(self) -> None: ...
    def extractAuthCodeFromAuthResponse(self, redirectURLwithParams: java.lang.String) -> java.lang.String: ...
    def getAccessTokenByClientCredentials(self, scope: java.lang.String) -> AccessTokenResponse: ...
    def getAccessTokenByImplicit(self, redirectURI: java.lang.String, scope: java.lang.String, state: java.lang.String) -> AccessTokenResponse: ...
    def getAccessTokenByResourceOwnerPasswordCredentials(self, username: java.lang.String, password: java.lang.String, scope: java.lang.String) -> AccessTokenResponse: ...
    def getAccessTokenResponse(self) -> AccessTokenResponse: ...
    def getAccessTokenResponseByAuthorizationCode(self, authorizationCode: java.lang.String, redirectURI: java.lang.String) -> AccessTokenResponse: ...
    def getAuthorizationUrl(self, redirectURI: java.lang.String, scope: java.lang.String, state: java.lang.String) -> java.lang.String: ...
    def importAccessTokenResponse(self, accessTokenResponse: AccessTokenResponse) -> None: ...
    def isClosed(self) -> bool: ...
    def refreshToken(self) -> AccessTokenResponse: ...
    def remove(self) -> None: ...
    def removeAccessTokenRefreshListener(self, listener: AccessTokenRefreshListener) -> bool: ...
    _withDeserializer__T = typing.TypeVar('_withDeserializer__T', bound=com.google.gson.JsonDeserializer)  # <T>
    def withDeserializer(self, deserializerClass: typing.Type[_withDeserializer__T]) -> 'OAuthClientService': ...

class OAuthException(java.lang.Exception):
    """
    Java class 'org.openhab.core.auth.client.oauth2.OAuthException'
    
        Extends:
            java.lang.Exception
    
      Constructors:
        * OAuthException(java.lang.Throwable)
        * OAuthException(java.lang.String, java.lang.Throwable)
        * OAuthException(java.lang.String)
        * OAuthException()
    
    """
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, message: java.lang.String): ...
    @typing.overload
    def __init__(self, message: java.lang.String, cause: java.lang.Throwable): ...
    @typing.overload
    def __init__(self, cause: java.lang.Throwable): ...

class OAuthFactory(java.lang.Object):
    """
    @NonNullByDefault public interface OAuthFactory
    
        The OAuth Factory interface
    
    
    """
    def createOAuthClientService(self, handle: java.lang.String, tokenUrl: java.lang.String, authorizationUrl: java.lang.String, clientId: java.lang.String, clientSecret: java.lang.String, scope: java.lang.String, supportsBasicAuth: bool) -> OAuthClientService: ...
    def deleteServiceAndAccessToken(self, handle: java.lang.String) -> None: ...
    def getOAuthClientService(self, handle: java.lang.String) -> OAuthClientService: ...
    def ungetOAuthService(self, handle: java.lang.String) -> None: ...

class OAuthResponseException(java.lang.Exception):
    """
    Java class 'org.openhab.core.auth.client.oauth2.OAuthResponseException'
    
        Extends:
            java.lang.Exception
    
      Constructors:
        * OAuthResponseException()
    
    """
    def __init__(self): ...
    def getError(self) -> java.lang.String: ...
    def getErrorDescription(self) -> java.lang.String: ...
    def getErrorUri(self) -> java.lang.String: ...
    def getState(self) -> java.lang.String: ...
    def setError(self, error: java.lang.String) -> None: ...
    def setErrorDescription(self, errorDescription: java.lang.String) -> None: ...
    def setErrorUri(self, errorUri: java.lang.String) -> None: ...
    def setState(self, state: java.lang.String) -> None: ...
    def toString(self) -> java.lang.String: ...

class StorageCipher(java.lang.Object):
    """
    @NonNullByDefault public interface StorageCipher
    
        This allows the encryption and decryption to be performed before saving to storage.
    
    
    """
    def decrypt(self, base64CipherText: java.lang.String) -> java.lang.String: ...
    def encrypt(self, plainText: java.lang.String) -> java.lang.String: ...
    def getUniqueCipherId(self) -> java.lang.String: ...
