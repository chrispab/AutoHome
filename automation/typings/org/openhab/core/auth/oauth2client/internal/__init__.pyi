import com.google.gson
import java.lang
import java.util
import org
import org.openhab.core.auth.client.oauth2
import org.openhab.core.io.net.http
import org.openhab.core.storage
import typing


class Keyword(java.lang.Object):
    """
    Java class 'org.openhab.core.auth.oauth2client.internal.Keyword'
    
      Attributes:
        CLIENT_ID (java.lang.String): final static field
        CLIENT_SECRET (java.lang.String): final static field
        GRANT_TYPE (java.lang.String): final static field
        USERNAME (java.lang.String): final static field
        PASSWORD (java.lang.String): final static field
        CLIENT_CREDENTIALS (java.lang.String): final static field
        AUTHORIZATION_CODE (java.lang.String): final static field
        SCOPE (java.lang.String): final static field
        REFRESH_TOKEN (java.lang.String): final static field
        REDIRECT_URI (java.lang.String): final static field
        CODE (java.lang.String): final static field
        STATE (java.lang.String): final static field
    
    """
    CLIENT_ID: typing.ClassVar[java.lang.String] = ...
    CLIENT_SECRET: typing.ClassVar[java.lang.String] = ...
    GRANT_TYPE: typing.ClassVar[java.lang.String] = ...
    USERNAME: typing.ClassVar[java.lang.String] = ...
    PASSWORD: typing.ClassVar[java.lang.String] = ...
    CLIENT_CREDENTIALS: typing.ClassVar[java.lang.String] = ...
    AUTHORIZATION_CODE: typing.ClassVar[java.lang.String] = ...
    SCOPE: typing.ClassVar[java.lang.String] = ...
    REFRESH_TOKEN: typing.ClassVar[java.lang.String] = ...
    REDIRECT_URI: typing.ClassVar[java.lang.String] = ...
    CODE: typing.ClassVar[java.lang.String] = ...
    STATE: typing.ClassVar[java.lang.String] = ...

class OAuthClientServiceImpl(org.openhab.core.auth.client.oauth2.OAuthClientService):
    """
    Java class 'org.openhab.core.auth.oauth2client.internal.OAuthClientServiceImpl'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            org.openhab.core.auth.client.oauth2.OAuthClientService
    
      Attributes:
        DEFAULT_TOKEN_EXPIRES_IN_BUFFER_SECOND (int): final static field
    
    """
    DEFAULT_TOKEN_EXPIRES_IN_BUFFER_SECOND: typing.ClassVar[int] = ...
    def addAccessTokenRefreshListener(self, listener: org.openhab.core.auth.client.oauth2.AccessTokenRefreshListener) -> None: ...
    def close(self) -> None: ...
    def extractAuthCodeFromAuthResponse(self, redirectURLwithParams: java.lang.String) -> java.lang.String: ...
    def getAccessTokenByClientCredentials(self, scope: java.lang.String) -> org.openhab.core.auth.client.oauth2.AccessTokenResponse: ...
    def getAccessTokenByImplicit(self, redirectURI: java.lang.String, scope: java.lang.String, state: java.lang.String) -> org.openhab.core.auth.client.oauth2.AccessTokenResponse: ...
    def getAccessTokenByResourceOwnerPasswordCredentials(self, username: java.lang.String, password: java.lang.String, scope: java.lang.String) -> org.openhab.core.auth.client.oauth2.AccessTokenResponse: ...
    def getAccessTokenResponse(self) -> org.openhab.core.auth.client.oauth2.AccessTokenResponse: ...
    def getAccessTokenResponseByAuthorizationCode(self, authorizationCode: java.lang.String, redirectURI: java.lang.String) -> org.openhab.core.auth.client.oauth2.AccessTokenResponse: ...
    def getAuthorizationUrl(self, redirectURI: java.lang.String, scope: java.lang.String, state: java.lang.String) -> java.lang.String: ...
    def importAccessTokenResponse(self, accessTokenResponse: org.openhab.core.auth.client.oauth2.AccessTokenResponse) -> None: ...
    def isClosed(self) -> bool: ...
    def refreshToken(self) -> org.openhab.core.auth.client.oauth2.AccessTokenResponse: ...
    def remove(self) -> None: ...
    def removeAccessTokenRefreshListener(self, listener: org.openhab.core.auth.client.oauth2.AccessTokenRefreshListener) -> bool: ...
    def setTokenExpiresInBuffer(self, tokenExpiresInBuffer: int) -> None: ...
    _withDeserializer__T = typing.TypeVar('_withDeserializer__T', bound=com.google.gson.JsonDeserializer)  # <T>
    def withDeserializer(self, deserializerClass: typing.Type[_withDeserializer__T]) -> org.openhab.core.auth.client.oauth2.OAuthClientService: ...

class OAuthConnector(java.lang.Object):
    """
    Java class 'org.openhab.core.auth.oauth2client.internal.OAuthConnector'
    
        Extends:
            java.lang.Object
    
      Constructors:
        * OAuthConnector(org.openhab.core.io.net.http.HttpClientFactory, java.lang.String)
    
    """
    def __init__(self, httpClientFactory: org.openhab.core.io.net.http.HttpClientFactory, deserializerClassName: java.lang.String): ...
    def getAuthorizationUrl(self, authorizationEndpoint: java.lang.String, clientId: java.lang.String, redirectURI: java.lang.String, state: java.lang.String, scope: java.lang.String) -> java.lang.String: ...
    def grantTypeAuthorizationCode(self, tokenUrl: java.lang.String, authorizationCode: java.lang.String, clientId: java.lang.String, clientSecret: java.lang.String, redirectUrl: java.lang.String, supportsBasicAuth: bool) -> org.openhab.core.auth.client.oauth2.AccessTokenResponse: ...
    def grantTypeClientCredentials(self, tokenUrl: java.lang.String, clientId: java.lang.String, clientSecret: java.lang.String, scope: java.lang.String, supportsBasicAuth: bool) -> org.openhab.core.auth.client.oauth2.AccessTokenResponse: ...
    def grantTypePassword(self, tokenUrl: java.lang.String, username: java.lang.String, password: java.lang.String, clientId: java.lang.String, clientSecret: java.lang.String, scope: java.lang.String, supportsBasicAuth: bool) -> org.openhab.core.auth.client.oauth2.AccessTokenResponse: ...
    def grantTypeRefreshToken(self, tokenUrl: java.lang.String, refreshToken: java.lang.String, clientId: java.lang.String, clientSecret: java.lang.String, scope: java.lang.String, supportsBasicAuth: bool) -> org.openhab.core.auth.client.oauth2.AccessTokenResponse: ...

class OAuthFactoryImpl(org.openhab.core.auth.client.oauth2.OAuthFactory):
    """
    Java class 'org.openhab.core.auth.oauth2client.internal.OAuthFactoryImpl'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            org.openhab.core.auth.client.oauth2.OAuthFactory
    
      Constructors:
        * OAuthFactoryImpl(org.openhab.core.io.net.http.HttpClientFactory, org.openhab.core.auth.oauth2client.internal.OAuthStoreHandler)
    
    """
    def __init__(self, httpClientFactory: org.openhab.core.io.net.http.HttpClientFactory, oAuthStoreHandler: 'OAuthStoreHandler'): ...
    def createOAuthClientService(self, handle: java.lang.String, tokenUrl: java.lang.String, authorizationUrl: java.lang.String, clientId: java.lang.String, clientSecret: java.lang.String, scope: java.lang.String, supportsBasicAuth: bool) -> org.openhab.core.auth.client.oauth2.OAuthClientService: ...
    def deactivate(self) -> None: ...
    def deleteServiceAndAccessToken(self, handle: java.lang.String) -> None: ...
    def getOAuthClientService(self, handle: java.lang.String) -> org.openhab.core.auth.client.oauth2.OAuthClientService: ...
    def getTokenExpiresInBuffer(self) -> int: ...
    def setTokenExpiresInBuffer(self, bufferInSeconds: int) -> None: ...
    def ungetOAuthService(self, handle: java.lang.String) -> None: ...

class OAuthStoreHandler(java.lang.Object):
    """
    Java class 'org.openhab.core.auth.oauth2client.internal.OAuthStoreHandler'
    
    """
    def loadAccessTokenResponse(self, handle: java.lang.String) -> org.openhab.core.auth.client.oauth2.AccessTokenResponse: ...
    def loadPersistedParams(self, handle: java.lang.String) -> 'PersistedParams': ...
    def remove(self, handle: java.lang.String) -> None: ...
    def removeAll(self) -> None: ...
    def saveAccessTokenResponse(self, handle: java.lang.String, accessTokenResponse: org.openhab.core.auth.client.oauth2.AccessTokenResponse) -> None: ...
    def savePersistedParams(self, handle: java.lang.String, persistedParams: 'PersistedParams') -> None: ...

class StorageRecordType(java.lang.Enum[org.openhab.core.auth.oauth2client.internal.StorageRecordType]):
    """
    Java class 'org.openhab.core.auth.oauth2client.internal.StorageRecordType'
    
        Extends:
            java.lang.Enum
    
      Attributes:
        LAST_USED (org.openhab.core.auth.oauth2client.internal.StorageRecordType): final static enum constant
        ACCESS_TOKEN_RESPONSE (org.openhab.core.auth.oauth2client.internal.StorageRecordType): final static enum constant
        SERVICE_CONFIGURATION (org.openhab.core.auth.oauth2client.internal.StorageRecordType): final static enum constant
    
    """
    LAST_USED: typing.ClassVar['StorageRecordType'] = ...
    ACCESS_TOKEN_RESPONSE: typing.ClassVar['StorageRecordType'] = ...
    SERVICE_CONFIGURATION: typing.ClassVar['StorageRecordType'] = ...
    def getKey(self, handle: java.lang.String) -> java.lang.String: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @classmethod
    @typing.overload
    def valueOf(cls, class_: typing.Type[_valueOf_0__T], string: java.lang.String) -> _valueOf_0__T: ...
    @classmethod
    @typing.overload
    def valueOf(cls, name: java.lang.String) -> 'StorageRecordType': ...
    @classmethod
    def values(cls) -> typing.List['StorageRecordType']: ...

class PersistedParams: ...

class OAuthStoreHandlerImpl(OAuthStoreHandler):
    """
    Java class 'org.openhab.core.auth.oauth2client.internal.OAuthStoreHandlerImpl'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            org.openhab.core.auth.oauth2client.internal.OAuthStoreHandler
    
      Constructors:
        * OAuthStoreHandlerImpl(org.openhab.core.storage.StorageService)
    
    """
    def __init__(self, storageService: org.openhab.core.storage.StorageService): ...
    def activate(self, properties: typing.Union[java.util.Map[java.lang.String, typing.Any], typing.Mapping[java.lang.String, typing.Any]]) -> None: ...
    def deactivate(self) -> None: ...
    def loadAccessTokenResponse(self, handle: java.lang.String) -> org.openhab.core.auth.client.oauth2.AccessTokenResponse: ...
    def loadPersistedParams(self, handle: java.lang.String) -> PersistedParams: ...
    def remove(self, handle: java.lang.String) -> None: ...
    def removeAll(self) -> None: ...
    def saveAccessTokenResponse(self, handle: java.lang.String, pAccessTokenResponse: org.openhab.core.auth.client.oauth2.AccessTokenResponse) -> None: ...
    def savePersistedParams(self, handle: java.lang.String, persistedParams: PersistedParams) -> None: ...
