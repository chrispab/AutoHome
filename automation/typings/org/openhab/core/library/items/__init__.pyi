import java.lang
import java.util
import javax.measure
import org.openhab.core.items
import org.openhab.core.library.types
import org.openhab.core.types
import typing


class CallItem(org.openhab.core.items.GenericItem):
    """
    Java class 'org.openhab.core.library.items.CallItem'
    
        Extends:
            org.openhab.core.items.GenericItem
    
      Constructors:
        * CallItem(java.lang.String)
    
    """
    def __init__(self, name: java.lang.String): ...
    def getAcceptedCommandTypes(self) -> java.util.List[typing.Type[org.openhab.core.types.Command]]: ...
    def getAcceptedDataTypes(self) -> java.util.List[typing.Type[org.openhab.core.types.State]]: ...
    def setState(self, state: org.openhab.core.types.State) -> None: ...

class ContactItem(org.openhab.core.items.GenericItem):
    """
    Java class 'org.openhab.core.library.items.ContactItem'
    
        Extends:
            org.openhab.core.items.GenericItem
    
      Constructors:
        * ContactItem(java.lang.String)
    
    """
    def __init__(self, name: java.lang.String): ...
    def getAcceptedCommandTypes(self) -> java.util.List[typing.Type[org.openhab.core.types.Command]]: ...
    def getAcceptedDataTypes(self) -> java.util.List[typing.Type[org.openhab.core.types.State]]: ...
    def setState(self, state: org.openhab.core.types.State) -> None: ...

class DateTimeItem(org.openhab.core.items.GenericItem):
    """
    Java class 'org.openhab.core.library.items.DateTimeItem'
    
        Extends:
            org.openhab.core.items.GenericItem
    
      Constructors:
        * DateTimeItem(java.lang.String)
    
    """
    def __init__(self, name: java.lang.String): ...
    def getAcceptedCommandTypes(self) -> java.util.List[typing.Type[org.openhab.core.types.Command]]: ...
    def getAcceptedDataTypes(self) -> java.util.List[typing.Type[org.openhab.core.types.State]]: ...
    @typing.overload
    def send(self, command: org.openhab.core.types.RefreshType) -> None: ...
    @typing.overload
    def send(self, command: org.openhab.core.library.types.DateTimeType) -> None: ...
    def setState(self, state: org.openhab.core.types.State) -> None: ...

class ImageItem(org.openhab.core.items.GenericItem):
    """
    Java class 'org.openhab.core.library.items.ImageItem'
    
        Extends:
            org.openhab.core.items.GenericItem
    
      Constructors:
        * ImageItem(java.lang.String)
    
    """
    def __init__(self, name: java.lang.String): ...
    def getAcceptedCommandTypes(self) -> java.util.List[typing.Type[org.openhab.core.types.Command]]: ...
    def getAcceptedDataTypes(self) -> java.util.List[typing.Type[org.openhab.core.types.State]]: ...
    def setState(self, state: org.openhab.core.types.State) -> None: ...

class LocationItem(org.openhab.core.items.GenericItem):
    """
    Java class 'org.openhab.core.library.items.LocationItem'
    
        Extends:
            org.openhab.core.items.GenericItem
    
      Constructors:
        * LocationItem(java.lang.String)
    
    """
    def __init__(self, name: java.lang.String): ...
    def distanceFrom(self, awayItem: 'LocationItem') -> org.openhab.core.library.types.DecimalType: ...
    def getAcceptedCommandTypes(self) -> java.util.List[typing.Type[org.openhab.core.types.Command]]: ...
    def getAcceptedDataTypes(self) -> java.util.List[typing.Type[org.openhab.core.types.State]]: ...
    @typing.overload
    def send(self, command: org.openhab.core.types.RefreshType) -> None: ...
    @typing.overload
    def send(self, command: org.openhab.core.library.types.PointType) -> None: ...
    def setState(self, state: org.openhab.core.types.State) -> None: ...

class NumberItem(org.openhab.core.items.GenericItem):
    """
    Java class 'org.openhab.core.library.items.NumberItem'
    
        Extends:
            org.openhab.core.items.GenericItem
    
      Constructors:
        * NumberItem(java.lang.String, java.lang.String)
        * NumberItem(java.lang.String)
    
    """
    @typing.overload
    def __init__(self, name: java.lang.String): ...
    @typing.overload
    def __init__(self, type: java.lang.String, name: java.lang.String): ...
    def getAcceptedCommandTypes(self) -> java.util.List[typing.Type[org.openhab.core.types.Command]]: ...
    def getAcceptedDataTypes(self) -> java.util.List[typing.Type[org.openhab.core.types.State]]: ...
    def getDimension(self) -> typing.Type[javax.measure.Quantity[typing.Any]]: ...
    @typing.overload
    def getStateDescription(self) -> org.openhab.core.types.StateDescription: ...
    @typing.overload
    def getStateDescription(self, locale: java.util.Locale) -> org.openhab.core.types.StateDescription: ...
    def getUnit(self) -> javax.measure.Unit[javax.measure.Quantity[typing.Any]]: ...
    def getUnitSymbol(self) -> java.lang.String: ...
    @typing.overload
    def send(self, command: org.openhab.core.types.RefreshType) -> None: ...
    @typing.overload
    def send(self, command: org.openhab.core.library.types.DecimalType) -> None: ...
    def setState(self, state: org.openhab.core.types.State) -> None: ...
    def toQuantityType(self, originalType: org.openhab.core.library.types.DecimalType, dimension: typing.Type[javax.measure.Quantity[typing.Any]]) -> org.openhab.core.library.types.QuantityType[typing.Any]: ...

class PlayerItem(org.openhab.core.items.GenericItem):
    """
    Java class 'org.openhab.core.library.items.PlayerItem'
    
        Extends:
            org.openhab.core.items.GenericItem
    
      Constructors:
        * PlayerItem(java.lang.String)
    
    """
    def __init__(self, name: java.lang.String): ...
    def getAcceptedCommandTypes(self) -> java.util.List[typing.Type[org.openhab.core.types.Command]]: ...
    def getAcceptedDataTypes(self) -> java.util.List[typing.Type[org.openhab.core.types.State]]: ...
    @typing.overload
    def send(self, command: org.openhab.core.types.RefreshType) -> None: ...
    @typing.overload
    def send(self, command: org.openhab.core.library.types.NextPreviousType) -> None: ...
    @typing.overload
    def send(self, command: org.openhab.core.library.types.PlayPauseType) -> None: ...
    @typing.overload
    def send(self, command: org.openhab.core.library.types.RewindFastforwardType) -> None: ...
    def setState(self, state: org.openhab.core.types.State) -> None: ...

class RollershutterItem(org.openhab.core.items.GenericItem):
    """
    Java class 'org.openhab.core.library.items.RollershutterItem'
    
        Extends:
            org.openhab.core.items.GenericItem
    
      Constructors:
        * RollershutterItem(java.lang.String)
    
    """
    def __init__(self, name: java.lang.String): ...
    def getAcceptedCommandTypes(self) -> java.util.List[typing.Type[org.openhab.core.types.Command]]: ...
    def getAcceptedDataTypes(self) -> java.util.List[typing.Type[org.openhab.core.types.State]]: ...
    @typing.overload
    def send(self, command: org.openhab.core.types.RefreshType) -> None: ...
    @typing.overload
    def send(self, command: org.openhab.core.library.types.PercentType) -> None: ...
    @typing.overload
    def send(self, command: org.openhab.core.library.types.StopMoveType) -> None: ...
    @typing.overload
    def send(self, command: org.openhab.core.library.types.UpDownType) -> None: ...
    def setState(self, state: org.openhab.core.types.State) -> None: ...

class StringItem(org.openhab.core.items.GenericItem):
    """
    Java class 'org.openhab.core.library.items.StringItem'
    
        Extends:
            org.openhab.core.items.GenericItem
    
      Constructors:
        * StringItem(java.lang.String)
    
    """
    def __init__(self, name: java.lang.String): ...
    def getAcceptedCommandTypes(self) -> java.util.List[typing.Type[org.openhab.core.types.Command]]: ...
    def getAcceptedDataTypes(self) -> java.util.List[typing.Type[org.openhab.core.types.State]]: ...
    _getStateAs__T = typing.TypeVar('_getStateAs__T', bound=org.openhab.core.types.State)  # <T>
    def getStateAs(self, typeClass: typing.Type[_getStateAs__T]) -> _getStateAs__T: ...
    @typing.overload
    def send(self, command: org.openhab.core.types.RefreshType) -> None: ...
    @typing.overload
    def send(self, command: org.openhab.core.library.types.StringType) -> None: ...
    def setState(self, state: org.openhab.core.types.State) -> None: ...

class SwitchItem(org.openhab.core.items.GenericItem):
    """
    Java class 'org.openhab.core.library.items.SwitchItem'
    
        Extends:
            org.openhab.core.items.GenericItem
    
      Constructors:
        * SwitchItem(java.lang.String)
    
    """
    def __init__(self, name: java.lang.String): ...
    def getAcceptedCommandTypes(self) -> java.util.List[typing.Type[org.openhab.core.types.Command]]: ...
    def getAcceptedDataTypes(self) -> java.util.List[typing.Type[org.openhab.core.types.State]]: ...
    @typing.overload
    def send(self, command: org.openhab.core.types.RefreshType) -> None: ...
    @typing.overload
    def send(self, command: org.openhab.core.library.types.OnOffType) -> None: ...
    def setState(self, state: org.openhab.core.types.State) -> None: ...

class DimmerItem(SwitchItem):
    """
    Java class 'org.openhab.core.library.items.DimmerItem'
    
        Extends:
            org.openhab.core.library.items.SwitchItem
    
      Constructors:
        * DimmerItem(java.lang.String)
    
    """
    def __init__(self, name: java.lang.String): ...
    def getAcceptedCommandTypes(self) -> java.util.List[typing.Type[org.openhab.core.types.Command]]: ...
    def getAcceptedDataTypes(self) -> java.util.List[typing.Type[org.openhab.core.types.State]]: ...
    @typing.overload
    def send(self, command: org.openhab.core.types.RefreshType) -> None: ...
    @typing.overload
    def send(self, command: org.openhab.core.library.types.PercentType) -> None: ...
    @typing.overload
    def send(self, command: org.openhab.core.library.types.OnOffType) -> None: ...
    def setState(self, state: org.openhab.core.types.State) -> None: ...

class ColorItem(DimmerItem):
    """
    Java class 'org.openhab.core.library.items.ColorItem'
    
        Extends:
            org.openhab.core.library.items.DimmerItem
    
      Constructors:
        * ColorItem(java.lang.String)
    
    """
    def __init__(self, name: java.lang.String): ...
    def getAcceptedCommandTypes(self) -> java.util.List[typing.Type[org.openhab.core.types.Command]]: ...
    def getAcceptedDataTypes(self) -> java.util.List[typing.Type[org.openhab.core.types.State]]: ...
    @typing.overload
    def send(self, command: org.openhab.core.types.RefreshType) -> None: ...
    @typing.overload
    def send(self, command: org.openhab.core.library.types.HSBType) -> None: ...
    @typing.overload
    def send(self, command: org.openhab.core.library.types.PercentType) -> None: ...
    @typing.overload
    def send(self, command: org.openhab.core.library.types.OnOffType) -> None: ...
    def setState(self, state: org.openhab.core.types.State) -> None: ...
