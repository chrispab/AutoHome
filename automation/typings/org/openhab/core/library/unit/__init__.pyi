import java.lang
import javax.measure
import javax.measure.spi
import org
import tec.uom.lib.common.function
import typing


class BinaryPrefix(java.lang.Enum[org.openhab.core.library.unit.BinaryPrefix], tec.uom.lib.common.function.SymbolSupplier, tec.uom.lib.common.function.UnitConverterSupplier):
    """
    Java class 'org.openhab.core.library.unit.BinaryPrefix'
    
        Extends:
            java.lang.Enum
    
        Interfaces:
            tec.uom.lib.common.function.SymbolSupplier,
            tec.uom.lib.common.function.UnitConverterSupplier
    
      Attributes:
        YOBI (org.openhab.core.library.unit.BinaryPrefix): final static enum constant
        ZEBI (org.openhab.core.library.unit.BinaryPrefix): final static enum constant
        EXBI (org.openhab.core.library.unit.BinaryPrefix): final static enum constant
        PEBI (org.openhab.core.library.unit.BinaryPrefix): final static enum constant
        TEBI (org.openhab.core.library.unit.BinaryPrefix): final static enum constant
        GIBI (org.openhab.core.library.unit.BinaryPrefix): final static enum constant
        MEBI (org.openhab.core.library.unit.BinaryPrefix): final static enum constant
        KIBI (org.openhab.core.library.unit.BinaryPrefix): final static enum constant
    
    """
    YOBI: typing.ClassVar['BinaryPrefix'] = ...
    ZEBI: typing.ClassVar['BinaryPrefix'] = ...
    EXBI: typing.ClassVar['BinaryPrefix'] = ...
    PEBI: typing.ClassVar['BinaryPrefix'] = ...
    TEBI: typing.ClassVar['BinaryPrefix'] = ...
    GIBI: typing.ClassVar['BinaryPrefix'] = ...
    MEBI: typing.ClassVar['BinaryPrefix'] = ...
    KIBI: typing.ClassVar['BinaryPrefix'] = ...
    _EXBI__Q = typing.TypeVar('_EXBI__Q', bound=javax.measure.Quantity)  # <Q>
    @classmethod
    def EXBI(cls, unit: javax.measure.Unit[_EXBI__Q]) -> javax.measure.Unit[_EXBI__Q]: ...
    _GIBI__Q = typing.TypeVar('_GIBI__Q', bound=javax.measure.Quantity)  # <Q>
    @classmethod
    def GIBI(cls, unit: javax.measure.Unit[_GIBI__Q]) -> javax.measure.Unit[_GIBI__Q]: ...
    _KIBI__Q = typing.TypeVar('_KIBI__Q', bound=javax.measure.Quantity)  # <Q>
    @classmethod
    def KIBI(cls, unit: javax.measure.Unit[_KIBI__Q]) -> javax.measure.Unit[_KIBI__Q]: ...
    _MEBI__Q = typing.TypeVar('_MEBI__Q', bound=javax.measure.Quantity)  # <Q>
    @classmethod
    def MEBI(cls, unit: javax.measure.Unit[_MEBI__Q]) -> javax.measure.Unit[_MEBI__Q]: ...
    _PEBI__Q = typing.TypeVar('_PEBI__Q', bound=javax.measure.Quantity)  # <Q>
    @classmethod
    def PEBI(cls, unit: javax.measure.Unit[_PEBI__Q]) -> javax.measure.Unit[_PEBI__Q]: ...
    _TEBI__Q = typing.TypeVar('_TEBI__Q', bound=javax.measure.Quantity)  # <Q>
    @classmethod
    def TEBI(cls, unit: javax.measure.Unit[_TEBI__Q]) -> javax.measure.Unit[_TEBI__Q]: ...
    _YOBI__Q = typing.TypeVar('_YOBI__Q', bound=javax.measure.Quantity)  # <Q>
    @classmethod
    def YOBI(cls, unit: javax.measure.Unit[_YOBI__Q]) -> javax.measure.Unit[_YOBI__Q]: ...
    _ZEBI__Q = typing.TypeVar('_ZEBI__Q', bound=javax.measure.Quantity)  # <Q>
    @classmethod
    def ZEBI(cls, unit: javax.measure.Unit[_ZEBI__Q]) -> javax.measure.Unit[_ZEBI__Q]: ...
    def getConverter(self) -> javax.measure.UnitConverter: ...
    def getSymbol(self) -> java.lang.String: ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @classmethod
    @typing.overload
    def valueOf(cls, class_: typing.Type[_valueOf_0__T], string: java.lang.String) -> _valueOf_0__T: ...
    @classmethod
    @typing.overload
    def valueOf(cls, name: java.lang.String) -> 'BinaryPrefix': ...
    @classmethod
    def values(cls) -> typing.List['BinaryPrefix']: ...

class MetricPrefix(java.lang.Object):
    """
    Java class 'org.openhab.core.library.unit.MetricPrefix'
    
        Extends:
            java.lang.Object
    
      Constructors:
        * MetricPrefix()
    
    """
    def __init__(self): ...
    _ATTO__T = typing.TypeVar('_ATTO__T', bound=javax.measure.Quantity)  # <T>
    @classmethod
    def ATTO(cls, unit: javax.measure.Unit[_ATTO__T]) -> javax.measure.Unit[_ATTO__T]: ...
    _CENTI__T = typing.TypeVar('_CENTI__T', bound=javax.measure.Quantity)  # <T>
    @classmethod
    def CENTI(cls, unit: javax.measure.Unit[_CENTI__T]) -> javax.measure.Unit[_CENTI__T]: ...
    _DECI__T = typing.TypeVar('_DECI__T', bound=javax.measure.Quantity)  # <T>
    @classmethod
    def DECI(cls, unit: javax.measure.Unit[_DECI__T]) -> javax.measure.Unit[_DECI__T]: ...
    _DEKA__T = typing.TypeVar('_DEKA__T', bound=javax.measure.Quantity)  # <T>
    @classmethod
    def DEKA(cls, unit: javax.measure.Unit[_DEKA__T]) -> javax.measure.Unit[_DEKA__T]: ...
    _EXA__T = typing.TypeVar('_EXA__T', bound=javax.measure.Quantity)  # <T>
    @classmethod
    def EXA(cls, unit: javax.measure.Unit[_EXA__T]) -> javax.measure.Unit[_EXA__T]: ...
    _FEMTO__T = typing.TypeVar('_FEMTO__T', bound=javax.measure.Quantity)  # <T>
    @classmethod
    def FEMTO(cls, unit: javax.measure.Unit[_FEMTO__T]) -> javax.measure.Unit[_FEMTO__T]: ...
    _GIGA__T = typing.TypeVar('_GIGA__T', bound=javax.measure.Quantity)  # <T>
    @classmethod
    def GIGA(cls, unit: javax.measure.Unit[_GIGA__T]) -> javax.measure.Unit[_GIGA__T]: ...
    _HECTO__T = typing.TypeVar('_HECTO__T', bound=javax.measure.Quantity)  # <T>
    @classmethod
    def HECTO(cls, unit: javax.measure.Unit[_HECTO__T]) -> javax.measure.Unit[_HECTO__T]: ...
    _KILO__T = typing.TypeVar('_KILO__T', bound=javax.measure.Quantity)  # <T>
    @classmethod
    def KILO(cls, unit: javax.measure.Unit[_KILO__T]) -> javax.measure.Unit[_KILO__T]: ...
    _MEGA__T = typing.TypeVar('_MEGA__T', bound=javax.measure.Quantity)  # <T>
    @classmethod
    def MEGA(cls, unit: javax.measure.Unit[_MEGA__T]) -> javax.measure.Unit[_MEGA__T]: ...
    _MICRO__T = typing.TypeVar('_MICRO__T', bound=javax.measure.Quantity)  # <T>
    @classmethod
    def MICRO(cls, unit: javax.measure.Unit[_MICRO__T]) -> javax.measure.Unit[_MICRO__T]: ...
    _MILLI__T = typing.TypeVar('_MILLI__T', bound=javax.measure.Quantity)  # <T>
    @classmethod
    def MILLI(cls, unit: javax.measure.Unit[_MILLI__T]) -> javax.measure.Unit[_MILLI__T]: ...
    _NANO__T = typing.TypeVar('_NANO__T', bound=javax.measure.Quantity)  # <T>
    @classmethod
    def NANO(cls, unit: javax.measure.Unit[_NANO__T]) -> javax.measure.Unit[_NANO__T]: ...
    _PETA__T = typing.TypeVar('_PETA__T', bound=javax.measure.Quantity)  # <T>
    @classmethod
    def PETA(cls, unit: javax.measure.Unit[_PETA__T]) -> javax.measure.Unit[_PETA__T]: ...
    _PICO__T = typing.TypeVar('_PICO__T', bound=javax.measure.Quantity)  # <T>
    @classmethod
    def PICO(cls, unit: javax.measure.Unit[_PICO__T]) -> javax.measure.Unit[_PICO__T]: ...
    _TERA__T = typing.TypeVar('_TERA__T', bound=javax.measure.Quantity)  # <T>
    @classmethod
    def TERA(cls, unit: javax.measure.Unit[_TERA__T]) -> javax.measure.Unit[_TERA__T]: ...
    _YOCTO__T = typing.TypeVar('_YOCTO__T', bound=javax.measure.Quantity)  # <T>
    @classmethod
    def YOCTO(cls, unit: javax.measure.Unit[_YOCTO__T]) -> javax.measure.Unit[_YOCTO__T]: ...
    _YOTTA__T = typing.TypeVar('_YOTTA__T', bound=javax.measure.Quantity)  # <T>
    @classmethod
    def YOTTA(cls, unit: javax.measure.Unit[_YOTTA__T]) -> javax.measure.Unit[_YOTTA__T]: ...
    _ZEPTO__T = typing.TypeVar('_ZEPTO__T', bound=javax.measure.Quantity)  # <T>
    @classmethod
    def ZEPTO(cls, unit: javax.measure.Unit[_ZEPTO__T]) -> javax.measure.Unit[_ZEPTO__T]: ...
    _ZETTA__T = typing.TypeVar('_ZETTA__T', bound=javax.measure.Quantity)  # <T>
    @classmethod
    def ZETTA(cls, unit: javax.measure.Unit[_ZETTA__T]) -> javax.measure.Unit[_ZETTA__T]: ...

class ImperialUnits(org.openhab.core.library.unit.CustomUnits):
    """
    Java class 'org.openhab.core.library.unit.ImperialUnits'
    
        Extends:
            org.openhab.core.library.unit.CustomUnits
    
      Attributes:
        MEASUREMENT_SYSTEM_NAME (java.lang.String): final static field
        INCH_OF_MERCURY (javax.measure.Unit): final static field
        FAHRENHEIT (javax.measure.Unit): final static field
        MILES_PER_HOUR (javax.measure.Unit): final static field
        INCH (javax.measure.Unit): final static field
        FOOT (javax.measure.Unit): final static field
        YARD (javax.measure.Unit): final static field
        CHAIN (javax.measure.Unit): final static field
        FURLONG (javax.measure.Unit): final static field
        MILE (javax.measure.Unit): final static field
        LEAGUE (javax.measure.Unit): final static field
        SQUARE_FOOT (javax.measure.Unit): final static field
        CUBIC_FOOT (javax.measure.Unit): final static field
    
    """
    MEASUREMENT_SYSTEM_NAME: typing.ClassVar[java.lang.String] = ...
    INCH_OF_MERCURY: typing.ClassVar[javax.measure.Unit] = ...
    FAHRENHEIT: typing.ClassVar[javax.measure.Unit] = ...
    MILES_PER_HOUR: typing.ClassVar[javax.measure.Unit] = ...
    INCH: typing.ClassVar[javax.measure.Unit] = ...
    FOOT: typing.ClassVar[javax.measure.Unit] = ...
    YARD: typing.ClassVar[javax.measure.Unit] = ...
    CHAIN: typing.ClassVar[javax.measure.Unit] = ...
    FURLONG: typing.ClassVar[javax.measure.Unit] = ...
    MILE: typing.ClassVar[javax.measure.Unit] = ...
    LEAGUE: typing.ClassVar[javax.measure.Unit] = ...
    SQUARE_FOOT: typing.ClassVar[javax.measure.Unit] = ...
    CUBIC_FOOT: typing.ClassVar[javax.measure.Unit] = ...
    @classmethod
    def getInstance(cls) -> javax.measure.spi.SystemOfUnits: ...
    def getName(self) -> java.lang.String: ...

class SIUnits(org.openhab.core.library.unit.CustomUnits):
    """
    Java class 'org.openhab.core.library.unit.SIUnits'
    
        Extends:
            org.openhab.core.library.unit.CustomUnits
    
      Attributes:
        MEASUREMENT_SYSTEM_NAME (java.lang.String): final static field
        CELSIUS (javax.measure.Unit): final static field
        KILOMETRE_PER_HOUR (javax.measure.Unit): final static field
        METRE (javax.measure.Unit): final static field
        KILOGRAM (javax.measure.Unit): final static field
        GRAM (javax.measure.Unit): final static field
        SQUARE_METRE (javax.measure.Unit): final static field
        CUBIC_METRE (javax.measure.Unit): final static field
        PASCAL (javax.measure.Unit): final static field
    
    """
    MEASUREMENT_SYSTEM_NAME: typing.ClassVar[java.lang.String] = ...
    CELSIUS: typing.ClassVar[javax.measure.Unit] = ...
    KILOMETRE_PER_HOUR: typing.ClassVar[javax.measure.Unit] = ...
    METRE: typing.ClassVar[javax.measure.Unit] = ...
    KILOGRAM: typing.ClassVar[javax.measure.Unit] = ...
    GRAM: typing.ClassVar[javax.measure.Unit] = ...
    SQUARE_METRE: typing.ClassVar[javax.measure.Unit] = ...
    CUBIC_METRE: typing.ClassVar[javax.measure.Unit] = ...
    PASCAL: typing.ClassVar[javax.measure.Unit] = ...
    @classmethod
    def getInstance(cls) -> javax.measure.spi.SystemOfUnits: ...
    def getName(self) -> java.lang.String: ...

class Units(org.openhab.core.library.unit.CustomUnits):
    """
    Java class 'org.openhab.core.library.unit.Units'
    
        Extends:
            org.openhab.core.library.unit.CustomUnits
    
      Attributes:
        METRE_PER_SQUARE_SECOND (javax.measure.Unit): final static field
        STANDARD_GRAVITY (javax.measure.Unit): final static field
        MOLE (javax.measure.Unit): final static field
        DEUTSCHE_HAERTE (javax.measure.Unit): final static field
        DEGREE_ANGLE (javax.measure.Unit): final static field
        RADIAN (javax.measure.Unit): final static field
        DOBSON_UNIT (javax.measure.Unit): final static field
        KATAL (javax.measure.Unit): final static field
        KILOGRAM_PER_CUBICMETRE (javax.measure.Unit): final static field
        MICROGRAM_PER_CUBICMETRE (javax.measure.Unit): final static field
        ONE (javax.measure.Unit): final static field
        PERCENT (javax.measure.Unit): final static field
        PARTS_PER_BILLION (javax.measure.Unit): final static field
        PARTS_PER_MILLION (javax.measure.Unit): final static field
        DECIBEL (javax.measure.Unit): final static field
        AMPERE (javax.measure.Unit): final static field
        FARAD (javax.measure.Unit): final static field
        COULOMB (javax.measure.Unit): final static field
        AMPERE_HOUR (javax.measure.Unit): final static field
        MILLIAMPERE_HOUR (javax.measure.Unit): final static field
        SIEMENS (javax.measure.Unit): final static field
        SIEMENS_PER_METRE (javax.measure.Unit): final static field
        HENRY (javax.measure.Unit): final static field
        VOLT (javax.measure.Unit): final static field
        OHM (javax.measure.Unit): final static field
        JOULE (javax.measure.Unit): final static field
        WATT_SECOND (javax.measure.Unit): final static field
        WATT_HOUR (javax.measure.Unit): final static field
        KILOWATT_HOUR (javax.measure.Unit): final static field
        MEGAWATT_HOUR (javax.measure.Unit): final static field
        VAR (javax.measure.Unit): final static field
        KILOVAR (javax.measure.Unit): final static field
        VAR_HOUR (javax.measure.Unit): final static field
        KILOVAR_HOUR (javax.measure.Unit): final static field
        VOLT_AMPERE (javax.measure.Unit): final static field
        VOLT_AMPERE_HOUR (javax.measure.Unit): final static field
        NEWTON (javax.measure.Unit): final static field
        HERTZ (javax.measure.Unit): final static field
        IRRADIANCE (javax.measure.Unit): final static field
        MICROWATT_PER_SQUARE_CENTIMETRE (javax.measure.Unit): final static field
        LUX (javax.measure.Unit): final static field
        LUMEN (javax.measure.Unit): final static field
        CANDELA (javax.measure.Unit): final static field
        WEBER (javax.measure.Unit): final static field
        TESLA (javax.measure.Unit): final static field
        WATT (javax.measure.Unit): final static field
        DECIBEL_MILLIWATTS (javax.measure.Unit): final static field
        MILLIMETRE_OF_MERCURY (javax.measure.Unit): final static field
        BAR (javax.measure.Unit): final static field
        MILLIBAR (javax.measure.Unit): final static field
        BECQUEREL (javax.measure.Unit): final static field
        BECQUEREL_PER_CUBIC_METRE (javax.measure.Unit): final static field
        GRAY (javax.measure.Unit): final static field
        SIEVERT (javax.measure.Unit): final static field
        MILLIMETRE_PER_HOUR (javax.measure.Unit): final static field
        INCHES_PER_HOUR (javax.measure.Unit): final static field
        METRE_PER_SECOND (javax.measure.Unit): final static field
        KNOT (javax.measure.Unit): final static field
        STERADIAN (javax.measure.Unit): final static field
        KELVIN (javax.measure.Unit): final static field
        SECOND (javax.measure.Unit): final static field
        MINUTE (javax.measure.Unit): final static field
        HOUR (javax.measure.Unit): final static field
        DAY (javax.measure.Unit): final static field
        WEEK (javax.measure.Unit): final static field
        YEAR (javax.measure.Unit): final static field
        LITRE (javax.measure.Unit): final static field
        LITRE_PER_MINUTE (javax.measure.Unit): final static field
        CUBICMETRE_PER_SECOND (javax.measure.Unit): final static field
        CUBICMETRE_PER_MINUTE (javax.measure.Unit): final static field
        CUBICMETRE_PER_HOUR (javax.measure.Unit): final static field
        CUBICMETRE_PER_DAY (javax.measure.Unit): final static field
        BIT (javax.measure.Unit): final static field
        KILOBIT (javax.measure.Unit): final static field
        MEGABIT (javax.measure.Unit): final static field
        GIGABIT (javax.measure.Unit): final static field
        TERABIT (javax.measure.Unit): final static field
        PETABIT (javax.measure.Unit): final static field
        BYTE (javax.measure.Unit): final static field
        OCTET (javax.measure.Unit): final static field
        KILOBYTE (javax.measure.Unit): final static field
        MEGABYTE (javax.measure.Unit): final static field
        GIGABYTE (javax.measure.Unit): final static field
        TERABYTE (javax.measure.Unit): final static field
        PETABYTE (javax.measure.Unit): final static field
        KIBIBYTE (javax.measure.Unit): final static field
        MEBIBYTE (javax.measure.Unit): final static field
        GIBIBYTE (javax.measure.Unit): final static field
        TEBIBYTE (javax.measure.Unit): final static field
        PEBIBYTE (javax.measure.Unit): final static field
        KIBIOCTET (javax.measure.Unit): final static field
        MEBIOCTET (javax.measure.Unit): final static field
        GIBIOCTET (javax.measure.Unit): final static field
        TEBIOCTET (javax.measure.Unit): final static field
        PEBIOCTET (javax.measure.Unit): final static field
        BIT_PER_SECOND (javax.measure.Unit): final static field
        KILOBIT_PER_SECOND (javax.measure.Unit): final static field
        MEGABIT_PER_SECOND (javax.measure.Unit): final static field
        GIGABIT_PER_SECOND (javax.measure.Unit): final static field
        TERABIT_PER_SECOND (javax.measure.Unit): final static field
    
    """
    METRE_PER_SQUARE_SECOND: typing.ClassVar[javax.measure.Unit] = ...
    STANDARD_GRAVITY: typing.ClassVar[javax.measure.Unit] = ...
    MOLE: typing.ClassVar[javax.measure.Unit] = ...
    DEUTSCHE_HAERTE: typing.ClassVar[javax.measure.Unit] = ...
    DEGREE_ANGLE: typing.ClassVar[javax.measure.Unit] = ...
    RADIAN: typing.ClassVar[javax.measure.Unit] = ...
    DOBSON_UNIT: typing.ClassVar[javax.measure.Unit] = ...
    KATAL: typing.ClassVar[javax.measure.Unit] = ...
    KILOGRAM_PER_CUBICMETRE: typing.ClassVar[javax.measure.Unit] = ...
    MICROGRAM_PER_CUBICMETRE: typing.ClassVar[javax.measure.Unit] = ...
    ONE: typing.ClassVar[javax.measure.Unit] = ...
    PERCENT: typing.ClassVar[javax.measure.Unit] = ...
    PARTS_PER_BILLION: typing.ClassVar[javax.measure.Unit] = ...
    PARTS_PER_MILLION: typing.ClassVar[javax.measure.Unit] = ...
    DECIBEL: typing.ClassVar[javax.measure.Unit] = ...
    AMPERE: typing.ClassVar[javax.measure.Unit] = ...
    FARAD: typing.ClassVar[javax.measure.Unit] = ...
    COULOMB: typing.ClassVar[javax.measure.Unit] = ...
    AMPERE_HOUR: typing.ClassVar[javax.measure.Unit] = ...
    MILLIAMPERE_HOUR: typing.ClassVar[javax.measure.Unit] = ...
    SIEMENS: typing.ClassVar[javax.measure.Unit] = ...
    SIEMENS_PER_METRE: typing.ClassVar[javax.measure.Unit] = ...
    HENRY: typing.ClassVar[javax.measure.Unit] = ...
    VOLT: typing.ClassVar[javax.measure.Unit] = ...
    OHM: typing.ClassVar[javax.measure.Unit] = ...
    JOULE: typing.ClassVar[javax.measure.Unit] = ...
    WATT_SECOND: typing.ClassVar[javax.measure.Unit] = ...
    WATT_HOUR: typing.ClassVar[javax.measure.Unit] = ...
    KILOWATT_HOUR: typing.ClassVar[javax.measure.Unit] = ...
    MEGAWATT_HOUR: typing.ClassVar[javax.measure.Unit] = ...
    VAR: typing.ClassVar[javax.measure.Unit] = ...
    KILOVAR: typing.ClassVar[javax.measure.Unit] = ...
    VAR_HOUR: typing.ClassVar[javax.measure.Unit] = ...
    KILOVAR_HOUR: typing.ClassVar[javax.measure.Unit] = ...
    VOLT_AMPERE: typing.ClassVar[javax.measure.Unit] = ...
    VOLT_AMPERE_HOUR: typing.ClassVar[javax.measure.Unit] = ...
    NEWTON: typing.ClassVar[javax.measure.Unit] = ...
    HERTZ: typing.ClassVar[javax.measure.Unit] = ...
    IRRADIANCE: typing.ClassVar[javax.measure.Unit] = ...
    MICROWATT_PER_SQUARE_CENTIMETRE: typing.ClassVar[javax.measure.Unit] = ...
    LUX: typing.ClassVar[javax.measure.Unit] = ...
    LUMEN: typing.ClassVar[javax.measure.Unit] = ...
    CANDELA: typing.ClassVar[javax.measure.Unit] = ...
    WEBER: typing.ClassVar[javax.measure.Unit] = ...
    TESLA: typing.ClassVar[javax.measure.Unit] = ...
    WATT: typing.ClassVar[javax.measure.Unit] = ...
    DECIBEL_MILLIWATTS: typing.ClassVar[javax.measure.Unit] = ...
    MILLIMETRE_OF_MERCURY: typing.ClassVar[javax.measure.Unit] = ...
    BAR: typing.ClassVar[javax.measure.Unit] = ...
    MILLIBAR: typing.ClassVar[javax.measure.Unit] = ...
    BECQUEREL: typing.ClassVar[javax.measure.Unit] = ...
    BECQUEREL_PER_CUBIC_METRE: typing.ClassVar[javax.measure.Unit] = ...
    GRAY: typing.ClassVar[javax.measure.Unit] = ...
    SIEVERT: typing.ClassVar[javax.measure.Unit] = ...
    MILLIMETRE_PER_HOUR: typing.ClassVar[javax.measure.Unit] = ...
    INCHES_PER_HOUR: typing.ClassVar[javax.measure.Unit] = ...
    METRE_PER_SECOND: typing.ClassVar[javax.measure.Unit] = ...
    KNOT: typing.ClassVar[javax.measure.Unit] = ...
    STERADIAN: typing.ClassVar[javax.measure.Unit] = ...
    KELVIN: typing.ClassVar[javax.measure.Unit] = ...
    SECOND: typing.ClassVar[javax.measure.Unit] = ...
    MINUTE: typing.ClassVar[javax.measure.Unit] = ...
    HOUR: typing.ClassVar[javax.measure.Unit] = ...
    DAY: typing.ClassVar[javax.measure.Unit] = ...
    WEEK: typing.ClassVar[javax.measure.Unit] = ...
    YEAR: typing.ClassVar[javax.measure.Unit] = ...
    LITRE: typing.ClassVar[javax.measure.Unit] = ...
    LITRE_PER_MINUTE: typing.ClassVar[javax.measure.Unit] = ...
    CUBICMETRE_PER_SECOND: typing.ClassVar[javax.measure.Unit] = ...
    CUBICMETRE_PER_MINUTE: typing.ClassVar[javax.measure.Unit] = ...
    CUBICMETRE_PER_HOUR: typing.ClassVar[javax.measure.Unit] = ...
    CUBICMETRE_PER_DAY: typing.ClassVar[javax.measure.Unit] = ...
    BIT: typing.ClassVar[javax.measure.Unit] = ...
    KILOBIT: typing.ClassVar[javax.measure.Unit] = ...
    MEGABIT: typing.ClassVar[javax.measure.Unit] = ...
    GIGABIT: typing.ClassVar[javax.measure.Unit] = ...
    TERABIT: typing.ClassVar[javax.measure.Unit] = ...
    PETABIT: typing.ClassVar[javax.measure.Unit] = ...
    BYTE: typing.ClassVar[javax.measure.Unit] = ...
    OCTET: typing.ClassVar[javax.measure.Unit] = ...
    KILOBYTE: typing.ClassVar[javax.measure.Unit] = ...
    MEGABYTE: typing.ClassVar[javax.measure.Unit] = ...
    GIGABYTE: typing.ClassVar[javax.measure.Unit] = ...
    TERABYTE: typing.ClassVar[javax.measure.Unit] = ...
    PETABYTE: typing.ClassVar[javax.measure.Unit] = ...
    KIBIBYTE: typing.ClassVar[javax.measure.Unit] = ...
    MEBIBYTE: typing.ClassVar[javax.measure.Unit] = ...
    GIBIBYTE: typing.ClassVar[javax.measure.Unit] = ...
    TEBIBYTE: typing.ClassVar[javax.measure.Unit] = ...
    PEBIBYTE: typing.ClassVar[javax.measure.Unit] = ...
    KIBIOCTET: typing.ClassVar[javax.measure.Unit] = ...
    MEBIOCTET: typing.ClassVar[javax.measure.Unit] = ...
    GIBIOCTET: typing.ClassVar[javax.measure.Unit] = ...
    TEBIOCTET: typing.ClassVar[javax.measure.Unit] = ...
    PEBIOCTET: typing.ClassVar[javax.measure.Unit] = ...
    BIT_PER_SECOND: typing.ClassVar[javax.measure.Unit] = ...
    KILOBIT_PER_SECOND: typing.ClassVar[javax.measure.Unit] = ...
    MEGABIT_PER_SECOND: typing.ClassVar[javax.measure.Unit] = ...
    GIGABIT_PER_SECOND: typing.ClassVar[javax.measure.Unit] = ...
    TERABIT_PER_SECOND: typing.ClassVar[javax.measure.Unit] = ...
    @classmethod
    def getInstance(cls) -> javax.measure.spi.SystemOfUnits: ...
    def getName(self) -> java.lang.String: ...

class CustomUnits: ...
