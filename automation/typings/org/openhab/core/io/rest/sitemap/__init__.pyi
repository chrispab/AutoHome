import java.lang
import java.util
import org.openhab.core.events
import org.openhab.core.io.rest.sitemap.internal
import org.openhab.core.model.core
import org.openhab.core.ui.items
import typing


class SitemapSubscriptionService(org.openhab.core.model.core.ModelRepositoryChangeListener, org.openhab.core.events.EventSubscriber):
    """
    Java class 'org.openhab.core.io.rest.sitemap.SitemapSubscriptionService'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            org.openhab.core.model.core.ModelRepositoryChangeListener,
            org.openhab.core.events.EventSubscriber
    
      Constructors:
        * SitemapSubscriptionService(java.util.Map, org.openhab.core.ui.items.ItemUIRegistry)
    
    """
    def __init__(self, config: typing.Union[java.util.Map[java.lang.String, typing.Any], typing.Mapping[java.lang.String, typing.Any]], itemUIRegistry: org.openhab.core.ui.items.ItemUIRegistry): ...
    def checkAliveClients(self) -> None: ...
    def createSubscription(self, callback: 'SitemapSubscriptionService.SitemapSubscriptionCallback') -> java.lang.String: ...
    def exists(self, subscriptionId: java.lang.String) -> bool: ...
    def getEventFilter(self) -> org.openhab.core.events.EventFilter: ...
    def getPageId(self, subscriptionId: java.lang.String) -> java.lang.String: ...
    def getSitemapName(self, subscriptionId: java.lang.String) -> java.lang.String: ...
    def getSubscribedEventTypes(self) -> java.util.Set[java.lang.String]: ...
    def modelChanged(self, modelName: java.lang.String, type: org.openhab.core.model.core.EventType) -> None: ...
    def receive(self, event: org.openhab.core.events.Event) -> None: ...
    def removeSubscription(self, subscriptionId: java.lang.String) -> None: ...
    def setPageId(self, subscriptionId: java.lang.String, sitemapName: java.lang.String, pageId: java.lang.String) -> None: ...
    class SitemapSubscriptionCallback(java.lang.Object):
        """
        Java class 'org.openhab.core.io.rest.sitemap.SitemapSubscriptionService$SitemapSubscriptionCallback'
        
        """
        def onEvent(self, event: org.openhab.core.io.rest.sitemap.internal.SitemapEvent) -> None: ...
        def onRelease(self, subscriptionId: java.lang.String) -> None: ...
