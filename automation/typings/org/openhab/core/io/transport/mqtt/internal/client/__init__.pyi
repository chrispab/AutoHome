import com.hivemq.client.mqtt
import com.hivemq.client.mqtt.mqtt3.message.publish
import com.hivemq.client.mqtt.mqtt5.message.publish
import java.lang
import java.util.concurrent
import javax.net.ssl
import org.openhab.core.io.transport.mqtt
import org.openhab.core.io.transport.mqtt.internal
import typing


class MqttAsyncClientWrapper(java.lang.Object):
    """
    Java class 'org.openhab.core.io.transport.mqtt.internal.client.MqttAsyncClientWrapper'
    
        Extends:
            java.lang.Object
    
      Constructors:
        * MqttAsyncClientWrapper()
    
    """
    def __init__(self): ...
    def connect(self, lwt: org.openhab.core.io.transport.mqtt.MqttWillAndTestament, keepAliveInterval: int, username: java.lang.String, password: java.lang.String) -> java.util.concurrent.CompletableFuture[typing.Any]: ...
    def disconnect(self) -> java.util.concurrent.CompletableFuture[None]: ...
    def getState(self) -> com.hivemq.client.mqtt.MqttClientState: ...
    def publish(self, topic: java.lang.String, payload: typing.List[int], retain: bool, qos: int) -> java.util.concurrent.CompletableFuture[typing.Any]: ...
    def subscribe(self, topic: java.lang.String, qos: int, subscription: org.openhab.core.io.transport.mqtt.internal.Subscription) -> java.util.concurrent.CompletableFuture[typing.Any]: ...
    def unsubscribe(self, topic: java.lang.String) -> java.util.concurrent.CompletableFuture[typing.Any]: ...

class Mqtt3AsyncClientWrapper(MqttAsyncClientWrapper):
    """
    Java class 'org.openhab.core.io.transport.mqtt.internal.client.Mqtt3AsyncClientWrapper'
    
        Extends:
            org.openhab.core.io.transport.mqtt.internal.client.MqttAsyncClientWrapper
    
      Constructors:
        * Mqtt3AsyncClientWrapper(java.lang.String, int, java.lang.String, org.openhab.core.io.transport.mqtt.MqttBrokerConnection.Protocol, boolean, org.openhab.core.io.transport.mqtt.MqttBrokerConnection.ConnectionCallback, javax.net.ssl.TrustManagerFactory)
    
    """
    def __init__(self, host: java.lang.String, port: int, clientId: java.lang.String, protocol: org.openhab.core.io.transport.mqtt.MqttBrokerConnection.Protocol, secure: bool, connectionCallback: org.openhab.core.io.transport.mqtt.MqttBrokerConnection.ConnectionCallback, trustManagerFactory: javax.net.ssl.TrustManagerFactory): ...
    def connect(self, lwt: org.openhab.core.io.transport.mqtt.MqttWillAndTestament, keepAliveInterval: int, username: java.lang.String, password: java.lang.String) -> java.util.concurrent.CompletableFuture[typing.Any]: ...
    def disconnect(self) -> java.util.concurrent.CompletableFuture[None]: ...
    def getState(self) -> com.hivemq.client.mqtt.MqttClientState: ...
    def publish(self, topic: java.lang.String, payload: typing.List[int], retain: bool, qos: int) -> java.util.concurrent.CompletableFuture[com.hivemq.client.mqtt.mqtt3.message.publish.Mqtt3Publish]: ...
    def subscribe(self, topic: java.lang.String, qos: int, subscription: org.openhab.core.io.transport.mqtt.internal.Subscription) -> java.util.concurrent.CompletableFuture[typing.Any]: ...
    def unsubscribe(self, topic: java.lang.String) -> java.util.concurrent.CompletableFuture[typing.Any]: ...

class Mqtt5AsyncClientWrapper(MqttAsyncClientWrapper):
    """
    Java class 'org.openhab.core.io.transport.mqtt.internal.client.Mqtt5AsyncClientWrapper'
    
        Extends:
            org.openhab.core.io.transport.mqtt.internal.client.MqttAsyncClientWrapper
    
      Constructors:
        * Mqtt5AsyncClientWrapper(java.lang.String, int, java.lang.String, org.openhab.core.io.transport.mqtt.MqttBrokerConnection.Protocol, boolean, org.openhab.core.io.transport.mqtt.MqttBrokerConnection.ConnectionCallback, javax.net.ssl.TrustManagerFactory)
    
    """
    def __init__(self, host: java.lang.String, port: int, clientId: java.lang.String, protocol: org.openhab.core.io.transport.mqtt.MqttBrokerConnection.Protocol, secure: bool, connectionCallback: org.openhab.core.io.transport.mqtt.MqttBrokerConnection.ConnectionCallback, trustManagerFactory: javax.net.ssl.TrustManagerFactory): ...
    def connect(self, lwt: org.openhab.core.io.transport.mqtt.MqttWillAndTestament, keepAliveInterval: int, username: java.lang.String, password: java.lang.String) -> java.util.concurrent.CompletableFuture[typing.Any]: ...
    def disconnect(self) -> java.util.concurrent.CompletableFuture[None]: ...
    def getState(self) -> com.hivemq.client.mqtt.MqttClientState: ...
    def publish(self, topic: java.lang.String, payload: typing.List[int], retain: bool, qos: int) -> java.util.concurrent.CompletableFuture[com.hivemq.client.mqtt.mqtt5.message.publish.Mqtt5PublishResult]: ...
    def subscribe(self, topic: java.lang.String, qos: int, subscription: org.openhab.core.io.transport.mqtt.internal.Subscription) -> java.util.concurrent.CompletableFuture[typing.Any]: ...
    def unsubscribe(self, topic: java.lang.String) -> java.util.concurrent.CompletableFuture[typing.Any]: ...
