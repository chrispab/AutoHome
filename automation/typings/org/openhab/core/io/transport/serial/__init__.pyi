import java.io
import java.lang
import java.net
import java.util.stream
import org
import typing


class PortInUseException(java.lang.Exception):
    """
    Java class 'org.openhab.core.io.transport.serial.PortInUseException'
    
        Extends:
            java.lang.Exception
    
      Constructors:
        * PortInUseException()
    
    """
    def __init__(self): ...

class ProtocolType(java.lang.Object):
    """
    Java class 'org.openhab.core.io.transport.serial.ProtocolType'
    
        Extends:
            java.lang.Object
    
      Constructors:
        * ProtocolType(org.openhab.core.io.transport.serial.ProtocolType.PathType, java.lang.String)
    
    """
    def __init__(self, pathType: 'ProtocolType.PathType', scheme: java.lang.String): ...
    def getPathType(self) -> 'ProtocolType.PathType': ...
    def getScheme(self) -> java.lang.String: ...
    def toString(self) -> java.lang.String: ...
    class PathType(java.lang.Enum[org.openhab.core.io.transport.serial.ProtocolType.PathType]):
        """
        Java class 'org.openhab.core.io.transport.serial.ProtocolType$PathType'
        
            Extends:
                java.lang.Enum
        
          Attributes:
            NET (org.openhab.core.io.transport.serial.ProtocolType$PathType): final static enum constant
            LOCAL (org.openhab.core.io.transport.serial.ProtocolType$PathType): final static enum constant
        
        """
        NET: typing.ClassVar['ProtocolType.PathType'] = ...
        LOCAL: typing.ClassVar['ProtocolType.PathType'] = ...
        @classmethod
        def fromURI(cls, uri: java.net.URI) -> 'ProtocolType.PathType': ...
        _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
        @classmethod
        @typing.overload
        def valueOf(cls, class_: typing.Type[_valueOf_0__T], string: java.lang.String) -> _valueOf_0__T: ...
        @classmethod
        @typing.overload
        def valueOf(cls, name: java.lang.String) -> 'ProtocolType.PathType': ...
        @classmethod
        def values(cls) -> typing.List['ProtocolType.PathType']: ...

class SerialPort(java.io.Closeable):
    """
    Java class 'org.openhab.core.io.transport.serial.SerialPort'
    
        Interfaces:
            java.io.Closeable
    
      Attributes:
        DATABITS_5 (int): final static field
        DATABITS_6 (int): final static field
        DATABITS_7 (int): final static field
        DATABITS_8 (int): final static field
        PARITY_NONE (int): final static field
        PARITY_ODD (int): final static field
        PARITY_EVEN (int): final static field
        PARITY_MARK (int): final static field
        PARITY_SPACE (int): final static field
        STOPBITS_1 (int): final static field
        STOPBITS_2 (int): final static field
        STOPBITS_1_5 (int): final static field
        FLOWCONTROL_NONE (int): final static field
        FLOWCONTROL_RTSCTS_IN (int): final static field
        FLOWCONTROL_RTSCTS_OUT (int): final static field
        FLOWCONTROL_XONXOFF_IN (int): final static field
        FLOWCONTROL_XONXOFF_OUT (int): final static field
    
    """
    DATABITS_5: typing.ClassVar[int] = ...
    DATABITS_6: typing.ClassVar[int] = ...
    DATABITS_7: typing.ClassVar[int] = ...
    DATABITS_8: typing.ClassVar[int] = ...
    PARITY_NONE: typing.ClassVar[int] = ...
    PARITY_ODD: typing.ClassVar[int] = ...
    PARITY_EVEN: typing.ClassVar[int] = ...
    PARITY_MARK: typing.ClassVar[int] = ...
    PARITY_SPACE: typing.ClassVar[int] = ...
    STOPBITS_1: typing.ClassVar[int] = ...
    STOPBITS_2: typing.ClassVar[int] = ...
    STOPBITS_1_5: typing.ClassVar[int] = ...
    FLOWCONTROL_NONE: typing.ClassVar[int] = ...
    FLOWCONTROL_RTSCTS_IN: typing.ClassVar[int] = ...
    FLOWCONTROL_RTSCTS_OUT: typing.ClassVar[int] = ...
    FLOWCONTROL_XONXOFF_IN: typing.ClassVar[int] = ...
    FLOWCONTROL_XONXOFF_OUT: typing.ClassVar[int] = ...
    def addEventListener(self, listener: 'SerialPortEventListener') -> None: ...
    def close(self) -> None: ...
    def disableReceiveTimeout(self) -> None: ...
    def enableReceiveThreshold(self, i: int) -> None: ...
    def enableReceiveTimeout(self, timeout: int) -> None: ...
    def getInputStream(self) -> java.io.InputStream: ...
    def getName(self) -> java.lang.String: ...
    def getOutputStream(self) -> java.io.OutputStream: ...
    def notifyOnBreakInterrupt(self, enable: bool) -> None: ...
    def notifyOnDataAvailable(self, enable: bool) -> None: ...
    def notifyOnFramingError(self, enable: bool) -> None: ...
    def notifyOnOverrunError(self, enable: bool) -> None: ...
    def notifyOnParityError(self, enable: bool) -> None: ...
    def removeEventListener(self) -> None: ...
    def setFlowControlMode(self, flowcontrolRtsctsOut: int) -> None: ...
    def setRTS(self, rts: bool) -> None: ...
    def setSerialPortParams(self, baudrate: int, dataBits: int, stopBits: int, parity: int) -> None: ...

class SerialPortEvent(java.lang.Object):
    """
    @NonNullByDefault public interface SerialPortEvent
    
        Interface for a serial port event.
    
    
    """
    DATA_AVAILABLE: typing.ClassVar[int] = ...
    OUTPUT_BUFFER_EMPTY: typing.ClassVar[int] = ...
    CTS: typing.ClassVar[int] = ...
    DSR: typing.ClassVar[int] = ...
    RI: typing.ClassVar[int] = ...
    CD: typing.ClassVar[int] = ...
    OE: typing.ClassVar[int] = ...
    PE: typing.ClassVar[int] = ...
    FE: typing.ClassVar[int] = ...
    BI: typing.ClassVar[int] = ...
    def getEventType(self) -> int: ...
    def getNewValue(self) -> bool: ...

class SerialPortEventListener(java.lang.Object):
    """
    @NonNullByDefault public interface SerialPortEventListener
    
        Interface of a serial port event listener.
    
    
    """
    def serialEvent(self, event: SerialPortEvent) -> None: ...

class SerialPortIdentifier(java.lang.Object):
    """
    @NonNullByDefault public interface SerialPortIdentifier
    
        Interface of a serial port identifier.
    
    
    """
    def getCurrentOwner(self) -> java.lang.String: ...
    def getName(self) -> java.lang.String: ...
    def isCurrentlyOwned(self) -> bool: ...
    def open(self, owner: java.lang.String, timeout: int) -> SerialPort: ...

class SerialPortManager(java.lang.Object):
    """
    @NonNullByDefault public interface SerialPortManager
    
        Interface for a serial port manager.
    
    
    """
    def getIdentifier(self, name: java.lang.String) -> SerialPortIdentifier: ...
    def getIdentifiers(self) -> java.util.stream.Stream[SerialPortIdentifier]: ...

class SerialPortProvider(java.lang.Object):
    """
    @NonNullByDefault public interface SerialPortProvider
    
        Provides a concrete SerialPort which can handle remote (e.g. via rfc2217) or local ports.
    
    
    """
    def getAcceptedProtocols(self) -> java.util.stream.Stream[ProtocolType]: ...
    def getPortIdentifier(self, portName: java.net.URI) -> SerialPortIdentifier: ...
    def getSerialPortIdentifiers(self) -> java.util.stream.Stream[SerialPortIdentifier]: ...

class UnsupportedCommOperationException(java.lang.Exception):
    """
    Java class 'org.openhab.core.io.transport.serial.UnsupportedCommOperationException'
    
        Extends:
            java.lang.Exception
    
      Constructors:
        * UnsupportedCommOperationException()
        * UnsupportedCommOperationException(java.lang.Throwable)
    
    """
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, cause: java.lang.Throwable): ...
