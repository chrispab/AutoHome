import java.lang
import java.net
import java.util
import org.jupnp
import org.jupnp.controlpoint
import org.jupnp.model.meta
import org.jupnp.registry
import org.openhab.core.io.transport.upnp
import typing


class UpnpIOServiceImpl(org.openhab.core.io.transport.upnp.UpnpIOService, org.jupnp.registry.RegistryListener):
    """
    Java class 'org.openhab.core.io.transport.upnp.internal.UpnpIOServiceImpl'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            org.openhab.core.io.transport.upnp.UpnpIOService,
            org.jupnp.registry.RegistryListener
    
      Constructors:
        * UpnpIOServiceImpl(org.jupnp.UpnpService)
    
    """
    def __init__(self, upnpService: org.jupnp.UpnpService): ...
    def activate(self) -> None: ...
    def addStatusListener(self, participant: org.openhab.core.io.transport.upnp.UpnpIOParticipant, serviceID: java.lang.String, actionID: java.lang.String, interval: int) -> None: ...
    def addSubscription(self, participant: org.openhab.core.io.transport.upnp.UpnpIOParticipant, serviceID: java.lang.String, duration: int) -> None: ...
    def afterShutdown(self) -> None: ...
    def beforeShutdown(self, registry: org.jupnp.registry.Registry) -> None: ...
    def deactivate(self) -> None: ...
    def getDescriptorURL(self, participant: org.openhab.core.io.transport.upnp.UpnpIOParticipant) -> java.net.URL: ...
    def invokeAction(self, participant: org.openhab.core.io.transport.upnp.UpnpIOParticipant, serviceID: java.lang.String, actionID: java.lang.String, inputs: typing.Union[java.util.Map[java.lang.String, java.lang.String], typing.Mapping[java.lang.String, java.lang.String]]) -> java.util.Map[java.lang.String, java.lang.String]: ...
    def isRegistered(self, participant: org.openhab.core.io.transport.upnp.UpnpIOParticipant) -> bool: ...
    def localDeviceAdded(self, registry: org.jupnp.registry.Registry, device: org.jupnp.model.meta.LocalDevice) -> None: ...
    def localDeviceRemoved(self, registry: org.jupnp.registry.Registry, device: org.jupnp.model.meta.LocalDevice) -> None: ...
    def registerParticipant(self, participant: org.openhab.core.io.transport.upnp.UpnpIOParticipant) -> None: ...
    def remoteDeviceAdded(self, registry: org.jupnp.registry.Registry, device: org.jupnp.model.meta.RemoteDevice) -> None: ...
    def remoteDeviceDiscoveryFailed(self, registry: org.jupnp.registry.Registry, device: org.jupnp.model.meta.RemoteDevice, ex: java.lang.Exception) -> None: ...
    def remoteDeviceDiscoveryStarted(self, registry: org.jupnp.registry.Registry, device: org.jupnp.model.meta.RemoteDevice) -> None: ...
    def remoteDeviceRemoved(self, registry: org.jupnp.registry.Registry, device: org.jupnp.model.meta.RemoteDevice) -> None: ...
    def remoteDeviceUpdated(self, registry: org.jupnp.registry.Registry, device: org.jupnp.model.meta.RemoteDevice) -> None: ...
    def removeStatusListener(self, participant: org.openhab.core.io.transport.upnp.UpnpIOParticipant) -> None: ...
    def removeSubscription(self, participant: org.openhab.core.io.transport.upnp.UpnpIOParticipant, serviceID: java.lang.String) -> None: ...
    def unregisterParticipant(self, participant: org.openhab.core.io.transport.upnp.UpnpIOParticipant) -> None: ...
    class UpnpSubscriptionCallback(org.jupnp.controlpoint.SubscriptionCallback):
        """
        Java class 'org.openhab.core.io.transport.upnp.internal.UpnpIOServiceImpl$UpnpSubscriptionCallback'
        
            Extends:
                org.jupnp.controlpoint.SubscriptionCallback
        
          Constructors:
            * UpnpSubscriptionCallback(org.openhab.core.io.transport.upnp.internal.UpnpIOServiceImpl, org.jupnp.model.meta.Service)
            * UpnpSubscriptionCallback(org.openhab.core.io.transport.upnp.internal.UpnpIOServiceImpl, org.jupnp.model.meta.Service, int)
        
        """
        @typing.overload
        def __init__(self, service: org.jupnp.model.meta.Service): ...
        @typing.overload
        def __init__(self, service: org.jupnp.model.meta.Service, requestedDurationSeconds: int): ...
