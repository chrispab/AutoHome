import java.lang
import java.util
import java.util.stream
import org.eclipse.emf.common.util
import org.eclipse.emf.ecore
import org.openhab.core.common.registry
import org.openhab.core.items
import org.openhab.core.library.types
import org.openhab.core.model.sitemap.sitemap
import org.openhab.core.types
import org.openhab.core.ui.items
import typing


class ItemUIRegistryImpl(org.openhab.core.ui.items.ItemUIRegistry):
    """
    Java class 'org.openhab.core.ui.internal.items.ItemUIRegistryImpl'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            org.openhab.core.ui.items.ItemUIRegistry
    
      Constructors:
        * ItemUIRegistryImpl(org.openhab.core.items.ItemRegistry)
    
    """
    def __init__(self, itemRegistry: org.openhab.core.items.ItemRegistry): ...
    @typing.overload
    def add(self, identifiable: org.openhab.core.common.registry.Identifiable) -> org.openhab.core.common.registry.Identifiable: ...
    @typing.overload
    def add(self, element: org.openhab.core.items.Item) -> org.openhab.core.items.Item: ...
    def addItemUIProvider(self, itemUIProvider: org.openhab.core.ui.items.ItemUIProvider) -> None: ...
    def addRegistryChangeListener(self, listener: org.openhab.core.common.registry.RegistryChangeListener[org.openhab.core.items.Item]) -> None: ...
    def addRegistryHook(self, hook: org.openhab.core.items.RegistryHook[org.openhab.core.items.Item]) -> None: ...
    def convertState(self, w: org.openhab.core.model.sitemap.sitemap.Widget, i: org.openhab.core.items.Item, state: org.openhab.core.types.State) -> org.openhab.core.types.State: ...
    def convertStateToLabelUnit(self, state: org.openhab.core.library.types.QuantityType[typing.Any], label: java.lang.String) -> org.openhab.core.types.State: ...
    @typing.overload
    def get(self, object: typing.Any) -> org.openhab.core.common.registry.Identifiable: ...
    @typing.overload
    def get(self, key: java.lang.String) -> org.openhab.core.items.Item: ...
    def getAll(self) -> java.util.Collection[org.openhab.core.items.Item]: ...
    @typing.overload
    def getCategory(self, itemName: java.lang.String) -> java.lang.String: ...
    @typing.overload
    def getCategory(self, w: org.openhab.core.model.sitemap.sitemap.Widget) -> java.lang.String: ...
    @typing.overload
    def getChildren(self, w: org.openhab.core.model.sitemap.sitemap.LinkableWidget) -> org.eclipse.emf.common.util.EList[org.openhab.core.model.sitemap.sitemap.Widget]: ...
    @typing.overload
    def getChildren(self, sitemap: org.openhab.core.model.sitemap.sitemap.Sitemap) -> org.eclipse.emf.common.util.EList[org.openhab.core.model.sitemap.sitemap.Widget]: ...
    def getDefaultWidget(self, targetItemType: typing.Type[org.openhab.core.items.Item], itemName: java.lang.String) -> org.openhab.core.model.sitemap.sitemap.Widget: ...
    def getItem(self, name: java.lang.String) -> org.openhab.core.items.Item: ...
    def getItemByPattern(self, name: java.lang.String) -> org.openhab.core.items.Item: ...
    def getItemCategory(self, itemName: java.lang.String) -> java.lang.String: ...
    def getItemState(self, itemName: java.lang.String) -> org.openhab.core.types.State: ...
    @typing.overload
    def getItems(self) -> java.util.Collection[org.openhab.core.items.Item]: ...
    @typing.overload
    def getItems(self, pattern: java.lang.String) -> java.util.Collection[org.openhab.core.items.Item]: ...
    _getItemsByTag_0__T = typing.TypeVar('_getItemsByTag_0__T', bound=org.openhab.core.items.Item)  # <T>
    @typing.overload
    def getItemsByTag(self, typeFilter: typing.Type[_getItemsByTag_0__T], tags: typing.List[java.lang.String]) -> java.util.Collection[_getItemsByTag_0__T]: ...
    @typing.overload
    def getItemsByTag(self, tags: typing.List[java.lang.String]) -> java.util.Collection[org.openhab.core.items.Item]: ...
    def getItemsByTagAndType(self, type: java.lang.String, tags: typing.List[java.lang.String]) -> java.util.Collection[org.openhab.core.items.Item]: ...
    def getItemsOfType(self, type: java.lang.String) -> java.util.Collection[org.openhab.core.items.Item]: ...
    @typing.overload
    def getLabel(self, itemName: java.lang.String) -> java.lang.String: ...
    @typing.overload
    def getLabel(self, w: org.openhab.core.model.sitemap.sitemap.Widget) -> java.lang.String: ...
    def getLabelColor(self, w: org.openhab.core.model.sitemap.sitemap.Widget) -> java.lang.String: ...
    def getParent(self, w: org.openhab.core.model.sitemap.sitemap.Widget) -> org.eclipse.emf.ecore.EObject: ...
    def getState(self, w: org.openhab.core.model.sitemap.sitemap.Widget) -> org.openhab.core.types.State: ...
    def getUnitForWidget(self, w: org.openhab.core.model.sitemap.sitemap.Widget) -> java.lang.String: ...
    def getValueColor(self, w: org.openhab.core.model.sitemap.sitemap.Widget) -> java.lang.String: ...
    def getVisiblity(self, w: org.openhab.core.model.sitemap.sitemap.Widget) -> bool: ...
    @typing.overload
    def getWidget(self, itemName: java.lang.String) -> org.openhab.core.model.sitemap.sitemap.Widget: ...
    @typing.overload
    def getWidget(self, sitemap: org.openhab.core.model.sitemap.sitemap.Sitemap, id: java.lang.String) -> org.openhab.core.model.sitemap.sitemap.Widget: ...
    def getWidgetId(self, widget: org.openhab.core.model.sitemap.sitemap.Widget) -> java.lang.String: ...
    @typing.overload
    def remove(self, object: typing.Any) -> org.openhab.core.common.registry.Identifiable: ...
    @typing.overload
    def remove(self, key: java.lang.String) -> org.openhab.core.items.Item: ...
    @typing.overload
    def remove(self, itemName: java.lang.String, recursive: bool) -> org.openhab.core.items.Item: ...
    def removeItemUIProvider(self, itemUIProvider: org.openhab.core.ui.items.ItemUIProvider) -> None: ...
    def removeRegistryChangeListener(self, listener: org.openhab.core.common.registry.RegistryChangeListener[org.openhab.core.items.Item]) -> None: ...
    def removeRegistryHook(self, hook: org.openhab.core.items.RegistryHook[org.openhab.core.items.Item]) -> None: ...
    def stream(self) -> java.util.stream.Stream[org.openhab.core.items.Item]: ...
    @typing.overload
    def update(self, identifiable: org.openhab.core.common.registry.Identifiable) -> org.openhab.core.common.registry.Identifiable: ...
    @typing.overload
    def update(self, element: org.openhab.core.items.Item) -> org.openhab.core.items.Item: ...
