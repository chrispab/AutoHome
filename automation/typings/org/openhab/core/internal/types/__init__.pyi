import java.lang
import java.math
import java.util
import org.openhab.core.types
import typing


class CommandDescriptionImpl(org.openhab.core.types.CommandDescription):
    """
    Java class 'org.openhab.core.internal.types.CommandDescriptionImpl'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            org.openhab.core.types.CommandDescription
    
      Constructors:
        * CommandDescriptionImpl()
    
    """
    def __init__(self): ...
    def addCommandOption(self, commandOption: org.openhab.core.types.CommandOption) -> None: ...
    def equals(self, obj: typing.Any) -> bool: ...
    def getCommandOptions(self) -> java.util.List[org.openhab.core.types.CommandOption]: ...
    def hashCode(self) -> int: ...
    def toString(self) -> java.lang.String: ...

class StateDescriptionFragmentImpl(org.openhab.core.types.StateDescriptionFragment):
    """
    Java class 'org.openhab.core.internal.types.StateDescriptionFragmentImpl'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            org.openhab.core.types.StateDescriptionFragment
    
      Constructors:
        * StateDescriptionFragmentImpl(org.openhab.core.internal.types.StateDescriptionFragmentImpl)
        * StateDescriptionFragmentImpl(org.openhab.core.types.StateDescription)
        * StateDescriptionFragmentImpl(java.math.BigDecimal, java.math.BigDecimal, java.math.BigDecimal, java.lang.String, java.lang.Boolean, java.util.List)
        * StateDescriptionFragmentImpl()
    
    """
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, minimum: java.math.BigDecimal, maximum: java.math.BigDecimal, step: java.math.BigDecimal, pattern: java.lang.String, readOnly: bool, options: java.util.List[org.openhab.core.types.StateOption]): ...
    @typing.overload
    def __init__(self, source: 'StateDescriptionFragmentImpl'): ...
    @typing.overload
    def __init__(self, legacy: org.openhab.core.types.StateDescription): ...
    def equals(self, obj: typing.Any) -> bool: ...
    def getMaximum(self) -> java.math.BigDecimal: ...
    def getMinimum(self) -> java.math.BigDecimal: ...
    def getOptions(self) -> java.util.List[org.openhab.core.types.StateOption]: ...
    def getPattern(self) -> java.lang.String: ...
    def getStep(self) -> java.math.BigDecimal: ...
    def hashCode(self) -> int: ...
    def isReadOnly(self) -> bool: ...
    def merge(self, fragment: org.openhab.core.types.StateDescriptionFragment) -> org.openhab.core.types.StateDescriptionFragment: ...
    def setMaximum(self, maximum: java.math.BigDecimal) -> None: ...
    def setMinimum(self, minimum: java.math.BigDecimal) -> None: ...
    def setOptions(self, options: java.util.List[org.openhab.core.types.StateOption]) -> None: ...
    def setPattern(self, pattern: java.lang.String) -> None: ...
    def setReadOnly(self, readOnly: bool) -> None: ...
    def setStep(self, step: java.math.BigDecimal) -> None: ...
    def toStateDescription(self) -> org.openhab.core.types.StateDescription: ...
    def toString(self) -> java.lang.String: ...
