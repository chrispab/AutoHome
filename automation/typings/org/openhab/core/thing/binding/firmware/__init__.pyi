import java.io
import java.lang
import java.net
import java.util
import java.util.function
import org
import org.openhab.core.thing
import typing


class Firmware(java.lang.Comparable[org.openhab.core.thing.binding.firmware.Firmware]):
    """
    Java class 'org.openhab.core.thing.binding.firmware.Firmware'
    
        Interfaces:
            java.lang.Comparable
    
      Attributes:
        PROPERTY_REQUIRES_FACTORY_RESET (java.lang.String): final static field
    
    """
    PROPERTY_REQUIRES_FACTORY_RESET: typing.ClassVar[java.lang.String] = ...
    def getBytes(self) -> typing.List[int]: ...
    def getChangelog(self) -> java.lang.String: ...
    def getDescription(self) -> java.lang.String: ...
    def getFirmwareRestriction(self) -> 'FirmwareRestriction': ...
    def getInputStream(self) -> java.io.InputStream: ...
    def getMd5Hash(self) -> java.lang.String: ...
    def getModel(self) -> java.lang.String: ...
    def getOnlineChangelog(self) -> java.net.URL: ...
    def getPrerequisiteVersion(self) -> java.lang.String: ...
    def getProperties(self) -> java.util.Map[java.lang.String, java.lang.String]: ...
    def getThingTypeUID(self) -> org.openhab.core.thing.ThingTypeUID: ...
    def getVendor(self) -> java.lang.String: ...
    def getVersion(self) -> java.lang.String: ...
    def isModelRestricted(self) -> bool: ...
    def isSuccessorVersion(self, firmwareVersion: java.lang.String) -> bool: ...
    def isSuitableFor(self, thing: org.openhab.core.thing.Thing) -> bool: ...

class FirmwareBuilder(java.lang.Object):
    """
    Java class 'org.openhab.core.thing.binding.firmware.FirmwareBuilder'
    
        Extends:
            java.lang.Object
    
    """
    def build(self) -> Firmware: ...
    @classmethod
    def create(cls, thingTypeUID: org.openhab.core.thing.ThingTypeUID, firmwareVersion: java.lang.String) -> 'FirmwareBuilder': ...
    def withChangelog(self, changelog: java.lang.String) -> 'FirmwareBuilder': ...
    def withDescription(self, description: java.lang.String) -> 'FirmwareBuilder': ...
    def withFirmwareRestriction(self, firmwareRestriction: 'FirmwareRestriction') -> 'FirmwareBuilder': ...
    def withInputStream(self, inputStream: java.io.InputStream) -> 'FirmwareBuilder': ...
    def withMd5Hash(self, md5Hash: java.lang.String) -> 'FirmwareBuilder': ...
    def withModel(self, model: java.lang.String) -> 'FirmwareBuilder': ...
    def withModelRestricted(self, modelRestricted: bool) -> 'FirmwareBuilder': ...
    def withOnlineChangelog(self, onlineChangelog: java.net.URL) -> 'FirmwareBuilder': ...
    def withPrerequisiteVersion(self, prerequisiteVersion: java.lang.String) -> 'FirmwareBuilder': ...
    def withProperties(self, properties: typing.Union[java.util.Map[java.lang.String, java.lang.String], typing.Mapping[java.lang.String, java.lang.String]]) -> 'FirmwareBuilder': ...
    def withVendor(self, vendor: java.lang.String) -> 'FirmwareBuilder': ...

class FirmwareRestriction(java.util.function.Function[org.openhab.core.thing.Thing, bool]):
    """
    Java class 'org.openhab.core.thing.binding.firmware.FirmwareRestriction'
    
        Interfaces:
            java.util.function.Function
    
    """

class FirmwareUpdateHandler(java.lang.Object):
    """
    @NonNullByDefault public interface FirmwareUpdateHandler
    
        The :class:`~org.openhab.core.thing.binding.firmware.FirmwareUpdateHandler` can be implemented and registered as an OSGi
        service in order to update the firmware for the physical device of a :class:`~org.openhab.core.thing.Thing`. The
        :class:`~org.openhab.core.thing.firmware.FirmwareUpdateService` tracks each firmware update handler and starts the
        firmware update process by the operation :code:`FirmwareUpdateService#updateFirmware(org.openhab.core.thing.ThingUID,
        FirmwareUID, java.util.Locale)` .
    
    
    """
    def cancel(self) -> None: ...
    def getThing(self) -> org.openhab.core.thing.Thing: ...
    def isUpdateExecutable(self) -> bool: ...
    def updateFirmware(self, firmware: Firmware, progressCallback: 'ProgressCallback') -> None: ...

class ProgressCallback(java.lang.Object):
    """
    Java class 'org.openhab.core.thing.binding.firmware.ProgressCallback'
    
    """
    def canceled(self) -> None: ...
    def defineSequence(self, sequence: typing.List['ProgressStep']) -> None: ...
    def failed(self, errorMessageKey: java.lang.String, arguments: typing.List[typing.Any]) -> None: ...
    def next(self) -> None: ...
    def pending(self) -> None: ...
    def success(self) -> None: ...
    def update(self, progress: int) -> None: ...

class ProgressStep(java.lang.Enum[org.openhab.core.thing.binding.firmware.ProgressStep]):
    """
    Java class 'org.openhab.core.thing.binding.firmware.ProgressStep'
    
        Extends:
            java.lang.Enum
    
      Attributes:
        DOWNLOADING (org.openhab.core.thing.binding.firmware.ProgressStep): final static enum constant
        WAITING (org.openhab.core.thing.binding.firmware.ProgressStep): final static enum constant
        TRANSFERRING (org.openhab.core.thing.binding.firmware.ProgressStep): final static enum constant
        UPDATING (org.openhab.core.thing.binding.firmware.ProgressStep): final static enum constant
        REBOOTING (org.openhab.core.thing.binding.firmware.ProgressStep): final static enum constant
    
    """
    DOWNLOADING: typing.ClassVar['ProgressStep'] = ...
    WAITING: typing.ClassVar['ProgressStep'] = ...
    TRANSFERRING: typing.ClassVar['ProgressStep'] = ...
    UPDATING: typing.ClassVar['ProgressStep'] = ...
    REBOOTING: typing.ClassVar['ProgressStep'] = ...
    _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
    @classmethod
    @typing.overload
    def valueOf(cls, class_: typing.Type[_valueOf_0__T], string: java.lang.String) -> _valueOf_0__T: ...
    @classmethod
    @typing.overload
    def valueOf(cls, name: java.lang.String) -> 'ProgressStep': ...
    @classmethod
    def values(cls) -> typing.List['ProgressStep']: ...

class FirmwareUpdateBackgroundTransferHandler(FirmwareUpdateHandler):
    """
    Java class 'org.openhab.core.thing.binding.firmware.FirmwareUpdateBackgroundTransferHandler'
    
        Interfaces:
            org.openhab.core.thing.binding.firmware.FirmwareUpdateHandler
    
    """
    def transferFirmware(self, firmware: Firmware) -> None: ...
