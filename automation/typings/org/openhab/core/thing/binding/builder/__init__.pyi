import java.lang
import java.util
import org.openhab.core.config.core
import org.openhab.core.thing
import org.openhab.core.thing.type
import typing


class ChannelBuilder(java.lang.Object):
    """
    Java class 'org.openhab.core.thing.binding.builder.ChannelBuilder'
    
        Extends:
            java.lang.Object
    
    """
    def build(self) -> org.openhab.core.thing.Channel: ...
    @classmethod
    @typing.overload
    def create(cls, channel: org.openhab.core.thing.Channel) -> 'ChannelBuilder': ...
    @classmethod
    @typing.overload
    def create(cls, channelUID: org.openhab.core.thing.ChannelUID) -> 'ChannelBuilder': ...
    @classmethod
    @typing.overload
    def create(cls, channelUID: org.openhab.core.thing.ChannelUID, acceptedItemType: java.lang.String) -> 'ChannelBuilder': ...
    def withAcceptedItemType(self, acceptedItemType: java.lang.String) -> 'ChannelBuilder': ...
    def withAutoUpdatePolicy(self, policy: org.openhab.core.thing.type.AutoUpdatePolicy) -> 'ChannelBuilder': ...
    def withConfiguration(self, configuration: org.openhab.core.config.core.Configuration) -> 'ChannelBuilder': ...
    def withDefaultTags(self, defaultTags: java.util.Set[java.lang.String]) -> 'ChannelBuilder': ...
    def withDescription(self, description: java.lang.String) -> 'ChannelBuilder': ...
    def withKind(self, kind: org.openhab.core.thing.type.ChannelKind) -> 'ChannelBuilder': ...
    def withLabel(self, label: java.lang.String) -> 'ChannelBuilder': ...
    def withProperties(self, properties: typing.Union[java.util.Map[java.lang.String, java.lang.String], typing.Mapping[java.lang.String, java.lang.String]]) -> 'ChannelBuilder': ...
    def withType(self, channelTypeUID: org.openhab.core.thing.type.ChannelTypeUID) -> 'ChannelBuilder': ...

class ThingBuilder(java.lang.Object):
    """
    Java class 'org.openhab.core.thing.binding.builder.ThingBuilder'
    
        Extends:
            java.lang.Object
    
    """
    def build(self) -> org.openhab.core.thing.Thing: ...
    @classmethod
    @typing.overload
    def create(cls, thingTypeUID: org.openhab.core.thing.ThingTypeUID, thingId: java.lang.String) -> 'ThingBuilder': ...
    @classmethod
    @typing.overload
    def create(cls, thingTypeUID: org.openhab.core.thing.ThingTypeUID, thingUID: org.openhab.core.thing.ThingUID) -> 'ThingBuilder': ...
    def withBridge(self, bridgeUID: org.openhab.core.thing.ThingUID) -> 'ThingBuilder': ...
    def withChannel(self, channel: org.openhab.core.thing.Channel) -> 'ThingBuilder': ...
    @typing.overload
    def withChannels(self, channels: java.util.List[org.openhab.core.thing.Channel]) -> 'ThingBuilder': ...
    @typing.overload
    def withChannels(self, channels: typing.List[org.openhab.core.thing.Channel]) -> 'ThingBuilder': ...
    def withConfiguration(self, configuration: org.openhab.core.config.core.Configuration) -> 'ThingBuilder': ...
    def withLabel(self, label: java.lang.String) -> 'ThingBuilder': ...
    def withLocation(self, location: java.lang.String) -> 'ThingBuilder': ...
    def withProperties(self, properties: typing.Union[java.util.Map[java.lang.String, java.lang.String], typing.Mapping[java.lang.String, java.lang.String]]) -> 'ThingBuilder': ...
    def withoutChannel(self, channelUID: org.openhab.core.thing.ChannelUID) -> 'ThingBuilder': ...
    @typing.overload
    def withoutChannels(self, channels: java.util.List[org.openhab.core.thing.Channel]) -> 'ThingBuilder': ...
    @typing.overload
    def withoutChannels(self, channels: typing.List[org.openhab.core.thing.Channel]) -> 'ThingBuilder': ...

class ThingStatusInfoBuilder(java.lang.Object):
    """
    Java class 'org.openhab.core.thing.binding.builder.ThingStatusInfoBuilder'
    
        Extends:
            java.lang.Object
    
    """
    def build(self) -> org.openhab.core.thing.ThingStatusInfo: ...
    @classmethod
    @typing.overload
    def create(cls, status: org.openhab.core.thing.ThingStatus) -> 'ThingStatusInfoBuilder': ...
    @classmethod
    @typing.overload
    def create(cls, status: org.openhab.core.thing.ThingStatus, statusDetail: org.openhab.core.thing.ThingStatusDetail) -> 'ThingStatusInfoBuilder': ...
    def withDescription(self, description: java.lang.String) -> 'ThingStatusInfoBuilder': ...
    def withStatusDetail(self, statusDetail: org.openhab.core.thing.ThingStatusDetail) -> 'ThingStatusInfoBuilder': ...

class BridgeBuilder(ThingBuilder):
    """
    Java class 'org.openhab.core.thing.binding.builder.BridgeBuilder'
    
        Extends:
            org.openhab.core.thing.binding.builder.ThingBuilder
    
    """
    @typing.overload
    def build(self) -> org.openhab.core.thing.Bridge: ...
    @typing.overload
    def build(self) -> org.openhab.core.thing.Thing: ...
    @classmethod
    @typing.overload
    def create(cls, thingTypeUID: org.openhab.core.thing.ThingTypeUID, bridgeId: java.lang.String) -> 'BridgeBuilder': ...
    @classmethod
    @typing.overload
    def create(cls, thingTypeUID: org.openhab.core.thing.ThingTypeUID, thingUID: org.openhab.core.thing.ThingUID) -> 'BridgeBuilder': ...
    @classmethod
    @typing.overload
    def create(cls, thingTypeUID: org.openhab.core.thing.ThingTypeUID, thingId: java.lang.String) -> ThingBuilder: ...
    @classmethod
    @typing.overload
    def create(cls, thingTypeUID: org.openhab.core.thing.ThingTypeUID, thingUID: org.openhab.core.thing.ThingUID) -> ThingBuilder: ...
    @typing.overload
    def withBridge(self, bridgeUID: org.openhab.core.thing.ThingUID) -> 'BridgeBuilder': ...
    @typing.overload
    def withBridge(self, thingUID: org.openhab.core.thing.ThingUID) -> ThingBuilder: ...
    @typing.overload
    def withChannel(self, channel: org.openhab.core.thing.Channel) -> 'BridgeBuilder': ...
    @typing.overload
    def withChannel(self, channel: org.openhab.core.thing.Channel) -> ThingBuilder: ...
    @typing.overload
    def withChannels(self, channels: java.util.List[org.openhab.core.thing.Channel]) -> 'BridgeBuilder': ...
    @typing.overload
    def withChannels(self, channels: typing.List[org.openhab.core.thing.Channel]) -> 'BridgeBuilder': ...
    @typing.overload
    def withChannels(self, list: java.util.List) -> ThingBuilder: ...
    @typing.overload
    def withChannels(self, channelArray: typing.List[org.openhab.core.thing.Channel]) -> ThingBuilder: ...
    @typing.overload
    def withConfiguration(self, thingConfiguration: org.openhab.core.config.core.Configuration) -> 'BridgeBuilder': ...
    @typing.overload
    def withConfiguration(self, configuration: org.openhab.core.config.core.Configuration) -> ThingBuilder: ...
    @typing.overload
    def withLabel(self, label: java.lang.String) -> 'BridgeBuilder': ...
    @typing.overload
    def withLabel(self, string: java.lang.String) -> ThingBuilder: ...
    @typing.overload
    def withLocation(self, location: java.lang.String) -> 'BridgeBuilder': ...
    @typing.overload
    def withLocation(self, string: java.lang.String) -> ThingBuilder: ...
    @typing.overload
    def withProperties(self, properties: typing.Union[java.util.Map[java.lang.String, java.lang.String], typing.Mapping[java.lang.String, java.lang.String]]) -> 'BridgeBuilder': ...
    @typing.overload
    def withProperties(self, map: java.util.Map) -> ThingBuilder: ...
    @typing.overload
    def withoutChannel(self, channelUID: org.openhab.core.thing.ChannelUID) -> 'BridgeBuilder': ...
    @typing.overload
    def withoutChannel(self, channelUID: org.openhab.core.thing.ChannelUID) -> ThingBuilder: ...
    @typing.overload
    def withoutChannels(self, channels: java.util.List[org.openhab.core.thing.Channel]) -> 'BridgeBuilder': ...
    @typing.overload
    def withoutChannels(self, channels: typing.List[org.openhab.core.thing.Channel]) -> 'BridgeBuilder': ...
    @typing.overload
    def withoutChannels(self, list: java.util.List) -> ThingBuilder: ...
    @typing.overload
    def withoutChannels(self, channelArray: typing.List[org.openhab.core.thing.Channel]) -> ThingBuilder: ...
