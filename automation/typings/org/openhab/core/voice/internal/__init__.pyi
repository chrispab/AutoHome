import java.lang
import java.net
import java.util
import org.openhab.core.audio
import org.openhab.core.config.core
import org.openhab.core.events
import org.openhab.core.i18n
import org.openhab.core.io.console
import org.openhab.core.io.console.extensions
import org.openhab.core.items
import org.openhab.core.library.types
import org.openhab.core.voice
import org.openhab.core.voice.text
import typing


class DialogProcessor(org.openhab.core.voice.KSListener, org.openhab.core.voice.STTListener):
    """
    Java class 'org.openhab.core.voice.internal.DialogProcessor'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            org.openhab.core.voice.KSListener,
            org.openhab.core.voice.STTListener
    
      Constructors:
        * DialogProcessor(org.openhab.core.voice.KSService, org.openhab.core.voice.STTService, org.openhab.core.voice.TTSService, org.openhab.core.voice.text.HumanLanguageInterpreter, org.openhab.core.audio.AudioSource, org.openhab.core.audio.AudioSink, java.util.Locale, java.lang.String, java.lang.String, org.openhab.core.events.EventPublisher)
    
    """
    def __init__(self, ks: org.openhab.core.voice.KSService, stt: org.openhab.core.voice.STTService, tts: org.openhab.core.voice.TTSService, hli: org.openhab.core.voice.text.HumanLanguageInterpreter, source: org.openhab.core.audio.AudioSource, sink: org.openhab.core.audio.AudioSink, locale: java.util.Locale, keyword: java.lang.String, listeningItem: java.lang.String, eventPublisher: org.openhab.core.events.EventPublisher): ...
    def ksEventReceived(self, ksEvent: org.openhab.core.voice.KSEvent) -> None: ...
    def start(self) -> None: ...
    def sttEventReceived(self, sttEvent: org.openhab.core.voice.STTEvent) -> None: ...

class VoiceConsoleCommandExtension(org.openhab.core.io.console.extensions.AbstractConsoleCommandExtension):
    """
    Java class 'org.openhab.core.voice.internal.VoiceConsoleCommandExtension'
    
        Extends:
            org.openhab.core.io.console.extensions.AbstractConsoleCommandExtension
    
      Constructors:
        * VoiceConsoleCommandExtension(org.openhab.core.voice.VoiceManager, org.openhab.core.i18n.LocaleProvider, org.openhab.core.items.ItemRegistry)
    
    """
    def __init__(self, voiceManager: org.openhab.core.voice.VoiceManager, localeProvider: org.openhab.core.i18n.LocaleProvider, itemRegistry: org.openhab.core.items.ItemRegistry): ...
    def execute(self, args: typing.List[java.lang.String], console: org.openhab.core.io.console.Console) -> None: ...
    def getUsages(self) -> java.util.List[java.lang.String]: ...

class VoiceManagerImpl(org.openhab.core.voice.VoiceManager, org.openhab.core.config.core.ConfigOptionProvider):
    """
    Java class 'org.openhab.core.voice.internal.VoiceManagerImpl'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            org.openhab.core.voice.VoiceManager,
            org.openhab.core.config.core.ConfigOptionProvider
    
      Constructors:
        * VoiceManagerImpl(org.openhab.core.i18n.LocaleProvider, org.openhab.core.audio.AudioManager, org.openhab.core.events.EventPublisher)
    
      Attributes:
        CONFIGURATION_PID (java.lang.String): final static field
    
    """
    CONFIGURATION_PID: typing.ClassVar[java.lang.String] = ...
    def __init__(self, localeProvider: org.openhab.core.i18n.LocaleProvider, audioManager: org.openhab.core.audio.AudioManager, eventPublisher: org.openhab.core.events.EventPublisher): ...
    def getAllVoices(self) -> java.util.Set[org.openhab.core.voice.Voice]: ...
    @classmethod
    def getBestMatch(cls, inputs: java.util.Set[org.openhab.core.audio.AudioFormat], outputs: java.util.Set[org.openhab.core.audio.AudioFormat]) -> org.openhab.core.audio.AudioFormat: ...
    def getDefaultVoice(self) -> org.openhab.core.voice.Voice: ...
    @typing.overload
    def getHLI(self) -> org.openhab.core.voice.text.HumanLanguageInterpreter: ...
    @typing.overload
    def getHLI(self, id: java.lang.String) -> org.openhab.core.voice.text.HumanLanguageInterpreter: ...
    def getHLIs(self) -> java.util.Collection[org.openhab.core.voice.text.HumanLanguageInterpreter]: ...
    @typing.overload
    def getKS(self) -> org.openhab.core.voice.KSService: ...
    @typing.overload
    def getKS(self, id: java.lang.String) -> org.openhab.core.voice.KSService: ...
    def getKSs(self) -> java.util.Collection[org.openhab.core.voice.KSService]: ...
    def getParameterOptions(self, uri: java.net.URI, param: java.lang.String, context: java.lang.String, locale: java.util.Locale) -> java.util.Collection[org.openhab.core.config.core.ParameterOption]: ...
    @classmethod
    def getPreferredFormat(cls, audioFormats: java.util.Set[org.openhab.core.audio.AudioFormat]) -> org.openhab.core.audio.AudioFormat: ...
    def getPreferredVoice(self, voices: java.util.Set[org.openhab.core.voice.Voice]) -> org.openhab.core.voice.Voice: ...
    @typing.overload
    def getSTT(self) -> org.openhab.core.voice.STTService: ...
    @typing.overload
    def getSTT(self, id: java.lang.String) -> org.openhab.core.voice.STTService: ...
    def getSTTs(self) -> java.util.Collection[org.openhab.core.voice.STTService]: ...
    @typing.overload
    def getTTS(self) -> org.openhab.core.voice.TTSService: ...
    @typing.overload
    def getTTS(self, id: java.lang.String) -> org.openhab.core.voice.TTSService: ...
    def getTTSs(self) -> java.util.Collection[org.openhab.core.voice.TTSService]: ...
    @typing.overload
    def interpret(self, text: java.lang.String) -> java.lang.String: ...
    @typing.overload
    def interpret(self, text: java.lang.String, hliId: java.lang.String) -> java.lang.String: ...
    @typing.overload
    def say(self, text: java.lang.String) -> None: ...
    @typing.overload
    def say(self, text: java.lang.String, voiceId: java.lang.String) -> None: ...
    @typing.overload
    def say(self, text: java.lang.String, voiceId: java.lang.String, sinkId: java.lang.String) -> None: ...
    @typing.overload
    def say(self, text: java.lang.String, voiceId: java.lang.String, sinkId: java.lang.String, volume: org.openhab.core.library.types.PercentType) -> None: ...
    @typing.overload
    def say(self, text: java.lang.String, voiceId: java.lang.String, volume: org.openhab.core.library.types.PercentType) -> None: ...
    @typing.overload
    def say(self, text: java.lang.String, volume: org.openhab.core.library.types.PercentType) -> None: ...
    @typing.overload
    def startDialog(self) -> None: ...
    @typing.overload
    def startDialog(self, ksService: org.openhab.core.voice.KSService, sttService: org.openhab.core.voice.STTService, ttsService: org.openhab.core.voice.TTSService, interpreter: org.openhab.core.voice.text.HumanLanguageInterpreter, audioSource: org.openhab.core.audio.AudioSource, audioSink: org.openhab.core.audio.AudioSink, locale: java.util.Locale, keyword: java.lang.String, listeningItem: java.lang.String) -> None: ...
