import java.lang
import java.util
import org.openhab.core.events
import org.openhab.core.items
import typing


class ASTNode(java.lang.Object):
    """
    Java class 'org.openhab.core.voice.text.ASTNode'
    
        Extends:
            java.lang.Object
    
      Constructors:
        * ASTNode()
        * ASTNode(org.openhab.core.voice.text.ASTNode[], org.openhab.core.voice.text.TokenList)
    
    """
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, children: typing.List['ASTNode'], remainingTokens: 'TokenList'): ...
    def findNode(self, name: java.lang.String) -> 'ASTNode': ...
    @typing.overload
    def findValue(self, name: java.lang.String) -> typing.Any: ...
    @typing.overload
    def findValue(self, name: java.lang.String, cls) -> typing.Any: ...
    def findValueAsString(self, name: java.lang.String) -> java.lang.String: ...
    def findValueAsStringArray(self, name: java.lang.String) -> typing.List[java.lang.String]: ...
    def getChildren(self) -> typing.List['ASTNode']: ...
    def getName(self) -> java.lang.String: ...
    def getRemainingTokens(self) -> 'TokenList': ...
    def getTag(self) -> typing.Any: ...
    def getValue(self) -> typing.Any: ...
    def getValueAsString(self) -> java.lang.String: ...
    def getValueAsStringArray(self) -> typing.List[java.lang.String]: ...
    def isSuccess(self) -> bool: ...
    def setChildren(self, children: typing.List['ASTNode']) -> None: ...
    def setName(self, name: java.lang.String) -> None: ...
    def setRemainingTokens(self, remainingTokens: 'TokenList') -> None: ...
    def setSuccess(self, success: bool) -> None: ...
    def setTag(self, tag: typing.Any) -> None: ...
    def setValue(self, value: typing.Any) -> None: ...

class Expression(java.lang.Object):
    """
    Java class 'org.openhab.core.voice.text.Expression'
    
        Extends:
            java.lang.Object
    
    """

class HumanLanguageInterpreter(java.lang.Object):
    """
    public interface HumanLanguageInterpreter
    
        This is the interface that a human language text interpreter has to implement.
    
    
    """
    def getGrammar(self, locale: java.util.Locale, format: java.lang.String) -> java.lang.String: ...
    def getId(self) -> java.lang.String: ...
    def getLabel(self, locale: java.util.Locale) -> java.lang.String: ...
    def getSupportedGrammarFormats(self) -> java.util.Set[java.lang.String]: ...
    def getSupportedLocales(self) -> java.util.Set[java.util.Locale]: ...
    def interpret(self, locale: java.util.Locale, text: java.lang.String) -> java.lang.String: ...

class InterpretationException(java.lang.Exception):
    """
    Java class 'org.openhab.core.voice.text.InterpretationException'
    
        Extends:
            java.lang.Exception
    
      Constructors:
        * InterpretationException(java.lang.String)
    
    """
    def __init__(self, msg: java.lang.String): ...

class InterpretationResult(java.lang.Object):
    """
    Java class 'org.openhab.core.voice.text.InterpretationResult'
    
        Extends:
            java.lang.Object
    
      Constructors:
        * InterpretationResult(org.openhab.core.voice.text.InterpretationException)
        * InterpretationResult(java.lang.String)
        * InterpretationResult(boolean, java.lang.String)
    
      Attributes:
        OK (org.openhab.core.voice.text.InterpretationResult): final static field
        SYNTAX_ERROR (org.openhab.core.voice.text.InterpretationResult): final static field
        SEMANTIC_ERROR (org.openhab.core.voice.text.InterpretationResult): final static field
    
    """
    OK: typing.ClassVar['InterpretationResult'] = ...
    SYNTAX_ERROR: typing.ClassVar['InterpretationResult'] = ...
    SEMANTIC_ERROR: typing.ClassVar['InterpretationResult'] = ...
    @typing.overload
    def __init__(self, success: bool, response: java.lang.String): ...
    @typing.overload
    def __init__(self, response: java.lang.String): ...
    @typing.overload
    def __init__(self, exception: InterpretationException): ...
    def getException(self) -> InterpretationException: ...
    def getResponse(self) -> java.lang.String: ...
    def isSuccess(self) -> bool: ...

class Rule(java.lang.Object):
    """
    Java class 'org.openhab.core.voice.text.Rule'
    
        Extends:
            java.lang.Object
    
      Constructors:
        * Rule(org.openhab.core.voice.text.Expression)
    
    """
    def __init__(self, expression: Expression): ...
    def getExpression(self) -> Expression: ...
    def interpretAST(self, language: java.util.ResourceBundle, node: ASTNode) -> InterpretationResult: ...

class TokenList(java.lang.Object):
    """
    Java class 'org.openhab.core.voice.text.TokenList'
    
        Extends:
            java.lang.Object
    
      Constructors:
        * TokenList(java.util.List)
    
    """
    def __init__(self, list: java.util.List[java.lang.String]): ...
    def checkHead(self, alternatives: typing.List[java.lang.String]) -> bool: ...
    def checkTail(self, alternatives: typing.List[java.lang.String]) -> bool: ...
    def eof(self) -> bool: ...
    def head(self) -> java.lang.String: ...
    def peekHead(self, alternatives: typing.List[java.lang.String]) -> java.lang.String: ...
    def peekTail(self, alternatives: typing.List[java.lang.String]) -> java.lang.String: ...
    def size(self) -> int: ...
    def skipHead(self) -> 'TokenList': ...
    def skipTail(self) -> 'TokenList': ...
    def tail(self) -> java.lang.String: ...

class AbstractRuleBasedInterpreter(HumanLanguageInterpreter):
    """
    Java class 'org.openhab.core.voice.text.AbstractRuleBasedInterpreter'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            org.openhab.core.voice.text.HumanLanguageInterpreter
    
      Constructors:
        * AbstractRuleBasedInterpreter()
    
    """
    def __init__(self): ...
    def getGrammar(self, locale: java.util.Locale, format: java.lang.String) -> java.lang.String: ...
    def getRules(self, locale: java.util.Locale) -> typing.List[Rule]: ...
    def getSupportedGrammarFormats(self) -> java.util.Set[java.lang.String]: ...
    def getSupportedLocales(self) -> java.util.Set[java.util.Locale]: ...
    def interpret(self, locale: java.util.Locale, text: java.lang.String) -> java.lang.String: ...
    def setEventPublisher(self, eventPublisher: org.openhab.core.events.EventPublisher) -> None: ...
    def setItemRegistry(self, itemRegistry: org.openhab.core.items.ItemRegistry) -> None: ...
    def unsetEventPublisher(self, eventPublisher: org.openhab.core.events.EventPublisher) -> None: ...
    def unsetItemRegistry(self, itemRegistry: org.openhab.core.items.ItemRegistry) -> None: ...

class ExpressionCardinality(Expression):
    """
    Java class 'org.openhab.core.voice.text.ExpressionCardinality'
    
        Extends:
            org.openhab.core.voice.text.Expression
    
      Constructors:
        * ExpressionCardinality(org.openhab.core.voice.text.Expression, boolean, boolean)
    
    """
    def __init__(self, subExpression: Expression, atLeastOne: bool, atMostOne: bool): ...
    def getSubExpression(self) -> Expression: ...
    def isAtLeastOne(self) -> bool: ...
    def isAtMostOne(self) -> bool: ...
    def toString(self) -> java.lang.String: ...

class ExpressionIdentifier(Expression):
    """
    Java class 'org.openhab.core.voice.text.ExpressionIdentifier'
    
        Extends:
            org.openhab.core.voice.text.Expression
    
      Constructors:
        * ExpressionIdentifier(org.openhab.core.voice.text.AbstractRuleBasedInterpreter)
        * ExpressionIdentifier(org.openhab.core.voice.text.AbstractRuleBasedInterpreter, org.openhab.core.voice.text.Expression)
    
    """
    @typing.overload
    def __init__(self, interpreter: AbstractRuleBasedInterpreter): ...
    @typing.overload
    def __init__(self, interpreter: AbstractRuleBasedInterpreter, stopper: Expression): ...
    def getInterpreter(self) -> AbstractRuleBasedInterpreter: ...
    def getStopper(self) -> Expression: ...
    def toString(self) -> java.lang.String: ...

class ExpressionLet(Expression):
    """
    Java class 'org.openhab.core.voice.text.ExpressionLet'
    
        Extends:
            org.openhab.core.voice.text.Expression
    
      Constructors:
        * ExpressionLet(java.lang.String, org.openhab.core.voice.text.Expression, java.lang.Object, java.lang.Object)
        * ExpressionLet(org.openhab.core.voice.text.Expression, java.lang.Object)
        * ExpressionLet(java.lang.String, org.openhab.core.voice.text.Expression)
    
    """
    @typing.overload
    def __init__(self, name: java.lang.String, subExpression: Expression): ...
    @typing.overload
    def __init__(self, name: java.lang.String, subExpression: Expression, value: typing.Any, tag: typing.Any): ...
    @typing.overload
    def __init__(self, subExpression: Expression, value: typing.Any): ...
    def getName(self) -> java.lang.String: ...
    def getSubExpression(self) -> Expression: ...
    def getTag(self) -> typing.Any: ...
    def getValue(self) -> typing.Any: ...
    def toString(self) -> java.lang.String: ...

class ExpressionMatch(Expression):
    """
    Java class 'org.openhab.core.voice.text.ExpressionMatch'
    
        Extends:
            org.openhab.core.voice.text.Expression
    
      Constructors:
        * ExpressionMatch(java.lang.String)
    
    """
    def __init__(self, pattern: java.lang.String): ...
    def getPattern(self) -> java.lang.String: ...
    def toString(self) -> java.lang.String: ...

class ExpressionSequence(Expression):
    """
    Java class 'org.openhab.core.voice.text.ExpressionSequence'
    
        Extends:
            org.openhab.core.voice.text.Expression
    
      Constructors:
        * ExpressionSequence(org.openhab.core.voice.text.Expression[])
    
    """
    def __init__(self, subExpressions: typing.List[Expression]): ...
    def toString(self) -> java.lang.String: ...
