import java.lang
import org.eclipse.emf.common.notify
import org.eclipse.emf.common.util
import org.eclipse.emf.ecore
import org.eclipse.emf.ecore.impl
import org.eclipse.emf.ecore.resource.impl
import org.openhab.core.model.items
import typing


class ItemModelImpl(org.eclipse.emf.ecore.impl.MinimalEObjectImpl.Container, org.openhab.core.model.items.ItemModel):
    """
    Java class 'org.openhab.core.model.items.impl.ItemModelImpl'
    
        Extends:
            org.eclipse.emf.ecore.impl.MinimalEObjectImpl$Container
    
        Interfaces:
            org.openhab.core.model.items.ItemModel
    
    """
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> typing.Any: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, boolean: bool) -> typing.Any: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, boolean: bool, boolean2: bool) -> typing.Any: ...
    @typing.overload
    def eGet(self, featureID: int, resolve: bool, coreType: bool) -> typing.Any: ...
    @typing.overload
    def eInverseRemove(self, internalEObject: org.eclipse.emf.ecore.InternalEObject, int2: int, class_: typing.Type[typing.Any], notificationChain: org.eclipse.emf.common.notify.NotificationChain) -> org.eclipse.emf.common.notify.NotificationChain: ...
    @typing.overload
    def eInverseRemove(self, otherEnd: org.eclipse.emf.ecore.InternalEObject, featureID: int, msgs: org.eclipse.emf.common.notify.NotificationChain) -> org.eclipse.emf.common.notify.NotificationChain: ...
    @typing.overload
    def eIsSet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> bool: ...
    @typing.overload
    def eIsSet(self, featureID: int) -> bool: ...
    @typing.overload
    def eSet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, object: typing.Any) -> None: ...
    @typing.overload
    def eSet(self, featureID: int, newValue: typing.Any) -> None: ...
    @typing.overload
    def eUnset(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> None: ...
    @typing.overload
    def eUnset(self, featureID: int) -> None: ...
    def getItems(self) -> org.eclipse.emf.common.util.EList[org.openhab.core.model.items.ModelItem]: ...

class ItemsFactoryImpl(org.eclipse.emf.ecore.impl.EFactoryImpl, org.openhab.core.model.items.ItemsFactory):
    """
    Java class 'org.openhab.core.model.items.impl.ItemsFactoryImpl'
    
        Extends:
            org.eclipse.emf.ecore.impl.EFactoryImpl
    
        Interfaces:
            org.openhab.core.model.items.ItemsFactory
    
      Constructors:
        * ItemsFactoryImpl()
    
    """
    def __init__(self): ...
    def convertModelGroupFunctionToString(self, eDataType: org.eclipse.emf.ecore.EDataType, instanceValue: typing.Any) -> java.lang.String: ...
    def convertToString(self, eDataType: org.eclipse.emf.ecore.EDataType, instanceValue: typing.Any) -> java.lang.String: ...
    @typing.overload
    def create(self, eClass: org.eclipse.emf.ecore.EClass) -> org.eclipse.emf.ecore.EObject: ...
    @typing.overload
    def create(self, eDataType: org.eclipse.emf.ecore.EDataType) -> org.eclipse.emf.ecore.resource.impl.BinaryResourceImpl.DataConverter[typing.Any]: ...
    def createFromString(self, eDataType: org.eclipse.emf.ecore.EDataType, initialValue: java.lang.String) -> typing.Any: ...
    def createItemModel(self) -> org.openhab.core.model.items.ItemModel: ...
    def createModelBinding(self) -> org.openhab.core.model.items.ModelBinding: ...
    def createModelGroupFunctionFromString(self, eDataType: org.eclipse.emf.ecore.EDataType, initialValue: java.lang.String) -> org.openhab.core.model.items.ModelGroupFunction: ...
    def createModelGroupItem(self) -> org.openhab.core.model.items.ModelGroupItem: ...
    def createModelItem(self) -> org.openhab.core.model.items.ModelItem: ...
    def createModelNormalItem(self) -> org.openhab.core.model.items.ModelNormalItem: ...
    def createModelProperty(self) -> org.openhab.core.model.items.ModelProperty: ...
    def getItemsPackage(self) -> org.openhab.core.model.items.ItemsPackage: ...
    @classmethod
    def getPackage(cls) -> org.openhab.core.model.items.ItemsPackage: ...
    @classmethod
    def init(cls) -> org.openhab.core.model.items.ItemsFactory: ...

class ItemsPackageImpl(org.eclipse.emf.ecore.impl.EPackageImpl, org.openhab.core.model.items.ItemsPackage):
    """
    Java class 'org.openhab.core.model.items.impl.ItemsPackageImpl'
    
        Extends:
            org.eclipse.emf.ecore.impl.EPackageImpl
    
        Interfaces:
            org.openhab.core.model.items.ItemsPackage
    
    """
    def createPackageContents(self) -> None: ...
    def getItemModel(self) -> org.eclipse.emf.ecore.EClass: ...
    def getItemModel_Items(self) -> org.eclipse.emf.ecore.EReference: ...
    def getItemsFactory(self) -> org.openhab.core.model.items.ItemsFactory: ...
    def getModelBinding(self) -> org.eclipse.emf.ecore.EClass: ...
    def getModelBinding_Configuration(self) -> org.eclipse.emf.ecore.EAttribute: ...
    def getModelBinding_Properties(self) -> org.eclipse.emf.ecore.EReference: ...
    def getModelBinding_Type(self) -> org.eclipse.emf.ecore.EAttribute: ...
    def getModelGroupFunction(self) -> org.eclipse.emf.ecore.EEnum: ...
    def getModelGroupItem(self) -> org.eclipse.emf.ecore.EClass: ...
    def getModelGroupItem_Args(self) -> org.eclipse.emf.ecore.EAttribute: ...
    def getModelGroupItem_Function(self) -> org.eclipse.emf.ecore.EAttribute: ...
    def getModelItem(self) -> org.eclipse.emf.ecore.EClass: ...
    def getModelItem_Bindings(self) -> org.eclipse.emf.ecore.EReference: ...
    def getModelItem_Groups(self) -> org.eclipse.emf.ecore.EAttribute: ...
    def getModelItem_Icon(self) -> org.eclipse.emf.ecore.EAttribute: ...
    def getModelItem_Label(self) -> org.eclipse.emf.ecore.EAttribute: ...
    def getModelItem_Name(self) -> org.eclipse.emf.ecore.EAttribute: ...
    def getModelItem_Tags(self) -> org.eclipse.emf.ecore.EAttribute: ...
    def getModelItem_Type(self) -> org.eclipse.emf.ecore.EAttribute: ...
    def getModelNormalItem(self) -> org.eclipse.emf.ecore.EClass: ...
    def getModelProperty(self) -> org.eclipse.emf.ecore.EClass: ...
    def getModelProperty_Key(self) -> org.eclipse.emf.ecore.EAttribute: ...
    def getModelProperty_Value(self) -> org.eclipse.emf.ecore.EAttribute: ...
    @classmethod
    def init(cls) -> org.openhab.core.model.items.ItemsPackage: ...
    def initializePackageContents(self) -> None: ...

class ModelBindingImpl(org.eclipse.emf.ecore.impl.MinimalEObjectImpl.Container, org.openhab.core.model.items.ModelBinding):
    """
    Java class 'org.openhab.core.model.items.impl.ModelBindingImpl'
    
        Extends:
            org.eclipse.emf.ecore.impl.MinimalEObjectImpl$Container
    
        Interfaces:
            org.openhab.core.model.items.ModelBinding
    
    """
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> typing.Any: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, boolean: bool) -> typing.Any: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, boolean: bool, boolean2: bool) -> typing.Any: ...
    @typing.overload
    def eGet(self, featureID: int, resolve: bool, coreType: bool) -> typing.Any: ...
    @typing.overload
    def eInverseRemove(self, internalEObject: org.eclipse.emf.ecore.InternalEObject, int2: int, class_: typing.Type[typing.Any], notificationChain: org.eclipse.emf.common.notify.NotificationChain) -> org.eclipse.emf.common.notify.NotificationChain: ...
    @typing.overload
    def eInverseRemove(self, otherEnd: org.eclipse.emf.ecore.InternalEObject, featureID: int, msgs: org.eclipse.emf.common.notify.NotificationChain) -> org.eclipse.emf.common.notify.NotificationChain: ...
    @typing.overload
    def eIsSet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> bool: ...
    @typing.overload
    def eIsSet(self, featureID: int) -> bool: ...
    @typing.overload
    def eSet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, object: typing.Any) -> None: ...
    @typing.overload
    def eSet(self, featureID: int, newValue: typing.Any) -> None: ...
    @typing.overload
    def eUnset(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> None: ...
    @typing.overload
    def eUnset(self, featureID: int) -> None: ...
    def getConfiguration(self) -> java.lang.String: ...
    def getProperties(self) -> org.eclipse.emf.common.util.EList[org.openhab.core.model.items.ModelProperty]: ...
    def getType(self) -> java.lang.String: ...
    def setConfiguration(self, newConfiguration: java.lang.String) -> None: ...
    def setType(self, newType: java.lang.String) -> None: ...
    def toString(self) -> java.lang.String: ...

class ModelItemImpl(org.eclipse.emf.ecore.impl.MinimalEObjectImpl.Container, org.openhab.core.model.items.ModelItem):
    """
    Java class 'org.openhab.core.model.items.impl.ModelItemImpl'
    
        Extends:
            org.eclipse.emf.ecore.impl.MinimalEObjectImpl$Container
    
        Interfaces:
            org.openhab.core.model.items.ModelItem
    
    """
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> typing.Any: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, boolean: bool) -> typing.Any: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, boolean: bool, boolean2: bool) -> typing.Any: ...
    @typing.overload
    def eGet(self, featureID: int, resolve: bool, coreType: bool) -> typing.Any: ...
    @typing.overload
    def eInverseRemove(self, internalEObject: org.eclipse.emf.ecore.InternalEObject, int2: int, class_: typing.Type[typing.Any], notificationChain: org.eclipse.emf.common.notify.NotificationChain) -> org.eclipse.emf.common.notify.NotificationChain: ...
    @typing.overload
    def eInverseRemove(self, otherEnd: org.eclipse.emf.ecore.InternalEObject, featureID: int, msgs: org.eclipse.emf.common.notify.NotificationChain) -> org.eclipse.emf.common.notify.NotificationChain: ...
    @typing.overload
    def eIsSet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> bool: ...
    @typing.overload
    def eIsSet(self, featureID: int) -> bool: ...
    @typing.overload
    def eSet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, object: typing.Any) -> None: ...
    @typing.overload
    def eSet(self, featureID: int, newValue: typing.Any) -> None: ...
    @typing.overload
    def eUnset(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> None: ...
    @typing.overload
    def eUnset(self, featureID: int) -> None: ...
    def getBindings(self) -> org.eclipse.emf.common.util.EList[org.openhab.core.model.items.ModelBinding]: ...
    def getGroups(self) -> org.eclipse.emf.common.util.EList[java.lang.String]: ...
    def getIcon(self) -> java.lang.String: ...
    def getLabel(self) -> java.lang.String: ...
    def getName(self) -> java.lang.String: ...
    def getTags(self) -> org.eclipse.emf.common.util.EList[java.lang.String]: ...
    def getType(self) -> java.lang.String: ...
    def setIcon(self, newIcon: java.lang.String) -> None: ...
    def setLabel(self, newLabel: java.lang.String) -> None: ...
    def setName(self, newName: java.lang.String) -> None: ...
    def setType(self, newType: java.lang.String) -> None: ...
    def toString(self) -> java.lang.String: ...

class ModelPropertyImpl(org.eclipse.emf.ecore.impl.MinimalEObjectImpl.Container, org.openhab.core.model.items.ModelProperty):
    """
    Java class 'org.openhab.core.model.items.impl.ModelPropertyImpl'
    
        Extends:
            org.eclipse.emf.ecore.impl.MinimalEObjectImpl$Container
    
        Interfaces:
            org.openhab.core.model.items.ModelProperty
    
    """
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> typing.Any: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, boolean: bool) -> typing.Any: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, boolean: bool, boolean2: bool) -> typing.Any: ...
    @typing.overload
    def eGet(self, featureID: int, resolve: bool, coreType: bool) -> typing.Any: ...
    @typing.overload
    def eIsSet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> bool: ...
    @typing.overload
    def eIsSet(self, featureID: int) -> bool: ...
    @typing.overload
    def eSet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, object: typing.Any) -> None: ...
    @typing.overload
    def eSet(self, featureID: int, newValue: typing.Any) -> None: ...
    @typing.overload
    def eUnset(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> None: ...
    @typing.overload
    def eUnset(self, featureID: int) -> None: ...
    def getKey(self) -> java.lang.String: ...
    def getValue(self) -> typing.Any: ...
    def setKey(self, newKey: java.lang.String) -> None: ...
    def setValue(self, newValue: typing.Any) -> None: ...
    def toString(self) -> java.lang.String: ...

class ModelGroupItemImpl(ModelItemImpl, org.openhab.core.model.items.ModelGroupItem):
    """
    Java class 'org.openhab.core.model.items.impl.ModelGroupItemImpl'
    
        Extends:
            org.openhab.core.model.items.impl.ModelItemImpl
    
        Interfaces:
            org.openhab.core.model.items.ModelGroupItem
    
    """
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> typing.Any: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, boolean: bool) -> typing.Any: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, boolean: bool, boolean2: bool) -> typing.Any: ...
    @typing.overload
    def eGet(self, featureID: int, resolve: bool, coreType: bool) -> typing.Any: ...
    @typing.overload
    def eIsSet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> bool: ...
    @typing.overload
    def eIsSet(self, featureID: int) -> bool: ...
    @typing.overload
    def eSet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, object: typing.Any) -> None: ...
    @typing.overload
    def eSet(self, featureID: int, newValue: typing.Any) -> None: ...
    @typing.overload
    def eUnset(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> None: ...
    @typing.overload
    def eUnset(self, featureID: int) -> None: ...
    def getArgs(self) -> org.eclipse.emf.common.util.EList[java.lang.String]: ...
    def getFunction(self) -> org.openhab.core.model.items.ModelGroupFunction: ...
    def setFunction(self, newFunction: org.openhab.core.model.items.ModelGroupFunction) -> None: ...
    def toString(self) -> java.lang.String: ...

class ModelNormalItemImpl(ModelItemImpl, org.openhab.core.model.items.ModelNormalItem):
    """
    Java class 'org.openhab.core.model.items.impl.ModelNormalItemImpl'
    
        Extends:
            org.openhab.core.model.items.impl.ModelItemImpl
    
        Interfaces:
            org.openhab.core.model.items.ModelNormalItem
    
    """
