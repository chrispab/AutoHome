import com.google.inject
import java.lang
import java.util
import org.eclipse.emf.ecore
import org.eclipse.xtext
import org.eclipse.xtext.common.types.xtext
import org.eclipse.xtext.generator
import org.eclipse.xtext.naming
import org.eclipse.xtext.parser
import org.eclipse.xtext.parser.antlr
import org.eclipse.xtext.resource
import org.eclipse.xtext.scoping
import org.eclipse.xtext.serializer
import org.eclipse.xtext.serializer.sequencer
import org.eclipse.xtext.validation
import org.eclipse.xtext.xbase
import org.eclipse.xtext.xbase.interpreter
import org.eclipse.xtext.xbase.jvmmodel
import org.eclipse.xtext.xbase.scoping.batch
import org.eclipse.xtext.xbase.typesystem.computation
import org.eclipse.xtext.xbase.typesystem.internal
import org.eclipse.xtext.xbase.validation
import org.openhab.core.events
import org.openhab.core.items
import org.openhab.core.model.core
import org.openhab.core.model.script.engine
import org.openhab.core.model.script.engine.action
import org.openhab.core.model.script.parser.antlr.internal
import org.openhab.core.model.script.validation
import org.openhab.core.scheduler
import org.openhab.core.thing
import org.openhab.core.thing.binding
import typing


class AbstractScriptRuntimeModule(org.eclipse.xtext.xbase.DefaultXbaseRuntimeModule):
    """
    Java class 'org.openhab.core.model.script.AbstractScriptRuntimeModule'
    
        Extends:
            org.eclipse.xtext.xbase.DefaultXbaseRuntimeModule
    
      Constructors:
        * AbstractScriptRuntimeModule()
    
    """
    def __init__(self): ...
    def bindClassLoaderToInstance(self) -> java.lang.ClassLoader: ...
    def bindDefaultBatchTypeResolver(self) -> typing.Type[org.eclipse.xtext.xbase.typesystem.internal.DefaultBatchTypeResolver]: ...
    def bindDefaultReentrantTypeResolver(self) -> typing.Type[org.eclipse.xtext.xbase.typesystem.internal.DefaultReentrantTypeResolver]: ...
    def bindFeatureNameValidator(self) -> typing.Type[org.eclipse.xtext.xbase.validation.FeatureNameValidator]: ...
    def bindIAntlrTokenFileProvider(self) -> typing.Type[org.eclipse.xtext.parser.antlr.IAntlrTokenFileProvider]: ...
    def bindIBatchScopeProvider(self) -> typing.Type[org.eclipse.xtext.xbase.scoping.batch.IBatchScopeProvider]: ...
    def bindIGlobalScopeProvider(self) -> typing.Type[org.eclipse.xtext.scoping.IGlobalScopeProvider]: ...
    def bindIGrammarAccess(self) -> typing.Type[org.eclipse.xtext.IGrammarAccess]: ...
    def bindIJvmModelInferrer(self) -> typing.Type[org.eclipse.xtext.xbase.jvmmodel.IJvmModelInferrer]: ...
    def bindILocationInFileProvider(self) -> typing.Type[org.eclipse.xtext.resource.ILocationInFileProvider]: ...
    def bindIParser(self) -> typing.Type[org.eclipse.xtext.parser.IParser]: ...
    def bindIQualifiedNameProvider(self) -> typing.Type[org.eclipse.xtext.naming.IQualifiedNameProvider]: ...
    def bindIResourceValidator(self) -> typing.Type[org.eclipse.xtext.validation.IResourceValidator]: ...
    def bindISemanticSequencer(self) -> typing.Type[org.eclipse.xtext.serializer.sequencer.ISemanticSequencer]: ...
    def bindISerializer(self) -> typing.Type[org.eclipse.xtext.serializer.ISerializer]: ...
    def bindISyntacticSequencer(self) -> typing.Type[org.eclipse.xtext.serializer.sequencer.ISyntacticSequencer]: ...
    def bindITokenDefProvider(self) -> typing.Type[org.eclipse.xtext.parser.antlr.ITokenDefProvider]: ...
    def bindITokenToStringConverter(self) -> typing.Type[org.eclipse.xtext.parser.ITokenToStringConverter]: ...
    def bindLexer(self) -> typing.Type[org.eclipse.xtext.parser.antlr.Lexer]: ...
    def bindScriptValidator(self) -> typing.Type[org.openhab.core.model.script.validation.ScriptValidator]: ...
    def configure(self, binder: com.google.inject.Binder) -> None: ...
    def configureFileExtensions(self, binder: com.google.inject.Binder) -> None: ...
    def configureIResourceDescriptions(self, binder: com.google.inject.Binder) -> None: ...
    def configureIResourceDescriptionsPersisted(self, binder: com.google.inject.Binder) -> None: ...
    def configureIScopeProviderDelegate(self, binder: com.google.inject.Binder) -> None: ...
    def configureIgnoreCaseLinking(self, binder: com.google.inject.Binder) -> None: ...
    def configureLanguageName(self, binder: com.google.inject.Binder) -> None: ...
    def configureRewritableImportSectionEnablement(self, binder: com.google.inject.Binder) -> None: ...
    def configureRuntimeLexer(self, binder: com.google.inject.Binder) -> None: ...
    def provideInternalScriptLexer(self) -> com.google.inject.Provider[org.openhab.core.model.script.parser.antlr.internal.InternalScriptLexer]: ...

class OptimizingFeatureScopeTrackerProvider2(org.eclipse.xtext.xbase.typesystem.internal.OptimizingFeatureScopeTrackerProvider):
    """
    Java class 'org.openhab.core.model.script.OptimizingFeatureScopeTrackerProvider2'
    
        Extends:
            org.eclipse.xtext.xbase.typesystem.internal.OptimizingFeatureScopeTrackerProvider
    
      Constructors:
        * OptimizingFeatureScopeTrackerProvider2()
    
    """
    def __init__(self): ...
    def track(self, root: org.eclipse.emf.ecore.EObject) -> org.eclipse.xtext.xbase.typesystem.internal.IFeatureScopeTracker: ...

class ScriptServiceUtil(java.lang.Object):
    """
    Java class 'org.openhab.core.model.script.ScriptServiceUtil'
    
        Extends:
            java.lang.Object
    
      Constructors:
        * ScriptServiceUtil(org.openhab.core.items.ItemRegistry, org.openhab.core.thing.ThingRegistry, org.openhab.core.events.EventPublisher, org.openhab.core.model.core.ModelRepository, org.openhab.core.scheduler.Scheduler)
    
      Attributes:
        actionServices (java.util.List): final field
        thingActions (java.util.List): final field
    
    """
    actionServices: java.util.List = ...
    thingActions: java.util.List = ...
    def __init__(self, itemRegistry: org.openhab.core.items.ItemRegistry, thingRegistry: org.openhab.core.thing.ThingRegistry, eventPublisher: org.openhab.core.events.EventPublisher, modelRepository: org.openhab.core.model.core.ModelRepository, scheduler: org.openhab.core.scheduler.Scheduler): ...
    def addActionService(self, actionService: org.openhab.core.model.script.engine.action.ActionService) -> None: ...
    def addThingActions(self, thingActions: org.openhab.core.thing.binding.ThingActions) -> None: ...
    def deactivate(self) -> None: ...
    def getActionServiceInstances(self) -> java.util.List[org.openhab.core.model.script.engine.action.ActionService]: ...
    @classmethod
    def getActionServices(cls) -> java.util.List[org.openhab.core.model.script.engine.action.ActionService]: ...
    @classmethod
    def getEventPublisher(cls) -> org.openhab.core.events.EventPublisher: ...
    @classmethod
    def getItemRegistry(cls) -> org.openhab.core.items.ItemRegistry: ...
    def getItemRegistryInstance(self) -> org.openhab.core.items.ItemRegistry: ...
    @classmethod
    def getModelRepository(cls) -> org.openhab.core.model.core.ModelRepository: ...
    def getModelRepositoryInstance(self) -> org.openhab.core.model.core.ModelRepository: ...
    @classmethod
    def getScheduler(cls) -> org.openhab.core.scheduler.Scheduler: ...
    def getSchedulerInstance(self) -> org.openhab.core.scheduler.Scheduler: ...
    @classmethod
    def getScriptEngine(cls) -> org.openhab.core.model.script.engine.ScriptEngine: ...
    @classmethod
    def getThingActions(cls) -> java.util.List[org.openhab.core.thing.binding.ThingActions]: ...
    def getThingActionsInstances(self) -> java.util.List[org.openhab.core.thing.binding.ThingActions]: ...
    def getThingRegistryInstance(self) -> org.openhab.core.thing.ThingRegistry: ...
    def removeActionService(self, actionService: org.openhab.core.model.script.engine.action.ActionService) -> None: ...
    def removeThingActions(self, thingActions: org.openhab.core.thing.binding.ThingActions) -> None: ...
    def setScriptEngine(self, scriptEngine: org.openhab.core.model.script.engine.ScriptEngine) -> None: ...
    def unsetScriptEngine(self, scriptEngine: org.openhab.core.model.script.engine.ScriptEngine) -> None: ...

class ScriptStandaloneSetupGenerated(org.eclipse.xtext.ISetup):
    """
    Java class 'org.openhab.core.model.script.ScriptStandaloneSetupGenerated'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            org.eclipse.xtext.ISetup
    
      Constructors:
        * ScriptStandaloneSetupGenerated()
    
    """
    def __init__(self): ...
    def createInjector(self) -> com.google.inject.Injector: ...
    def createInjectorAndDoEMFRegistration(self) -> com.google.inject.Injector: ...
    def register(self, injector: com.google.inject.Injector) -> None: ...

class ServiceModule(com.google.inject.Module):
    """
    Java class 'org.openhab.core.model.script.ServiceModule'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            com.google.inject.Module
    
      Constructors:
        * ServiceModule(org.openhab.core.model.script.ScriptServiceUtil, org.openhab.core.model.script.engine.ScriptEngine)
    
    """
    def __init__(self, scriptServiceUtil: ScriptServiceUtil, scriptEngine: org.openhab.core.model.script.engine.ScriptEngine): ...
    def configure(self, binder: com.google.inject.Binder) -> None: ...

class ScriptRuntimeModule(AbstractScriptRuntimeModule):
    """
    Java class 'org.openhab.core.model.script.ScriptRuntimeModule'
    
        Extends:
            org.openhab.core.model.script.AbstractScriptRuntimeModule
    
      Constructors:
        * ScriptRuntimeModule()
    
    """
    def __init__(self): ...
    def bindAbstractTypeScopeProvider(self) -> typing.Type[org.eclipse.xtext.common.types.xtext.AbstractTypeScopeProvider]: ...
    def bindClassLoaderToInstance(self) -> java.lang.ClassLoader: ...
    def bindIExpressionInterpreter(self) -> typing.Type[org.eclipse.xtext.xbase.interpreter.IExpressionInterpreter]: ...
    def bindIGenerator(self) -> typing.Type[org.eclipse.xtext.generator.IGenerator]: ...
    def bindITypeComputer(self) -> typing.Type[org.eclipse.xtext.xbase.typesystem.computation.ITypeComputer]: ...
    def bindImplicitlyImportedTypes(self) -> typing.Type[org.eclipse.xtext.xbase.scoping.batch.ImplicitlyImportedFeatures]: ...
    def configureIScopeProviderDelegate(self, binder: com.google.inject.Binder) -> None: ...
    def configureRuntimeEncodingProvider(self, binder: com.google.inject.Binder) -> None: ...
    def configureUseIndexFragmentsForLazyLinking(self, binder: com.google.inject.Binder) -> None: ...

class ScriptStandaloneSetup(ScriptStandaloneSetupGenerated):
    """
    Java class 'org.openhab.core.model.script.ScriptStandaloneSetup'
    
        Extends:
            org.openhab.core.model.script.ScriptStandaloneSetupGenerated
    
      Constructors:
        * ScriptStandaloneSetup()
    
    """
    def __init__(self): ...
    def createInjector(self) -> com.google.inject.Injector: ...
    @classmethod
    @typing.overload
    def doSetup(cls) -> None: ...
    @classmethod
    @typing.overload
    def doSetup(cls, scriptServiceUtil: ScriptServiceUtil, scriptEngine: org.openhab.core.model.script.engine.ScriptEngine) -> None: ...
    @classmethod
    def getInjector(cls) -> com.google.inject.Injector: ...
    def getScriptEngine(self) -> org.openhab.core.model.script.engine.ScriptEngine: ...
    def getScriptServiceUtil(self) -> ScriptServiceUtil: ...
    def setScriptEngine(self, scriptEngine: org.openhab.core.model.script.engine.ScriptEngine) -> 'ScriptStandaloneSetup': ...
    def setScriptServiceUtil(self, scriptServiceUtil: ScriptServiceUtil) -> 'ScriptStandaloneSetup': ...
    @classmethod
    def unregister(cls) -> None: ...
