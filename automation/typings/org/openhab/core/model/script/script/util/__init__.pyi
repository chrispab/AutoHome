import org.eclipse.emf.common.notify
import org.eclipse.emf.common.notify.impl
import org.eclipse.emf.ecore
import org.eclipse.emf.ecore.util
import org.eclipse.xtext.xbase
import org.openhab.core.model.script.script
import typing


class ScriptAdapterFactory(org.eclipse.emf.common.notify.impl.AdapterFactoryImpl):
    """
    Java class 'org.openhab.core.model.script.script.util.ScriptAdapterFactory'
    
        Extends:
            org.eclipse.emf.common.notify.impl.AdapterFactoryImpl
    
      Constructors:
        * ScriptAdapterFactory()
    
    """
    def __init__(self): ...
    def createAbstractUnitAdapter(self) -> org.eclipse.emf.common.notify.Adapter: ...
    def createAdapter(self, target: org.eclipse.emf.common.notify.Notifier) -> org.eclipse.emf.common.notify.Adapter: ...
    def createEObjectAdapter(self) -> org.eclipse.emf.common.notify.Adapter: ...
    def createIDUnitAdapter(self) -> org.eclipse.emf.common.notify.Adapter: ...
    def createQuantityLiteralAdapter(self) -> org.eclipse.emf.common.notify.Adapter: ...
    def createScriptAdapter(self) -> org.eclipse.emf.common.notify.Adapter: ...
    def createSpecificUnitAdapter(self) -> org.eclipse.emf.common.notify.Adapter: ...
    def createStringUnitAdapter(self) -> org.eclipse.emf.common.notify.Adapter: ...
    def createXBlockExpressionAdapter(self) -> org.eclipse.emf.common.notify.Adapter: ...
    def createXExpressionAdapter(self) -> org.eclipse.emf.common.notify.Adapter: ...
    def isFactoryForType(self, object: typing.Any) -> bool: ...

_ScriptSwitch__T = typing.TypeVar('_ScriptSwitch__T')  # <T>
class ScriptSwitch(org.eclipse.emf.ecore.util.Switch[_ScriptSwitch__T], typing.Generic[_ScriptSwitch__T]):
    """
    Java class 'org.openhab.core.model.script.script.util.ScriptSwitch'
    
        Extends:
            org.eclipse.emf.ecore.util.Switch
    
      Constructors:
        * ScriptSwitch()
    
    """
    def __init__(self): ...
    def caseAbstractUnit(self, object: org.openhab.core.model.script.script.AbstractUnit) -> _ScriptSwitch__T: ...
    def caseIDUnit(self, object: org.openhab.core.model.script.script.IDUnit) -> _ScriptSwitch__T: ...
    def caseQuantityLiteral(self, object: org.openhab.core.model.script.script.QuantityLiteral) -> _ScriptSwitch__T: ...
    def caseScript(self, object: org.openhab.core.model.script.script.Script) -> _ScriptSwitch__T: ...
    def caseSpecificUnit(self, object: org.openhab.core.model.script.script.SpecificUnit) -> _ScriptSwitch__T: ...
    def caseStringUnit(self, object: org.openhab.core.model.script.script.StringUnit) -> _ScriptSwitch__T: ...
    def caseXBlockExpression(self, object: org.eclipse.xtext.xbase.XBlockExpression) -> _ScriptSwitch__T: ...
    def caseXExpression(self, object: org.eclipse.xtext.xbase.XExpression) -> _ScriptSwitch__T: ...
    def defaultCase(self, object: org.eclipse.emf.ecore.EObject) -> _ScriptSwitch__T: ...
