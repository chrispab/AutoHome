import java.lang
import java.math
import org.eclipse.emf.common.notify
import org.eclipse.emf.common.util
import org.eclipse.emf.ecore
import org.eclipse.emf.ecore.impl
import org.eclipse.emf.ecore.resource.impl
import org.openhab.core.model.sitemap.sitemap
import typing


class ColorArrayImpl(org.eclipse.emf.ecore.impl.MinimalEObjectImpl.Container, org.openhab.core.model.sitemap.sitemap.ColorArray):
    """
    Java class 'org.openhab.core.model.sitemap.sitemap.impl.ColorArrayImpl'
    
        Extends:
            org.eclipse.emf.ecore.impl.MinimalEObjectImpl$Container
    
        Interfaces:
            org.openhab.core.model.sitemap.sitemap.ColorArray
    
    """
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> typing.Any: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, boolean: bool) -> typing.Any: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, boolean: bool, boolean2: bool) -> typing.Any: ...
    @typing.overload
    def eGet(self, featureID: int, resolve: bool, coreType: bool) -> typing.Any: ...
    @typing.overload
    def eIsSet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> bool: ...
    @typing.overload
    def eIsSet(self, featureID: int) -> bool: ...
    @typing.overload
    def eSet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, object: typing.Any) -> None: ...
    @typing.overload
    def eSet(self, featureID: int, newValue: typing.Any) -> None: ...
    @typing.overload
    def eUnset(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> None: ...
    @typing.overload
    def eUnset(self, featureID: int) -> None: ...
    def getArg(self) -> java.lang.String: ...
    def getCondition(self) -> java.lang.String: ...
    def getItem(self) -> java.lang.String: ...
    def getSign(self) -> java.lang.String: ...
    def getState(self) -> java.lang.String: ...
    def setArg(self, newArg: java.lang.String) -> None: ...
    def setCondition(self, newCondition: java.lang.String) -> None: ...
    def setItem(self, newItem: java.lang.String) -> None: ...
    def setSign(self, newSign: java.lang.String) -> None: ...
    def setState(self, newState: java.lang.String) -> None: ...
    def toString(self) -> java.lang.String: ...

class MappingImpl(org.eclipse.emf.ecore.impl.MinimalEObjectImpl.Container, org.openhab.core.model.sitemap.sitemap.Mapping):
    """
    Java class 'org.openhab.core.model.sitemap.sitemap.impl.MappingImpl'
    
        Extends:
            org.eclipse.emf.ecore.impl.MinimalEObjectImpl$Container
    
        Interfaces:
            org.openhab.core.model.sitemap.sitemap.Mapping
    
    """
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> typing.Any: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, boolean: bool) -> typing.Any: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, boolean: bool, boolean2: bool) -> typing.Any: ...
    @typing.overload
    def eGet(self, featureID: int, resolve: bool, coreType: bool) -> typing.Any: ...
    @typing.overload
    def eIsSet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> bool: ...
    @typing.overload
    def eIsSet(self, featureID: int) -> bool: ...
    @typing.overload
    def eSet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, object: typing.Any) -> None: ...
    @typing.overload
    def eSet(self, featureID: int, newValue: typing.Any) -> None: ...
    @typing.overload
    def eUnset(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> None: ...
    @typing.overload
    def eUnset(self, featureID: int) -> None: ...
    def getCmd(self) -> java.lang.String: ...
    def getLabel(self) -> java.lang.String: ...
    def setCmd(self, newCmd: java.lang.String) -> None: ...
    def setLabel(self, newLabel: java.lang.String) -> None: ...
    def toString(self) -> java.lang.String: ...

class SitemapFactoryImpl(org.eclipse.emf.ecore.impl.EFactoryImpl, org.openhab.core.model.sitemap.sitemap.SitemapFactory):
    """
    Java class 'org.openhab.core.model.sitemap.sitemap.impl.SitemapFactoryImpl'
    
        Extends:
            org.eclipse.emf.ecore.impl.EFactoryImpl
    
        Interfaces:
            org.openhab.core.model.sitemap.sitemap.SitemapFactory
    
      Constructors:
        * SitemapFactoryImpl()
    
    """
    def __init__(self): ...
    @typing.overload
    def create(self, eClass: org.eclipse.emf.ecore.EClass) -> org.eclipse.emf.ecore.EObject: ...
    @typing.overload
    def create(self, eDataType: org.eclipse.emf.ecore.EDataType) -> org.eclipse.emf.ecore.resource.impl.BinaryResourceImpl.DataConverter[typing.Any]: ...
    def createChart(self) -> org.openhab.core.model.sitemap.sitemap.Chart: ...
    def createColorArray(self) -> org.openhab.core.model.sitemap.sitemap.ColorArray: ...
    def createColorpicker(self) -> org.openhab.core.model.sitemap.sitemap.Colorpicker: ...
    def createDefault(self) -> org.openhab.core.model.sitemap.sitemap.Default: ...
    def createFrame(self) -> org.openhab.core.model.sitemap.sitemap.Frame: ...
    def createGroup(self) -> org.openhab.core.model.sitemap.sitemap.Group: ...
    def createImage(self) -> org.openhab.core.model.sitemap.sitemap.Image: ...
    def createLinkableWidget(self) -> org.openhab.core.model.sitemap.sitemap.LinkableWidget: ...
    def createList(self) -> org.openhab.core.model.sitemap.sitemap.List: ...
    def createMapping(self) -> org.openhab.core.model.sitemap.sitemap.Mapping: ...
    def createMapview(self) -> org.openhab.core.model.sitemap.sitemap.Mapview: ...
    def createNonLinkableWidget(self) -> org.openhab.core.model.sitemap.sitemap.NonLinkableWidget: ...
    def createSelection(self) -> org.openhab.core.model.sitemap.sitemap.Selection: ...
    def createSetpoint(self) -> org.openhab.core.model.sitemap.sitemap.Setpoint: ...
    def createSitemap(self) -> org.openhab.core.model.sitemap.sitemap.Sitemap: ...
    def createSitemapModel(self) -> org.openhab.core.model.sitemap.sitemap.SitemapModel: ...
    def createSlider(self) -> org.openhab.core.model.sitemap.sitemap.Slider: ...
    def createSwitch(self) -> org.openhab.core.model.sitemap.sitemap.Switch: ...
    def createText(self) -> org.openhab.core.model.sitemap.sitemap.Text: ...
    def createVideo(self) -> org.openhab.core.model.sitemap.sitemap.Video: ...
    def createVisibilityRule(self) -> org.openhab.core.model.sitemap.sitemap.VisibilityRule: ...
    def createWebview(self) -> org.openhab.core.model.sitemap.sitemap.Webview: ...
    def createWidget(self) -> org.openhab.core.model.sitemap.sitemap.Widget: ...
    @classmethod
    def getPackage(cls) -> org.openhab.core.model.sitemap.sitemap.SitemapPackage: ...
    def getSitemapPackage(self) -> org.openhab.core.model.sitemap.sitemap.SitemapPackage: ...
    @classmethod
    def init(cls) -> org.openhab.core.model.sitemap.sitemap.SitemapFactory: ...

class SitemapModelImpl(org.eclipse.emf.ecore.impl.MinimalEObjectImpl.Container, org.openhab.core.model.sitemap.sitemap.SitemapModel):
    """
    Java class 'org.openhab.core.model.sitemap.sitemap.impl.SitemapModelImpl'
    
        Extends:
            org.eclipse.emf.ecore.impl.MinimalEObjectImpl$Container
    
        Interfaces:
            org.openhab.core.model.sitemap.sitemap.SitemapModel
    
    """

class SitemapPackageImpl(org.eclipse.emf.ecore.impl.EPackageImpl, org.openhab.core.model.sitemap.sitemap.SitemapPackage):
    """
    Java class 'org.openhab.core.model.sitemap.sitemap.impl.SitemapPackageImpl'
    
        Extends:
            org.eclipse.emf.ecore.impl.EPackageImpl
    
        Interfaces:
            org.openhab.core.model.sitemap.sitemap.SitemapPackage
    
    """
    def createPackageContents(self) -> None: ...
    def getChart(self) -> org.eclipse.emf.ecore.EClass: ...
    def getChart_Legend(self) -> org.eclipse.emf.ecore.EAttribute: ...
    def getChart_Period(self) -> org.eclipse.emf.ecore.EAttribute: ...
    def getChart_Refresh(self) -> org.eclipse.emf.ecore.EAttribute: ...
    def getChart_Service(self) -> org.eclipse.emf.ecore.EAttribute: ...
    def getColorArray(self) -> org.eclipse.emf.ecore.EClass: ...
    def getColorArray_Arg(self) -> org.eclipse.emf.ecore.EAttribute: ...
    def getColorArray_Condition(self) -> org.eclipse.emf.ecore.EAttribute: ...
    def getColorArray_Item(self) -> org.eclipse.emf.ecore.EAttribute: ...
    def getColorArray_Sign(self) -> org.eclipse.emf.ecore.EAttribute: ...
    def getColorArray_State(self) -> org.eclipse.emf.ecore.EAttribute: ...
    def getColorpicker(self) -> org.eclipse.emf.ecore.EClass: ...
    def getColorpicker_Frequency(self) -> org.eclipse.emf.ecore.EAttribute: ...
    def getDefault(self) -> org.eclipse.emf.ecore.EClass: ...
    def getDefault_Height(self) -> org.eclipse.emf.ecore.EAttribute: ...
    def getFrame(self) -> org.eclipse.emf.ecore.EClass: ...
    def getGroup(self) -> org.eclipse.emf.ecore.EClass: ...
    def getImage(self) -> org.eclipse.emf.ecore.EClass: ...
    def getImage_IconColor(self) -> org.eclipse.emf.ecore.EReference: ...
    def getImage_Refresh(self) -> org.eclipse.emf.ecore.EAttribute: ...
    def getImage_Url(self) -> org.eclipse.emf.ecore.EAttribute: ...
    def getLinkableWidget(self) -> org.eclipse.emf.ecore.EClass: ...
    def getLinkableWidget_Children(self) -> org.eclipse.emf.ecore.EReference: ...
    def getList(self) -> org.eclipse.emf.ecore.EClass: ...
    def getList_Separator(self) -> org.eclipse.emf.ecore.EAttribute: ...
    def getMapping(self) -> org.eclipse.emf.ecore.EClass: ...
    def getMapping_Cmd(self) -> org.eclipse.emf.ecore.EAttribute: ...
    def getMapping_Label(self) -> org.eclipse.emf.ecore.EAttribute: ...
    def getMapview(self) -> org.eclipse.emf.ecore.EClass: ...
    def getMapview_Height(self) -> org.eclipse.emf.ecore.EAttribute: ...
    def getNonLinkableWidget(self) -> org.eclipse.emf.ecore.EClass: ...
    def getSelection(self) -> org.eclipse.emf.ecore.EClass: ...
    def getSelection_Mappings(self) -> org.eclipse.emf.ecore.EReference: ...
    def getSetpoint(self) -> org.eclipse.emf.ecore.EClass: ...
    def getSetpoint_MaxValue(self) -> org.eclipse.emf.ecore.EAttribute: ...
    def getSetpoint_MinValue(self) -> org.eclipse.emf.ecore.EAttribute: ...
    def getSetpoint_Step(self) -> org.eclipse.emf.ecore.EAttribute: ...
    def getSitemap(self) -> org.eclipse.emf.ecore.EClass: ...
    def getSitemapFactory(self) -> org.openhab.core.model.sitemap.sitemap.SitemapFactory: ...
    def getSitemapModel(self) -> org.eclipse.emf.ecore.EClass: ...
    def getSitemap_Children(self) -> org.eclipse.emf.ecore.EReference: ...
    def getSitemap_Icon(self) -> org.eclipse.emf.ecore.EAttribute: ...
    def getSitemap_Label(self) -> org.eclipse.emf.ecore.EAttribute: ...
    def getSitemap_Name(self) -> org.eclipse.emf.ecore.EAttribute: ...
    def getSlider(self) -> org.eclipse.emf.ecore.EClass: ...
    def getSlider_Frequency(self) -> org.eclipse.emf.ecore.EAttribute: ...
    def getSlider_MaxValue(self) -> org.eclipse.emf.ecore.EAttribute: ...
    def getSlider_MinValue(self) -> org.eclipse.emf.ecore.EAttribute: ...
    def getSlider_Step(self) -> org.eclipse.emf.ecore.EAttribute: ...
    def getSlider_SwitchEnabled(self) -> org.eclipse.emf.ecore.EAttribute: ...
    def getSwitch(self) -> org.eclipse.emf.ecore.EClass: ...
    def getSwitch_Mappings(self) -> org.eclipse.emf.ecore.EReference: ...
    def getText(self) -> org.eclipse.emf.ecore.EClass: ...
    def getVideo(self) -> org.eclipse.emf.ecore.EClass: ...
    def getVideo_Encoding(self) -> org.eclipse.emf.ecore.EAttribute: ...
    def getVideo_Url(self) -> org.eclipse.emf.ecore.EAttribute: ...
    def getVisibilityRule(self) -> org.eclipse.emf.ecore.EClass: ...
    def getVisibilityRule_Condition(self) -> org.eclipse.emf.ecore.EAttribute: ...
    def getVisibilityRule_Item(self) -> org.eclipse.emf.ecore.EAttribute: ...
    def getVisibilityRule_Sign(self) -> org.eclipse.emf.ecore.EAttribute: ...
    def getVisibilityRule_State(self) -> org.eclipse.emf.ecore.EAttribute: ...
    def getWebview(self) -> org.eclipse.emf.ecore.EClass: ...
    def getWebview_Height(self) -> org.eclipse.emf.ecore.EAttribute: ...
    def getWebview_Url(self) -> org.eclipse.emf.ecore.EAttribute: ...
    def getWidget(self) -> org.eclipse.emf.ecore.EClass: ...
    def getWidget_Icon(self) -> org.eclipse.emf.ecore.EAttribute: ...
    def getWidget_Item(self) -> org.eclipse.emf.ecore.EAttribute: ...
    def getWidget_Label(self) -> org.eclipse.emf.ecore.EAttribute: ...
    def getWidget_LabelColor(self) -> org.eclipse.emf.ecore.EReference: ...
    def getWidget_ValueColor(self) -> org.eclipse.emf.ecore.EReference: ...
    def getWidget_Visibility(self) -> org.eclipse.emf.ecore.EReference: ...
    @classmethod
    def init(cls) -> org.openhab.core.model.sitemap.sitemap.SitemapPackage: ...
    def initializePackageContents(self) -> None: ...

class VisibilityRuleImpl(org.eclipse.emf.ecore.impl.MinimalEObjectImpl.Container, org.openhab.core.model.sitemap.sitemap.VisibilityRule):
    """
    Java class 'org.openhab.core.model.sitemap.sitemap.impl.VisibilityRuleImpl'
    
        Extends:
            org.eclipse.emf.ecore.impl.MinimalEObjectImpl$Container
    
        Interfaces:
            org.openhab.core.model.sitemap.sitemap.VisibilityRule
    
    """
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> typing.Any: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, boolean: bool) -> typing.Any: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, boolean: bool, boolean2: bool) -> typing.Any: ...
    @typing.overload
    def eGet(self, featureID: int, resolve: bool, coreType: bool) -> typing.Any: ...
    @typing.overload
    def eIsSet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> bool: ...
    @typing.overload
    def eIsSet(self, featureID: int) -> bool: ...
    @typing.overload
    def eSet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, object: typing.Any) -> None: ...
    @typing.overload
    def eSet(self, featureID: int, newValue: typing.Any) -> None: ...
    @typing.overload
    def eUnset(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> None: ...
    @typing.overload
    def eUnset(self, featureID: int) -> None: ...
    def getCondition(self) -> java.lang.String: ...
    def getItem(self) -> java.lang.String: ...
    def getSign(self) -> java.lang.String: ...
    def getState(self) -> java.lang.String: ...
    def setCondition(self, newCondition: java.lang.String) -> None: ...
    def setItem(self, newItem: java.lang.String) -> None: ...
    def setSign(self, newSign: java.lang.String) -> None: ...
    def setState(self, newState: java.lang.String) -> None: ...
    def toString(self) -> java.lang.String: ...

class WidgetImpl(org.eclipse.emf.ecore.impl.MinimalEObjectImpl.Container, org.openhab.core.model.sitemap.sitemap.Widget):
    """
    Java class 'org.openhab.core.model.sitemap.sitemap.impl.WidgetImpl'
    
        Extends:
            org.eclipse.emf.ecore.impl.MinimalEObjectImpl$Container
    
        Interfaces:
            org.openhab.core.model.sitemap.sitemap.Widget
    
    """
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> typing.Any: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, boolean: bool) -> typing.Any: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, boolean: bool, boolean2: bool) -> typing.Any: ...
    @typing.overload
    def eGet(self, featureID: int, resolve: bool, coreType: bool) -> typing.Any: ...
    @typing.overload
    def eInverseRemove(self, internalEObject: org.eclipse.emf.ecore.InternalEObject, int2: int, class_: typing.Type[typing.Any], notificationChain: org.eclipse.emf.common.notify.NotificationChain) -> org.eclipse.emf.common.notify.NotificationChain: ...
    @typing.overload
    def eInverseRemove(self, otherEnd: org.eclipse.emf.ecore.InternalEObject, featureID: int, msgs: org.eclipse.emf.common.notify.NotificationChain) -> org.eclipse.emf.common.notify.NotificationChain: ...
    @typing.overload
    def eIsSet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> bool: ...
    @typing.overload
    def eIsSet(self, featureID: int) -> bool: ...
    @typing.overload
    def eSet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, object: typing.Any) -> None: ...
    @typing.overload
    def eSet(self, featureID: int, newValue: typing.Any) -> None: ...
    @typing.overload
    def eUnset(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> None: ...
    @typing.overload
    def eUnset(self, featureID: int) -> None: ...
    def getIcon(self) -> java.lang.String: ...
    def getItem(self) -> java.lang.String: ...
    def getLabel(self) -> java.lang.String: ...
    def getLabelColor(self) -> org.eclipse.emf.common.util.EList[org.openhab.core.model.sitemap.sitemap.ColorArray]: ...
    def getValueColor(self) -> org.eclipse.emf.common.util.EList[org.openhab.core.model.sitemap.sitemap.ColorArray]: ...
    def getVisibility(self) -> org.eclipse.emf.common.util.EList[org.openhab.core.model.sitemap.sitemap.VisibilityRule]: ...
    def setIcon(self, newIcon: java.lang.String) -> None: ...
    def setItem(self, newItem: java.lang.String) -> None: ...
    def setLabel(self, newLabel: java.lang.String) -> None: ...
    def toString(self) -> java.lang.String: ...

class LinkableWidgetImpl(WidgetImpl, org.openhab.core.model.sitemap.sitemap.LinkableWidget):
    """
    Java class 'org.openhab.core.model.sitemap.sitemap.impl.LinkableWidgetImpl'
    
        Extends:
            org.openhab.core.model.sitemap.sitemap.impl.WidgetImpl
    
        Interfaces:
            org.openhab.core.model.sitemap.sitemap.LinkableWidget
    
    """
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> typing.Any: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, boolean: bool) -> typing.Any: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, boolean: bool, boolean2: bool) -> typing.Any: ...
    @typing.overload
    def eGet(self, featureID: int, resolve: bool, coreType: bool) -> typing.Any: ...
    @typing.overload
    def eInverseRemove(self, internalEObject: org.eclipse.emf.ecore.InternalEObject, int2: int, class_: typing.Type[typing.Any], notificationChain: org.eclipse.emf.common.notify.NotificationChain) -> org.eclipse.emf.common.notify.NotificationChain: ...
    @typing.overload
    def eInverseRemove(self, otherEnd: org.eclipse.emf.ecore.InternalEObject, featureID: int, msgs: org.eclipse.emf.common.notify.NotificationChain) -> org.eclipse.emf.common.notify.NotificationChain: ...
    @typing.overload
    def eIsSet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> bool: ...
    @typing.overload
    def eIsSet(self, featureID: int) -> bool: ...
    @typing.overload
    def eSet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, object: typing.Any) -> None: ...
    @typing.overload
    def eSet(self, featureID: int, newValue: typing.Any) -> None: ...
    @typing.overload
    def eUnset(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> None: ...
    @typing.overload
    def eUnset(self, featureID: int) -> None: ...
    def getChildren(self) -> org.eclipse.emf.common.util.EList[org.openhab.core.model.sitemap.sitemap.Widget]: ...

class NonLinkableWidgetImpl(WidgetImpl, org.openhab.core.model.sitemap.sitemap.NonLinkableWidget):
    """
    Java class 'org.openhab.core.model.sitemap.sitemap.impl.NonLinkableWidgetImpl'
    
        Extends:
            org.openhab.core.model.sitemap.sitemap.impl.WidgetImpl
    
        Interfaces:
            org.openhab.core.model.sitemap.sitemap.NonLinkableWidget
    
    """

class SitemapImpl(SitemapModelImpl, org.openhab.core.model.sitemap.sitemap.Sitemap):
    """
    Java class 'org.openhab.core.model.sitemap.sitemap.impl.SitemapImpl'
    
        Extends:
            org.openhab.core.model.sitemap.sitemap.impl.SitemapModelImpl
    
        Interfaces:
            org.openhab.core.model.sitemap.sitemap.Sitemap
    
    """
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> typing.Any: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, boolean: bool) -> typing.Any: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, boolean: bool, boolean2: bool) -> typing.Any: ...
    @typing.overload
    def eGet(self, featureID: int, resolve: bool, coreType: bool) -> typing.Any: ...
    @typing.overload
    def eInverseRemove(self, internalEObject: org.eclipse.emf.ecore.InternalEObject, int2: int, class_: typing.Type[typing.Any], notificationChain: org.eclipse.emf.common.notify.NotificationChain) -> org.eclipse.emf.common.notify.NotificationChain: ...
    @typing.overload
    def eInverseRemove(self, otherEnd: org.eclipse.emf.ecore.InternalEObject, featureID: int, msgs: org.eclipse.emf.common.notify.NotificationChain) -> org.eclipse.emf.common.notify.NotificationChain: ...
    @typing.overload
    def eIsSet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> bool: ...
    @typing.overload
    def eIsSet(self, featureID: int) -> bool: ...
    @typing.overload
    def eSet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, object: typing.Any) -> None: ...
    @typing.overload
    def eSet(self, featureID: int, newValue: typing.Any) -> None: ...
    @typing.overload
    def eUnset(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> None: ...
    @typing.overload
    def eUnset(self, featureID: int) -> None: ...
    def getChildren(self) -> org.eclipse.emf.common.util.EList[org.openhab.core.model.sitemap.sitemap.Widget]: ...
    def getIcon(self) -> java.lang.String: ...
    def getLabel(self) -> java.lang.String: ...
    def getName(self) -> java.lang.String: ...
    def setIcon(self, newIcon: java.lang.String) -> None: ...
    def setLabel(self, newLabel: java.lang.String) -> None: ...
    def setName(self, newName: java.lang.String) -> None: ...
    def toString(self) -> java.lang.String: ...

class ChartImpl(NonLinkableWidgetImpl, org.openhab.core.model.sitemap.sitemap.Chart):
    """
    Java class 'org.openhab.core.model.sitemap.sitemap.impl.ChartImpl'
    
        Extends:
            org.openhab.core.model.sitemap.sitemap.impl.NonLinkableWidgetImpl
    
        Interfaces:
            org.openhab.core.model.sitemap.sitemap.Chart
    
    """
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> typing.Any: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, boolean: bool) -> typing.Any: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, boolean: bool, boolean2: bool) -> typing.Any: ...
    @typing.overload
    def eGet(self, featureID: int, resolve: bool, coreType: bool) -> typing.Any: ...
    @typing.overload
    def eIsSet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> bool: ...
    @typing.overload
    def eIsSet(self, featureID: int) -> bool: ...
    @typing.overload
    def eSet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, object: typing.Any) -> None: ...
    @typing.overload
    def eSet(self, featureID: int, newValue: typing.Any) -> None: ...
    @typing.overload
    def eUnset(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> None: ...
    @typing.overload
    def eUnset(self, featureID: int) -> None: ...
    def getLegend(self) -> bool: ...
    def getPeriod(self) -> java.lang.String: ...
    def getRefresh(self) -> int: ...
    def getService(self) -> java.lang.String: ...
    def setLegend(self, newLegend: bool) -> None: ...
    def setPeriod(self, newPeriod: java.lang.String) -> None: ...
    def setRefresh(self, newRefresh: int) -> None: ...
    def setService(self, newService: java.lang.String) -> None: ...
    def toString(self) -> java.lang.String: ...

class ColorpickerImpl(NonLinkableWidgetImpl, org.openhab.core.model.sitemap.sitemap.Colorpicker):
    """
    Java class 'org.openhab.core.model.sitemap.sitemap.impl.ColorpickerImpl'
    
        Extends:
            org.openhab.core.model.sitemap.sitemap.impl.NonLinkableWidgetImpl
    
        Interfaces:
            org.openhab.core.model.sitemap.sitemap.Colorpicker
    
    """
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> typing.Any: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, boolean: bool) -> typing.Any: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, boolean: bool, boolean2: bool) -> typing.Any: ...
    @typing.overload
    def eGet(self, featureID: int, resolve: bool, coreType: bool) -> typing.Any: ...
    @typing.overload
    def eIsSet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> bool: ...
    @typing.overload
    def eIsSet(self, featureID: int) -> bool: ...
    @typing.overload
    def eSet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, object: typing.Any) -> None: ...
    @typing.overload
    def eSet(self, featureID: int, newValue: typing.Any) -> None: ...
    @typing.overload
    def eUnset(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> None: ...
    @typing.overload
    def eUnset(self, featureID: int) -> None: ...
    def getFrequency(self) -> int: ...
    def setFrequency(self, newFrequency: int) -> None: ...
    def toString(self) -> java.lang.String: ...

class DefaultImpl(NonLinkableWidgetImpl, org.openhab.core.model.sitemap.sitemap.Default):
    """
    Java class 'org.openhab.core.model.sitemap.sitemap.impl.DefaultImpl'
    
        Extends:
            org.openhab.core.model.sitemap.sitemap.impl.NonLinkableWidgetImpl
    
        Interfaces:
            org.openhab.core.model.sitemap.sitemap.Default
    
    """
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> typing.Any: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, boolean: bool) -> typing.Any: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, boolean: bool, boolean2: bool) -> typing.Any: ...
    @typing.overload
    def eGet(self, featureID: int, resolve: bool, coreType: bool) -> typing.Any: ...
    @typing.overload
    def eIsSet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> bool: ...
    @typing.overload
    def eIsSet(self, featureID: int) -> bool: ...
    @typing.overload
    def eSet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, object: typing.Any) -> None: ...
    @typing.overload
    def eSet(self, featureID: int, newValue: typing.Any) -> None: ...
    @typing.overload
    def eUnset(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> None: ...
    @typing.overload
    def eUnset(self, featureID: int) -> None: ...
    def getHeight(self) -> int: ...
    def setHeight(self, newHeight: int) -> None: ...
    def toString(self) -> java.lang.String: ...

class FrameImpl(LinkableWidgetImpl, org.openhab.core.model.sitemap.sitemap.Frame):
    """
    Java class 'org.openhab.core.model.sitemap.sitemap.impl.FrameImpl'
    
        Extends:
            org.openhab.core.model.sitemap.sitemap.impl.LinkableWidgetImpl
    
        Interfaces:
            org.openhab.core.model.sitemap.sitemap.Frame
    
    """

class GroupImpl(LinkableWidgetImpl, org.openhab.core.model.sitemap.sitemap.Group):
    """
    Java class 'org.openhab.core.model.sitemap.sitemap.impl.GroupImpl'
    
        Extends:
            org.openhab.core.model.sitemap.sitemap.impl.LinkableWidgetImpl
    
        Interfaces:
            org.openhab.core.model.sitemap.sitemap.Group
    
    """

class ImageImpl(LinkableWidgetImpl, org.openhab.core.model.sitemap.sitemap.Image):
    """
    Java class 'org.openhab.core.model.sitemap.sitemap.impl.ImageImpl'
    
        Extends:
            org.openhab.core.model.sitemap.sitemap.impl.LinkableWidgetImpl
    
        Interfaces:
            org.openhab.core.model.sitemap.sitemap.Image
    
    """
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> typing.Any: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, boolean: bool) -> typing.Any: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, boolean: bool, boolean2: bool) -> typing.Any: ...
    @typing.overload
    def eGet(self, featureID: int, resolve: bool, coreType: bool) -> typing.Any: ...
    @typing.overload
    def eInverseRemove(self, internalEObject: org.eclipse.emf.ecore.InternalEObject, int2: int, class_: typing.Type[typing.Any], notificationChain: org.eclipse.emf.common.notify.NotificationChain) -> org.eclipse.emf.common.notify.NotificationChain: ...
    @typing.overload
    def eInverseRemove(self, otherEnd: org.eclipse.emf.ecore.InternalEObject, featureID: int, msgs: org.eclipse.emf.common.notify.NotificationChain) -> org.eclipse.emf.common.notify.NotificationChain: ...
    @typing.overload
    def eIsSet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> bool: ...
    @typing.overload
    def eIsSet(self, featureID: int) -> bool: ...
    @typing.overload
    def eSet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, object: typing.Any) -> None: ...
    @typing.overload
    def eSet(self, featureID: int, newValue: typing.Any) -> None: ...
    @typing.overload
    def eUnset(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> None: ...
    @typing.overload
    def eUnset(self, featureID: int) -> None: ...
    def getIconColor(self) -> org.eclipse.emf.common.util.EList[org.openhab.core.model.sitemap.sitemap.ColorArray]: ...
    def getRefresh(self) -> int: ...
    def getUrl(self) -> java.lang.String: ...
    def setRefresh(self, newRefresh: int) -> None: ...
    def setUrl(self, newUrl: java.lang.String) -> None: ...
    def toString(self) -> java.lang.String: ...

class ListImpl(NonLinkableWidgetImpl, org.openhab.core.model.sitemap.sitemap.List):
    """
    Java class 'org.openhab.core.model.sitemap.sitemap.impl.ListImpl'
    
        Extends:
            org.openhab.core.model.sitemap.sitemap.impl.NonLinkableWidgetImpl
    
        Interfaces:
            org.openhab.core.model.sitemap.sitemap.List
    
    """
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> typing.Any: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, boolean: bool) -> typing.Any: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, boolean: bool, boolean2: bool) -> typing.Any: ...
    @typing.overload
    def eGet(self, featureID: int, resolve: bool, coreType: bool) -> typing.Any: ...
    @typing.overload
    def eIsSet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> bool: ...
    @typing.overload
    def eIsSet(self, featureID: int) -> bool: ...
    @typing.overload
    def eSet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, object: typing.Any) -> None: ...
    @typing.overload
    def eSet(self, featureID: int, newValue: typing.Any) -> None: ...
    @typing.overload
    def eUnset(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> None: ...
    @typing.overload
    def eUnset(self, featureID: int) -> None: ...
    def getSeparator(self) -> java.lang.String: ...
    def setSeparator(self, newSeparator: java.lang.String) -> None: ...
    def toString(self) -> java.lang.String: ...

class MapviewImpl(NonLinkableWidgetImpl, org.openhab.core.model.sitemap.sitemap.Mapview):
    """
    Java class 'org.openhab.core.model.sitemap.sitemap.impl.MapviewImpl'
    
        Extends:
            org.openhab.core.model.sitemap.sitemap.impl.NonLinkableWidgetImpl
    
        Interfaces:
            org.openhab.core.model.sitemap.sitemap.Mapview
    
    """
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> typing.Any: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, boolean: bool) -> typing.Any: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, boolean: bool, boolean2: bool) -> typing.Any: ...
    @typing.overload
    def eGet(self, featureID: int, resolve: bool, coreType: bool) -> typing.Any: ...
    @typing.overload
    def eIsSet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> bool: ...
    @typing.overload
    def eIsSet(self, featureID: int) -> bool: ...
    @typing.overload
    def eSet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, object: typing.Any) -> None: ...
    @typing.overload
    def eSet(self, featureID: int, newValue: typing.Any) -> None: ...
    @typing.overload
    def eUnset(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> None: ...
    @typing.overload
    def eUnset(self, featureID: int) -> None: ...
    def getHeight(self) -> int: ...
    def setHeight(self, newHeight: int) -> None: ...
    def toString(self) -> java.lang.String: ...

class SelectionImpl(NonLinkableWidgetImpl, org.openhab.core.model.sitemap.sitemap.Selection):
    """
    Java class 'org.openhab.core.model.sitemap.sitemap.impl.SelectionImpl'
    
        Extends:
            org.openhab.core.model.sitemap.sitemap.impl.NonLinkableWidgetImpl
    
        Interfaces:
            org.openhab.core.model.sitemap.sitemap.Selection
    
    """
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> typing.Any: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, boolean: bool) -> typing.Any: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, boolean: bool, boolean2: bool) -> typing.Any: ...
    @typing.overload
    def eGet(self, featureID: int, resolve: bool, coreType: bool) -> typing.Any: ...
    @typing.overload
    def eInverseRemove(self, internalEObject: org.eclipse.emf.ecore.InternalEObject, int2: int, class_: typing.Type[typing.Any], notificationChain: org.eclipse.emf.common.notify.NotificationChain) -> org.eclipse.emf.common.notify.NotificationChain: ...
    @typing.overload
    def eInverseRemove(self, otherEnd: org.eclipse.emf.ecore.InternalEObject, featureID: int, msgs: org.eclipse.emf.common.notify.NotificationChain) -> org.eclipse.emf.common.notify.NotificationChain: ...
    @typing.overload
    def eIsSet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> bool: ...
    @typing.overload
    def eIsSet(self, featureID: int) -> bool: ...
    @typing.overload
    def eSet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, object: typing.Any) -> None: ...
    @typing.overload
    def eSet(self, featureID: int, newValue: typing.Any) -> None: ...
    @typing.overload
    def eUnset(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> None: ...
    @typing.overload
    def eUnset(self, featureID: int) -> None: ...
    def getMappings(self) -> org.eclipse.emf.common.util.EList[org.openhab.core.model.sitemap.sitemap.Mapping]: ...

class SetpointImpl(NonLinkableWidgetImpl, org.openhab.core.model.sitemap.sitemap.Setpoint):
    """
    Java class 'org.openhab.core.model.sitemap.sitemap.impl.SetpointImpl'
    
        Extends:
            org.openhab.core.model.sitemap.sitemap.impl.NonLinkableWidgetImpl
    
        Interfaces:
            org.openhab.core.model.sitemap.sitemap.Setpoint
    
    """
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> typing.Any: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, boolean: bool) -> typing.Any: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, boolean: bool, boolean2: bool) -> typing.Any: ...
    @typing.overload
    def eGet(self, featureID: int, resolve: bool, coreType: bool) -> typing.Any: ...
    @typing.overload
    def eIsSet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> bool: ...
    @typing.overload
    def eIsSet(self, featureID: int) -> bool: ...
    @typing.overload
    def eSet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, object: typing.Any) -> None: ...
    @typing.overload
    def eSet(self, featureID: int, newValue: typing.Any) -> None: ...
    @typing.overload
    def eUnset(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> None: ...
    @typing.overload
    def eUnset(self, featureID: int) -> None: ...
    def getMaxValue(self) -> java.math.BigDecimal: ...
    def getMinValue(self) -> java.math.BigDecimal: ...
    def getStep(self) -> java.math.BigDecimal: ...
    def setMaxValue(self, newMaxValue: java.math.BigDecimal) -> None: ...
    def setMinValue(self, newMinValue: java.math.BigDecimal) -> None: ...
    def setStep(self, newStep: java.math.BigDecimal) -> None: ...
    def toString(self) -> java.lang.String: ...

class SliderImpl(NonLinkableWidgetImpl, org.openhab.core.model.sitemap.sitemap.Slider):
    """
    Java class 'org.openhab.core.model.sitemap.sitemap.impl.SliderImpl'
    
        Extends:
            org.openhab.core.model.sitemap.sitemap.impl.NonLinkableWidgetImpl
    
        Interfaces:
            org.openhab.core.model.sitemap.sitemap.Slider
    
    """
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> typing.Any: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, boolean: bool) -> typing.Any: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, boolean: bool, boolean2: bool) -> typing.Any: ...
    @typing.overload
    def eGet(self, featureID: int, resolve: bool, coreType: bool) -> typing.Any: ...
    @typing.overload
    def eIsSet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> bool: ...
    @typing.overload
    def eIsSet(self, featureID: int) -> bool: ...
    @typing.overload
    def eSet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, object: typing.Any) -> None: ...
    @typing.overload
    def eSet(self, featureID: int, newValue: typing.Any) -> None: ...
    @typing.overload
    def eUnset(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> None: ...
    @typing.overload
    def eUnset(self, featureID: int) -> None: ...
    def getFrequency(self) -> int: ...
    def getMaxValue(self) -> java.math.BigDecimal: ...
    def getMinValue(self) -> java.math.BigDecimal: ...
    def getStep(self) -> java.math.BigDecimal: ...
    def isSwitchEnabled(self) -> bool: ...
    def setFrequency(self, newFrequency: int) -> None: ...
    def setMaxValue(self, newMaxValue: java.math.BigDecimal) -> None: ...
    def setMinValue(self, newMinValue: java.math.BigDecimal) -> None: ...
    def setStep(self, newStep: java.math.BigDecimal) -> None: ...
    def setSwitchEnabled(self, newSwitchEnabled: bool) -> None: ...
    def toString(self) -> java.lang.String: ...

class SwitchImpl(NonLinkableWidgetImpl, org.openhab.core.model.sitemap.sitemap.Switch):
    """
    Java class 'org.openhab.core.model.sitemap.sitemap.impl.SwitchImpl'
    
        Extends:
            org.openhab.core.model.sitemap.sitemap.impl.NonLinkableWidgetImpl
    
        Interfaces:
            org.openhab.core.model.sitemap.sitemap.Switch
    
    """
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> typing.Any: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, boolean: bool) -> typing.Any: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, boolean: bool, boolean2: bool) -> typing.Any: ...
    @typing.overload
    def eGet(self, featureID: int, resolve: bool, coreType: bool) -> typing.Any: ...
    @typing.overload
    def eInverseRemove(self, internalEObject: org.eclipse.emf.ecore.InternalEObject, int2: int, class_: typing.Type[typing.Any], notificationChain: org.eclipse.emf.common.notify.NotificationChain) -> org.eclipse.emf.common.notify.NotificationChain: ...
    @typing.overload
    def eInverseRemove(self, otherEnd: org.eclipse.emf.ecore.InternalEObject, featureID: int, msgs: org.eclipse.emf.common.notify.NotificationChain) -> org.eclipse.emf.common.notify.NotificationChain: ...
    @typing.overload
    def eIsSet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> bool: ...
    @typing.overload
    def eIsSet(self, featureID: int) -> bool: ...
    @typing.overload
    def eSet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, object: typing.Any) -> None: ...
    @typing.overload
    def eSet(self, featureID: int, newValue: typing.Any) -> None: ...
    @typing.overload
    def eUnset(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> None: ...
    @typing.overload
    def eUnset(self, featureID: int) -> None: ...
    def getMappings(self) -> org.eclipse.emf.common.util.EList[org.openhab.core.model.sitemap.sitemap.Mapping]: ...

class TextImpl(LinkableWidgetImpl, org.openhab.core.model.sitemap.sitemap.Text):
    """
    Java class 'org.openhab.core.model.sitemap.sitemap.impl.TextImpl'
    
        Extends:
            org.openhab.core.model.sitemap.sitemap.impl.LinkableWidgetImpl
    
        Interfaces:
            org.openhab.core.model.sitemap.sitemap.Text
    
    """

class VideoImpl(NonLinkableWidgetImpl, org.openhab.core.model.sitemap.sitemap.Video):
    """
    Java class 'org.openhab.core.model.sitemap.sitemap.impl.VideoImpl'
    
        Extends:
            org.openhab.core.model.sitemap.sitemap.impl.NonLinkableWidgetImpl
    
        Interfaces:
            org.openhab.core.model.sitemap.sitemap.Video
    
    """
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> typing.Any: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, boolean: bool) -> typing.Any: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, boolean: bool, boolean2: bool) -> typing.Any: ...
    @typing.overload
    def eGet(self, featureID: int, resolve: bool, coreType: bool) -> typing.Any: ...
    @typing.overload
    def eIsSet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> bool: ...
    @typing.overload
    def eIsSet(self, featureID: int) -> bool: ...
    @typing.overload
    def eSet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, object: typing.Any) -> None: ...
    @typing.overload
    def eSet(self, featureID: int, newValue: typing.Any) -> None: ...
    @typing.overload
    def eUnset(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> None: ...
    @typing.overload
    def eUnset(self, featureID: int) -> None: ...
    def getEncoding(self) -> java.lang.String: ...
    def getUrl(self) -> java.lang.String: ...
    def setEncoding(self, newEncoding: java.lang.String) -> None: ...
    def setUrl(self, newUrl: java.lang.String) -> None: ...
    def toString(self) -> java.lang.String: ...

class WebviewImpl(NonLinkableWidgetImpl, org.openhab.core.model.sitemap.sitemap.Webview):
    """
    Java class 'org.openhab.core.model.sitemap.sitemap.impl.WebviewImpl'
    
        Extends:
            org.openhab.core.model.sitemap.sitemap.impl.NonLinkableWidgetImpl
    
        Interfaces:
            org.openhab.core.model.sitemap.sitemap.Webview
    
    """
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> typing.Any: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, boolean: bool) -> typing.Any: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, boolean: bool, boolean2: bool) -> typing.Any: ...
    @typing.overload
    def eGet(self, featureID: int, resolve: bool, coreType: bool) -> typing.Any: ...
    @typing.overload
    def eIsSet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> bool: ...
    @typing.overload
    def eIsSet(self, featureID: int) -> bool: ...
    @typing.overload
    def eSet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, object: typing.Any) -> None: ...
    @typing.overload
    def eSet(self, featureID: int, newValue: typing.Any) -> None: ...
    @typing.overload
    def eUnset(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> None: ...
    @typing.overload
    def eUnset(self, featureID: int) -> None: ...
    def getHeight(self) -> int: ...
    def getUrl(self) -> java.lang.String: ...
    def setHeight(self, newHeight: int) -> None: ...
    def setUrl(self, newUrl: java.lang.String) -> None: ...
    def toString(self) -> java.lang.String: ...
