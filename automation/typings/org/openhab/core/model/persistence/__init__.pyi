import com.google.inject
import java.lang
import org.eclipse.xtext
import org.eclipse.xtext.generator
import org.eclipse.xtext.naming
import org.eclipse.xtext.parser
import org.eclipse.xtext.parser.antlr
import org.eclipse.xtext.scoping
import org.eclipse.xtext.serializer
import org.eclipse.xtext.serializer.sequencer
import org.eclipse.xtext.service
import org.openhab.core.model.persistence.parser.antlr.internal
import org.openhab.core.model.persistence.validation
import typing


class AbstractPersistenceRuntimeModule(org.eclipse.xtext.service.DefaultRuntimeModule):
    """
    Java class 'org.openhab.core.model.persistence.AbstractPersistenceRuntimeModule'
    
        Extends:
            org.eclipse.xtext.service.DefaultRuntimeModule
    
      Constructors:
        * AbstractPersistenceRuntimeModule()
    
    """
    def __init__(self): ...
    def bindClassLoaderToInstance(self) -> java.lang.ClassLoader: ...
    def bindIAntlrTokenFileProvider(self) -> typing.Type[org.eclipse.xtext.parser.antlr.IAntlrTokenFileProvider]: ...
    def bindIGenerator2(self) -> typing.Type[org.eclipse.xtext.generator.IGenerator2]: ...
    def bindIGlobalScopeProvider(self) -> typing.Type[org.eclipse.xtext.scoping.IGlobalScopeProvider]: ...
    def bindIGrammarAccess(self) -> typing.Type[org.eclipse.xtext.IGrammarAccess]: ...
    def bindIParser(self) -> typing.Type[org.eclipse.xtext.parser.IParser]: ...
    def bindIQualifiedNameProvider(self) -> typing.Type[org.eclipse.xtext.naming.IQualifiedNameProvider]: ...
    def bindIScopeProvider(self) -> typing.Type[org.eclipse.xtext.scoping.IScopeProvider]: ...
    def bindISemanticSequencer(self) -> typing.Type[org.eclipse.xtext.serializer.sequencer.ISemanticSequencer]: ...
    def bindISerializer(self) -> typing.Type[org.eclipse.xtext.serializer.ISerializer]: ...
    def bindISyntacticSequencer(self) -> typing.Type[org.eclipse.xtext.serializer.sequencer.ISyntacticSequencer]: ...
    def bindITokenDefProvider(self) -> typing.Type[org.eclipse.xtext.parser.antlr.ITokenDefProvider]: ...
    def bindITokenToStringConverter(self) -> typing.Type[org.eclipse.xtext.parser.ITokenToStringConverter]: ...
    def bindLexer(self) -> typing.Type[org.eclipse.xtext.parser.antlr.Lexer]: ...
    def bindPersistenceValidator(self) -> typing.Type[org.openhab.core.model.persistence.validation.PersistenceValidator]: ...
    def configure(self, binder: com.google.inject.Binder) -> None: ...
    def configureFileExtensions(self, binder: com.google.inject.Binder) -> None: ...
    def configureIResourceDescriptions(self, binder: com.google.inject.Binder) -> None: ...
    def configureIResourceDescriptionsPersisted(self, binder: com.google.inject.Binder) -> None: ...
    def configureIScopeProviderDelegate(self, binder: com.google.inject.Binder) -> None: ...
    def configureIgnoreCaseLinking(self, binder: com.google.inject.Binder) -> None: ...
    def configureLanguageName(self, binder: com.google.inject.Binder) -> None: ...
    def configureRuntimeLexer(self, binder: com.google.inject.Binder) -> None: ...
    def provideInternalPersistenceLexer(self) -> com.google.inject.Provider[org.openhab.core.model.persistence.parser.antlr.internal.InternalPersistenceLexer]: ...

class PersistenceStandaloneSetupGenerated(org.eclipse.xtext.ISetup):
    """
    Java class 'org.openhab.core.model.persistence.PersistenceStandaloneSetupGenerated'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            org.eclipse.xtext.ISetup
    
      Constructors:
        * PersistenceStandaloneSetupGenerated()
    
    """
    def __init__(self): ...
    def createInjector(self) -> com.google.inject.Injector: ...
    def createInjectorAndDoEMFRegistration(self) -> com.google.inject.Injector: ...
    def register(self, injector: com.google.inject.Injector) -> None: ...

class PersistenceRuntimeModule(AbstractPersistenceRuntimeModule):
    """
    Java class 'org.openhab.core.model.persistence.PersistenceRuntimeModule'
    
        Extends:
            org.openhab.core.model.persistence.AbstractPersistenceRuntimeModule
    
      Constructors:
        * PersistenceRuntimeModule()
    
    """
    def __init__(self): ...
    def bindIGlobalScopeProvider(self) -> typing.Type[org.eclipse.xtext.scoping.IGlobalScopeProvider]: ...
    def configureUseIndexFragmentsForLazyLinking(self, binder: com.google.inject.Binder) -> None: ...

class PersistenceStandaloneSetup(PersistenceStandaloneSetupGenerated):
    """
    Java class 'org.openhab.core.model.persistence.PersistenceStandaloneSetup'
    
        Extends:
            org.openhab.core.model.persistence.PersistenceStandaloneSetupGenerated
    
      Constructors:
        * PersistenceStandaloneSetup()
    
    """
    def __init__(self): ...
    @classmethod
    def doSetup(cls) -> None: ...
    @classmethod
    def unregister(cls) -> None: ...
