import org.eclipse.emf.common.notify
import org.eclipse.emf.common.notify.impl
import org.eclipse.emf.ecore
import org.eclipse.emf.ecore.util
import org.openhab.core.model.persistence.persistence
import typing


class PersistenceAdapterFactory(org.eclipse.emf.common.notify.impl.AdapterFactoryImpl):
    """
    Java class 'org.openhab.core.model.persistence.persistence.util.PersistenceAdapterFactory'
    
        Extends:
            org.eclipse.emf.common.notify.impl.AdapterFactoryImpl
    
      Constructors:
        * PersistenceAdapterFactory()
    
    """
    def __init__(self): ...
    def createAdapter(self, target: org.eclipse.emf.common.notify.Notifier) -> org.eclipse.emf.common.notify.Adapter: ...
    def createAllConfigAdapter(self) -> org.eclipse.emf.common.notify.Adapter: ...
    def createCronStrategyAdapter(self) -> org.eclipse.emf.common.notify.Adapter: ...
    def createEObjectAdapter(self) -> org.eclipse.emf.common.notify.Adapter: ...
    def createFilterAdapter(self) -> org.eclipse.emf.common.notify.Adapter: ...
    def createFilterDetailsAdapter(self) -> org.eclipse.emf.common.notify.Adapter: ...
    def createGroupConfigAdapter(self) -> org.eclipse.emf.common.notify.Adapter: ...
    def createItemConfigAdapter(self) -> org.eclipse.emf.common.notify.Adapter: ...
    def createPersistenceConfigurationAdapter(self) -> org.eclipse.emf.common.notify.Adapter: ...
    def createPersistenceModelAdapter(self) -> org.eclipse.emf.common.notify.Adapter: ...
    def createStrategyAdapter(self) -> org.eclipse.emf.common.notify.Adapter: ...
    def createThresholdFilterAdapter(self) -> org.eclipse.emf.common.notify.Adapter: ...
    def createTimeFilterAdapter(self) -> org.eclipse.emf.common.notify.Adapter: ...
    def isFactoryForType(self, object: typing.Any) -> bool: ...

_PersistenceSwitch__T = typing.TypeVar('_PersistenceSwitch__T')  # <T>
class PersistenceSwitch(org.eclipse.emf.ecore.util.Switch[_PersistenceSwitch__T], typing.Generic[_PersistenceSwitch__T]):
    """
    Java class 'org.openhab.core.model.persistence.persistence.util.PersistenceSwitch'
    
        Extends:
            org.eclipse.emf.ecore.util.Switch
    
      Constructors:
        * PersistenceSwitch()
    
    """
    def __init__(self): ...
    def caseAllConfig(self, object: org.openhab.core.model.persistence.persistence.AllConfig) -> _PersistenceSwitch__T: ...
    def caseCronStrategy(self, object: org.openhab.core.model.persistence.persistence.CronStrategy) -> _PersistenceSwitch__T: ...
    def caseFilter(self, object: org.openhab.core.model.persistence.persistence.Filter) -> _PersistenceSwitch__T: ...
    def caseFilterDetails(self, object: org.openhab.core.model.persistence.persistence.FilterDetails) -> _PersistenceSwitch__T: ...
    def caseGroupConfig(self, object: org.openhab.core.model.persistence.persistence.GroupConfig) -> _PersistenceSwitch__T: ...
    def caseItemConfig(self, object: org.openhab.core.model.persistence.persistence.ItemConfig) -> _PersistenceSwitch__T: ...
    def casePersistenceConfiguration(self, object: org.openhab.core.model.persistence.persistence.PersistenceConfiguration) -> _PersistenceSwitch__T: ...
    def casePersistenceModel(self, object: org.openhab.core.model.persistence.persistence.PersistenceModel) -> _PersistenceSwitch__T: ...
    def caseStrategy(self, object: org.openhab.core.model.persistence.persistence.Strategy) -> _PersistenceSwitch__T: ...
    def caseThresholdFilter(self, object: org.openhab.core.model.persistence.persistence.ThresholdFilter) -> _PersistenceSwitch__T: ...
    def caseTimeFilter(self, object: org.openhab.core.model.persistence.persistence.TimeFilter) -> _PersistenceSwitch__T: ...
    def defaultCase(self, object: org.eclipse.emf.ecore.EObject) -> _PersistenceSwitch__T: ...
