import org.eclipse.emf.common.notify
import org.eclipse.emf.common.notify.impl
import org.eclipse.emf.ecore
import org.eclipse.emf.ecore.util
import org.openhab.core.model.rule.rules
import typing


class RulesAdapterFactory(org.eclipse.emf.common.notify.impl.AdapterFactoryImpl):
    """
    Java class 'org.openhab.core.model.rule.rules.util.RulesAdapterFactory'
    
        Extends:
            org.eclipse.emf.common.notify.impl.AdapterFactoryImpl
    
      Constructors:
        * RulesAdapterFactory()
    
    """
    def __init__(self): ...
    def createAdapter(self, target: org.eclipse.emf.common.notify.Notifier) -> org.eclipse.emf.common.notify.Adapter: ...
    def createChangedEventTriggerAdapter(self) -> org.eclipse.emf.common.notify.Adapter: ...
    def createCommandEventTriggerAdapter(self) -> org.eclipse.emf.common.notify.Adapter: ...
    def createEObjectAdapter(self) -> org.eclipse.emf.common.notify.Adapter: ...
    def createEventEmittedTriggerAdapter(self) -> org.eclipse.emf.common.notify.Adapter: ...
    def createEventTriggerAdapter(self) -> org.eclipse.emf.common.notify.Adapter: ...
    def createGroupMemberChangedEventTriggerAdapter(self) -> org.eclipse.emf.common.notify.Adapter: ...
    def createGroupMemberCommandEventTriggerAdapter(self) -> org.eclipse.emf.common.notify.Adapter: ...
    def createGroupMemberUpdateEventTriggerAdapter(self) -> org.eclipse.emf.common.notify.Adapter: ...
    def createRuleAdapter(self) -> org.eclipse.emf.common.notify.Adapter: ...
    def createRuleModelAdapter(self) -> org.eclipse.emf.common.notify.Adapter: ...
    def createSystemOnShutdownTriggerAdapter(self) -> org.eclipse.emf.common.notify.Adapter: ...
    def createSystemOnStartupTriggerAdapter(self) -> org.eclipse.emf.common.notify.Adapter: ...
    def createSystemTriggerAdapter(self) -> org.eclipse.emf.common.notify.Adapter: ...
    def createThingStateChangedEventTriggerAdapter(self) -> org.eclipse.emf.common.notify.Adapter: ...
    def createThingStateUpdateEventTriggerAdapter(self) -> org.eclipse.emf.common.notify.Adapter: ...
    def createTimerTriggerAdapter(self) -> org.eclipse.emf.common.notify.Adapter: ...
    def createUpdateEventTriggerAdapter(self) -> org.eclipse.emf.common.notify.Adapter: ...
    def createValidCommandAdapter(self) -> org.eclipse.emf.common.notify.Adapter: ...
    def createValidCommandIdAdapter(self) -> org.eclipse.emf.common.notify.Adapter: ...
    def createValidCommandNumberAdapter(self) -> org.eclipse.emf.common.notify.Adapter: ...
    def createValidCommandStringAdapter(self) -> org.eclipse.emf.common.notify.Adapter: ...
    def createValidStateAdapter(self) -> org.eclipse.emf.common.notify.Adapter: ...
    def createValidStateIdAdapter(self) -> org.eclipse.emf.common.notify.Adapter: ...
    def createValidStateNumberAdapter(self) -> org.eclipse.emf.common.notify.Adapter: ...
    def createValidStateStringAdapter(self) -> org.eclipse.emf.common.notify.Adapter: ...
    def createValidTriggerAdapter(self) -> org.eclipse.emf.common.notify.Adapter: ...
    def createValidTriggerIdAdapter(self) -> org.eclipse.emf.common.notify.Adapter: ...
    def createValidTriggerNumberAdapter(self) -> org.eclipse.emf.common.notify.Adapter: ...
    def createValidTriggerStringAdapter(self) -> org.eclipse.emf.common.notify.Adapter: ...
    def createVariableDeclarationAdapter(self) -> org.eclipse.emf.common.notify.Adapter: ...
    def isFactoryForType(self, object: typing.Any) -> bool: ...

_RulesSwitch__T = typing.TypeVar('_RulesSwitch__T')  # <T>
class RulesSwitch(org.eclipse.emf.ecore.util.Switch[_RulesSwitch__T], typing.Generic[_RulesSwitch__T]):
    """
    Java class 'org.openhab.core.model.rule.rules.util.RulesSwitch'
    
        Extends:
            org.eclipse.emf.ecore.util.Switch
    
      Constructors:
        * RulesSwitch()
    
    """
    def __init__(self): ...
    def caseChangedEventTrigger(self, object: org.openhab.core.model.rule.rules.ChangedEventTrigger) -> _RulesSwitch__T: ...
    def caseCommandEventTrigger(self, object: org.openhab.core.model.rule.rules.CommandEventTrigger) -> _RulesSwitch__T: ...
    def caseEventEmittedTrigger(self, object: org.openhab.core.model.rule.rules.EventEmittedTrigger) -> _RulesSwitch__T: ...
    def caseEventTrigger(self, object: org.openhab.core.model.rule.rules.EventTrigger) -> _RulesSwitch__T: ...
    def caseGroupMemberChangedEventTrigger(self, object: org.openhab.core.model.rule.rules.GroupMemberChangedEventTrigger) -> _RulesSwitch__T: ...
    def caseGroupMemberCommandEventTrigger(self, object: org.openhab.core.model.rule.rules.GroupMemberCommandEventTrigger) -> _RulesSwitch__T: ...
    def caseGroupMemberUpdateEventTrigger(self, object: org.openhab.core.model.rule.rules.GroupMemberUpdateEventTrigger) -> _RulesSwitch__T: ...
    def caseRule(self, object: org.openhab.core.model.rule.rules.Rule) -> _RulesSwitch__T: ...
    def caseRuleModel(self, object: org.openhab.core.model.rule.rules.RuleModel) -> _RulesSwitch__T: ...
    def caseSystemOnShutdownTrigger(self, object: org.openhab.core.model.rule.rules.SystemOnShutdownTrigger) -> _RulesSwitch__T: ...
    def caseSystemOnStartupTrigger(self, object: org.openhab.core.model.rule.rules.SystemOnStartupTrigger) -> _RulesSwitch__T: ...
    def caseSystemTrigger(self, object: org.openhab.core.model.rule.rules.SystemTrigger) -> _RulesSwitch__T: ...
    def caseThingStateChangedEventTrigger(self, object: org.openhab.core.model.rule.rules.ThingStateChangedEventTrigger) -> _RulesSwitch__T: ...
    def caseThingStateUpdateEventTrigger(self, object: org.openhab.core.model.rule.rules.ThingStateUpdateEventTrigger) -> _RulesSwitch__T: ...
    def caseTimerTrigger(self, object: org.openhab.core.model.rule.rules.TimerTrigger) -> _RulesSwitch__T: ...
    def caseUpdateEventTrigger(self, object: org.openhab.core.model.rule.rules.UpdateEventTrigger) -> _RulesSwitch__T: ...
    def caseValidCommand(self, object: org.openhab.core.model.rule.rules.ValidCommand) -> _RulesSwitch__T: ...
    def caseValidCommandId(self, object: org.openhab.core.model.rule.rules.ValidCommandId) -> _RulesSwitch__T: ...
    def caseValidCommandNumber(self, object: org.openhab.core.model.rule.rules.ValidCommandNumber) -> _RulesSwitch__T: ...
    def caseValidCommandString(self, object: org.openhab.core.model.rule.rules.ValidCommandString) -> _RulesSwitch__T: ...
    def caseValidState(self, object: org.openhab.core.model.rule.rules.ValidState) -> _RulesSwitch__T: ...
    def caseValidStateId(self, object: org.openhab.core.model.rule.rules.ValidStateId) -> _RulesSwitch__T: ...
    def caseValidStateNumber(self, object: org.openhab.core.model.rule.rules.ValidStateNumber) -> _RulesSwitch__T: ...
    def caseValidStateString(self, object: org.openhab.core.model.rule.rules.ValidStateString) -> _RulesSwitch__T: ...
    def caseValidTrigger(self, object: org.openhab.core.model.rule.rules.ValidTrigger) -> _RulesSwitch__T: ...
    def caseValidTriggerId(self, object: org.openhab.core.model.rule.rules.ValidTriggerId) -> _RulesSwitch__T: ...
    def caseValidTriggerNumber(self, object: org.openhab.core.model.rule.rules.ValidTriggerNumber) -> _RulesSwitch__T: ...
    def caseValidTriggerString(self, object: org.openhab.core.model.rule.rules.ValidTriggerString) -> _RulesSwitch__T: ...
    def caseVariableDeclaration(self, object: org.openhab.core.model.rule.rules.VariableDeclaration) -> _RulesSwitch__T: ...
    def defaultCase(self, object: org.eclipse.emf.ecore.EObject) -> _RulesSwitch__T: ...
