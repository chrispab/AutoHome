import java.lang
import org.eclipse.emf.common.notify
import org.eclipse.emf.common.util
import org.eclipse.emf.ecore
import org.eclipse.emf.ecore.impl
import org.eclipse.emf.ecore.resource.impl
import org.eclipse.xtext.common.types
import org.eclipse.xtext.xbase
import org.eclipse.xtext.xtype
import org.openhab.core.model.rule.rules
import typing


class EventTriggerImpl(org.eclipse.emf.ecore.impl.MinimalEObjectImpl.Container, org.openhab.core.model.rule.rules.EventTrigger):
    """
    Java class 'org.openhab.core.model.rule.rules.impl.EventTriggerImpl'
    
        Extends:
            org.eclipse.emf.ecore.impl.MinimalEObjectImpl$Container
    
        Interfaces:
            org.openhab.core.model.rule.rules.EventTrigger
    
    """

class RuleImpl(org.eclipse.emf.ecore.impl.MinimalEObjectImpl.Container, org.openhab.core.model.rule.rules.Rule):
    """
    Java class 'org.openhab.core.model.rule.rules.impl.RuleImpl'
    
        Extends:
            org.eclipse.emf.ecore.impl.MinimalEObjectImpl$Container
    
        Interfaces:
            org.openhab.core.model.rule.rules.Rule
    
    """
    def basicSetScript(self, newScript: org.eclipse.xtext.xbase.XBlockExpression, msgs: org.eclipse.emf.common.notify.NotificationChain) -> org.eclipse.emf.common.notify.NotificationChain: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> typing.Any: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, boolean: bool) -> typing.Any: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, boolean: bool, boolean2: bool) -> typing.Any: ...
    @typing.overload
    def eGet(self, featureID: int, resolve: bool, coreType: bool) -> typing.Any: ...
    @typing.overload
    def eInverseRemove(self, internalEObject: org.eclipse.emf.ecore.InternalEObject, int2: int, class_: typing.Type[typing.Any], notificationChain: org.eclipse.emf.common.notify.NotificationChain) -> org.eclipse.emf.common.notify.NotificationChain: ...
    @typing.overload
    def eInverseRemove(self, otherEnd: org.eclipse.emf.ecore.InternalEObject, featureID: int, msgs: org.eclipse.emf.common.notify.NotificationChain) -> org.eclipse.emf.common.notify.NotificationChain: ...
    @typing.overload
    def eIsSet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> bool: ...
    @typing.overload
    def eIsSet(self, featureID: int) -> bool: ...
    @typing.overload
    def eSet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, object: typing.Any) -> None: ...
    @typing.overload
    def eSet(self, featureID: int, newValue: typing.Any) -> None: ...
    @typing.overload
    def eUnset(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> None: ...
    @typing.overload
    def eUnset(self, featureID: int) -> None: ...
    def getEventtrigger(self) -> org.eclipse.emf.common.util.EList[org.openhab.core.model.rule.rules.EventTrigger]: ...
    def getName(self) -> java.lang.String: ...
    def getScript(self) -> org.eclipse.xtext.xbase.XBlockExpression: ...
    def setName(self, newName: java.lang.String) -> None: ...
    def setScript(self, newScript: org.eclipse.xtext.xbase.XBlockExpression) -> None: ...
    def toString(self) -> java.lang.String: ...

class RuleModelImpl(org.eclipse.emf.ecore.impl.MinimalEObjectImpl.Container, org.openhab.core.model.rule.rules.RuleModel):
    """
    Java class 'org.openhab.core.model.rule.rules.impl.RuleModelImpl'
    
        Extends:
            org.eclipse.emf.ecore.impl.MinimalEObjectImpl$Container
    
        Interfaces:
            org.openhab.core.model.rule.rules.RuleModel
    
    """
    def basicSetImportSection(self, newImportSection: org.eclipse.xtext.xtype.XImportSection, msgs: org.eclipse.emf.common.notify.NotificationChain) -> org.eclipse.emf.common.notify.NotificationChain: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> typing.Any: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, boolean: bool) -> typing.Any: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, boolean: bool, boolean2: bool) -> typing.Any: ...
    @typing.overload
    def eGet(self, featureID: int, resolve: bool, coreType: bool) -> typing.Any: ...
    @typing.overload
    def eInverseRemove(self, internalEObject: org.eclipse.emf.ecore.InternalEObject, int2: int, class_: typing.Type[typing.Any], notificationChain: org.eclipse.emf.common.notify.NotificationChain) -> org.eclipse.emf.common.notify.NotificationChain: ...
    @typing.overload
    def eInverseRemove(self, otherEnd: org.eclipse.emf.ecore.InternalEObject, featureID: int, msgs: org.eclipse.emf.common.notify.NotificationChain) -> org.eclipse.emf.common.notify.NotificationChain: ...
    @typing.overload
    def eIsSet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> bool: ...
    @typing.overload
    def eIsSet(self, featureID: int) -> bool: ...
    @typing.overload
    def eSet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, object: typing.Any) -> None: ...
    @typing.overload
    def eSet(self, featureID: int, newValue: typing.Any) -> None: ...
    @typing.overload
    def eUnset(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> None: ...
    @typing.overload
    def eUnset(self, featureID: int) -> None: ...
    def getImportSection(self) -> org.eclipse.xtext.xtype.XImportSection: ...
    def getRules(self) -> org.eclipse.emf.common.util.EList[org.openhab.core.model.rule.rules.Rule]: ...
    def getVariables(self) -> org.eclipse.emf.common.util.EList[org.openhab.core.model.rule.rules.VariableDeclaration]: ...
    def setImportSection(self, newImportSection: org.eclipse.xtext.xtype.XImportSection) -> None: ...

class RulesFactoryImpl(org.eclipse.emf.ecore.impl.EFactoryImpl, org.openhab.core.model.rule.rules.RulesFactory):
    """
    Java class 'org.openhab.core.model.rule.rules.impl.RulesFactoryImpl'
    
        Extends:
            org.eclipse.emf.ecore.impl.EFactoryImpl
    
        Interfaces:
            org.openhab.core.model.rule.rules.RulesFactory
    
      Constructors:
        * RulesFactoryImpl()
    
    """
    def __init__(self): ...
    @typing.overload
    def create(self, eClass: org.eclipse.emf.ecore.EClass) -> org.eclipse.emf.ecore.EObject: ...
    @typing.overload
    def create(self, eDataType: org.eclipse.emf.ecore.EDataType) -> org.eclipse.emf.ecore.resource.impl.BinaryResourceImpl.DataConverter[typing.Any]: ...
    def createChangedEventTrigger(self) -> org.openhab.core.model.rule.rules.ChangedEventTrigger: ...
    def createCommandEventTrigger(self) -> org.openhab.core.model.rule.rules.CommandEventTrigger: ...
    def createEventEmittedTrigger(self) -> org.openhab.core.model.rule.rules.EventEmittedTrigger: ...
    def createEventTrigger(self) -> org.openhab.core.model.rule.rules.EventTrigger: ...
    def createGroupMemberChangedEventTrigger(self) -> org.openhab.core.model.rule.rules.GroupMemberChangedEventTrigger: ...
    def createGroupMemberCommandEventTrigger(self) -> org.openhab.core.model.rule.rules.GroupMemberCommandEventTrigger: ...
    def createGroupMemberUpdateEventTrigger(self) -> org.openhab.core.model.rule.rules.GroupMemberUpdateEventTrigger: ...
    def createRule(self) -> org.openhab.core.model.rule.rules.Rule: ...
    def createRuleModel(self) -> org.openhab.core.model.rule.rules.RuleModel: ...
    def createSystemOnShutdownTrigger(self) -> org.openhab.core.model.rule.rules.SystemOnShutdownTrigger: ...
    def createSystemOnStartupTrigger(self) -> org.openhab.core.model.rule.rules.SystemOnStartupTrigger: ...
    def createSystemTrigger(self) -> org.openhab.core.model.rule.rules.SystemTrigger: ...
    def createThingStateChangedEventTrigger(self) -> org.openhab.core.model.rule.rules.ThingStateChangedEventTrigger: ...
    def createThingStateUpdateEventTrigger(self) -> org.openhab.core.model.rule.rules.ThingStateUpdateEventTrigger: ...
    def createTimerTrigger(self) -> org.openhab.core.model.rule.rules.TimerTrigger: ...
    def createUpdateEventTrigger(self) -> org.openhab.core.model.rule.rules.UpdateEventTrigger: ...
    def createValidCommand(self) -> org.openhab.core.model.rule.rules.ValidCommand: ...
    def createValidCommandId(self) -> org.openhab.core.model.rule.rules.ValidCommandId: ...
    def createValidCommandNumber(self) -> org.openhab.core.model.rule.rules.ValidCommandNumber: ...
    def createValidCommandString(self) -> org.openhab.core.model.rule.rules.ValidCommandString: ...
    def createValidState(self) -> org.openhab.core.model.rule.rules.ValidState: ...
    def createValidStateId(self) -> org.openhab.core.model.rule.rules.ValidStateId: ...
    def createValidStateNumber(self) -> org.openhab.core.model.rule.rules.ValidStateNumber: ...
    def createValidStateString(self) -> org.openhab.core.model.rule.rules.ValidStateString: ...
    def createValidTrigger(self) -> org.openhab.core.model.rule.rules.ValidTrigger: ...
    def createValidTriggerId(self) -> org.openhab.core.model.rule.rules.ValidTriggerId: ...
    def createValidTriggerNumber(self) -> org.openhab.core.model.rule.rules.ValidTriggerNumber: ...
    def createValidTriggerString(self) -> org.openhab.core.model.rule.rules.ValidTriggerString: ...
    def createVariableDeclaration(self) -> org.openhab.core.model.rule.rules.VariableDeclaration: ...
    @classmethod
    def getPackage(cls) -> org.openhab.core.model.rule.rules.RulesPackage: ...
    def getRulesPackage(self) -> org.openhab.core.model.rule.rules.RulesPackage: ...
    @classmethod
    def init(cls) -> org.openhab.core.model.rule.rules.RulesFactory: ...

class RulesPackageImpl(org.eclipse.emf.ecore.impl.EPackageImpl, org.openhab.core.model.rule.rules.RulesPackage):
    """
    Java class 'org.openhab.core.model.rule.rules.impl.RulesPackageImpl'
    
        Extends:
            org.eclipse.emf.ecore.impl.EPackageImpl
    
        Interfaces:
            org.openhab.core.model.rule.rules.RulesPackage
    
    """
    def createPackageContents(self) -> None: ...
    def getChangedEventTrigger(self) -> org.eclipse.emf.ecore.EClass: ...
    def getChangedEventTrigger_Item(self) -> org.eclipse.emf.ecore.EAttribute: ...
    def getChangedEventTrigger_NewState(self) -> org.eclipse.emf.ecore.EReference: ...
    def getChangedEventTrigger_OldState(self) -> org.eclipse.emf.ecore.EReference: ...
    def getCommandEventTrigger(self) -> org.eclipse.emf.ecore.EClass: ...
    def getCommandEventTrigger_Command(self) -> org.eclipse.emf.ecore.EReference: ...
    def getCommandEventTrigger_Item(self) -> org.eclipse.emf.ecore.EAttribute: ...
    def getEventEmittedTrigger(self) -> org.eclipse.emf.ecore.EClass: ...
    def getEventEmittedTrigger_Channel(self) -> org.eclipse.emf.ecore.EAttribute: ...
    def getEventEmittedTrigger_Trigger(self) -> org.eclipse.emf.ecore.EReference: ...
    def getEventTrigger(self) -> org.eclipse.emf.ecore.EClass: ...
    def getGroupMemberChangedEventTrigger(self) -> org.eclipse.emf.ecore.EClass: ...
    def getGroupMemberChangedEventTrigger_Group(self) -> org.eclipse.emf.ecore.EAttribute: ...
    def getGroupMemberChangedEventTrigger_NewState(self) -> org.eclipse.emf.ecore.EReference: ...
    def getGroupMemberChangedEventTrigger_OldState(self) -> org.eclipse.emf.ecore.EReference: ...
    def getGroupMemberCommandEventTrigger(self) -> org.eclipse.emf.ecore.EClass: ...
    def getGroupMemberCommandEventTrigger_Command(self) -> org.eclipse.emf.ecore.EReference: ...
    def getGroupMemberCommandEventTrigger_Group(self) -> org.eclipse.emf.ecore.EAttribute: ...
    def getGroupMemberUpdateEventTrigger(self) -> org.eclipse.emf.ecore.EClass: ...
    def getGroupMemberUpdateEventTrigger_Group(self) -> org.eclipse.emf.ecore.EAttribute: ...
    def getGroupMemberUpdateEventTrigger_State(self) -> org.eclipse.emf.ecore.EReference: ...
    def getRule(self) -> org.eclipse.emf.ecore.EClass: ...
    def getRuleModel(self) -> org.eclipse.emf.ecore.EClass: ...
    def getRuleModel_ImportSection(self) -> org.eclipse.emf.ecore.EReference: ...
    def getRuleModel_Rules(self) -> org.eclipse.emf.ecore.EReference: ...
    def getRuleModel_Variables(self) -> org.eclipse.emf.ecore.EReference: ...
    def getRule_Eventtrigger(self) -> org.eclipse.emf.ecore.EReference: ...
    def getRule_Name(self) -> org.eclipse.emf.ecore.EAttribute: ...
    def getRule_Script(self) -> org.eclipse.emf.ecore.EReference: ...
    def getRulesFactory(self) -> org.openhab.core.model.rule.rules.RulesFactory: ...
    def getSystemOnShutdownTrigger(self) -> org.eclipse.emf.ecore.EClass: ...
    def getSystemOnStartupTrigger(self) -> org.eclipse.emf.ecore.EClass: ...
    def getSystemTrigger(self) -> org.eclipse.emf.ecore.EClass: ...
    def getThingStateChangedEventTrigger(self) -> org.eclipse.emf.ecore.EClass: ...
    def getThingStateChangedEventTrigger_NewState(self) -> org.eclipse.emf.ecore.EAttribute: ...
    def getThingStateChangedEventTrigger_OldState(self) -> org.eclipse.emf.ecore.EAttribute: ...
    def getThingStateChangedEventTrigger_Thing(self) -> org.eclipse.emf.ecore.EAttribute: ...
    def getThingStateUpdateEventTrigger(self) -> org.eclipse.emf.ecore.EClass: ...
    def getThingStateUpdateEventTrigger_State(self) -> org.eclipse.emf.ecore.EAttribute: ...
    def getThingStateUpdateEventTrigger_Thing(self) -> org.eclipse.emf.ecore.EAttribute: ...
    def getTimerTrigger(self) -> org.eclipse.emf.ecore.EClass: ...
    def getTimerTrigger_Cron(self) -> org.eclipse.emf.ecore.EAttribute: ...
    def getTimerTrigger_Time(self) -> org.eclipse.emf.ecore.EAttribute: ...
    def getUpdateEventTrigger(self) -> org.eclipse.emf.ecore.EClass: ...
    def getUpdateEventTrigger_Item(self) -> org.eclipse.emf.ecore.EAttribute: ...
    def getUpdateEventTrigger_State(self) -> org.eclipse.emf.ecore.EReference: ...
    def getValidCommand(self) -> org.eclipse.emf.ecore.EClass: ...
    def getValidCommandId(self) -> org.eclipse.emf.ecore.EClass: ...
    def getValidCommandNumber(self) -> org.eclipse.emf.ecore.EClass: ...
    def getValidCommandString(self) -> org.eclipse.emf.ecore.EClass: ...
    def getValidCommand_Value(self) -> org.eclipse.emf.ecore.EAttribute: ...
    def getValidState(self) -> org.eclipse.emf.ecore.EClass: ...
    def getValidStateId(self) -> org.eclipse.emf.ecore.EClass: ...
    def getValidStateNumber(self) -> org.eclipse.emf.ecore.EClass: ...
    def getValidStateString(self) -> org.eclipse.emf.ecore.EClass: ...
    def getValidState_Value(self) -> org.eclipse.emf.ecore.EAttribute: ...
    def getValidTrigger(self) -> org.eclipse.emf.ecore.EClass: ...
    def getValidTriggerId(self) -> org.eclipse.emf.ecore.EClass: ...
    def getValidTriggerNumber(self) -> org.eclipse.emf.ecore.EClass: ...
    def getValidTriggerString(self) -> org.eclipse.emf.ecore.EClass: ...
    def getValidTrigger_Value(self) -> org.eclipse.emf.ecore.EAttribute: ...
    def getVariableDeclaration(self) -> org.eclipse.emf.ecore.EClass: ...
    def getVariableDeclaration_Name(self) -> org.eclipse.emf.ecore.EAttribute: ...
    def getVariableDeclaration_Right(self) -> org.eclipse.emf.ecore.EReference: ...
    def getVariableDeclaration_Type(self) -> org.eclipse.emf.ecore.EReference: ...
    def getVariableDeclaration_Writeable(self) -> org.eclipse.emf.ecore.EAttribute: ...
    @classmethod
    def init(cls) -> org.openhab.core.model.rule.rules.RulesPackage: ...
    def initializePackageContents(self) -> None: ...

class ValidCommandImpl(org.eclipse.emf.ecore.impl.MinimalEObjectImpl.Container, org.openhab.core.model.rule.rules.ValidCommand):
    """
    Java class 'org.openhab.core.model.rule.rules.impl.ValidCommandImpl'
    
        Extends:
            org.eclipse.emf.ecore.impl.MinimalEObjectImpl$Container
    
        Interfaces:
            org.openhab.core.model.rule.rules.ValidCommand
    
    """
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> typing.Any: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, boolean: bool) -> typing.Any: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, boolean: bool, boolean2: bool) -> typing.Any: ...
    @typing.overload
    def eGet(self, featureID: int, resolve: bool, coreType: bool) -> typing.Any: ...
    @typing.overload
    def eIsSet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> bool: ...
    @typing.overload
    def eIsSet(self, featureID: int) -> bool: ...
    @typing.overload
    def eSet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, object: typing.Any) -> None: ...
    @typing.overload
    def eSet(self, featureID: int, newValue: typing.Any) -> None: ...
    @typing.overload
    def eUnset(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> None: ...
    @typing.overload
    def eUnset(self, featureID: int) -> None: ...
    def getValue(self) -> java.lang.String: ...
    def setValue(self, newValue: java.lang.String) -> None: ...
    def toString(self) -> java.lang.String: ...

class ValidStateImpl(org.eclipse.emf.ecore.impl.MinimalEObjectImpl.Container, org.openhab.core.model.rule.rules.ValidState):
    """
    Java class 'org.openhab.core.model.rule.rules.impl.ValidStateImpl'
    
        Extends:
            org.eclipse.emf.ecore.impl.MinimalEObjectImpl$Container
    
        Interfaces:
            org.openhab.core.model.rule.rules.ValidState
    
    """
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> typing.Any: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, boolean: bool) -> typing.Any: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, boolean: bool, boolean2: bool) -> typing.Any: ...
    @typing.overload
    def eGet(self, featureID: int, resolve: bool, coreType: bool) -> typing.Any: ...
    @typing.overload
    def eIsSet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> bool: ...
    @typing.overload
    def eIsSet(self, featureID: int) -> bool: ...
    @typing.overload
    def eSet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, object: typing.Any) -> None: ...
    @typing.overload
    def eSet(self, featureID: int, newValue: typing.Any) -> None: ...
    @typing.overload
    def eUnset(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> None: ...
    @typing.overload
    def eUnset(self, featureID: int) -> None: ...
    def getValue(self) -> java.lang.String: ...
    def setValue(self, newValue: java.lang.String) -> None: ...
    def toString(self) -> java.lang.String: ...

class ValidTriggerImpl(org.eclipse.emf.ecore.impl.MinimalEObjectImpl.Container, org.openhab.core.model.rule.rules.ValidTrigger):
    """
    Java class 'org.openhab.core.model.rule.rules.impl.ValidTriggerImpl'
    
        Extends:
            org.eclipse.emf.ecore.impl.MinimalEObjectImpl$Container
    
        Interfaces:
            org.openhab.core.model.rule.rules.ValidTrigger
    
    """
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> typing.Any: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, boolean: bool) -> typing.Any: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, boolean: bool, boolean2: bool) -> typing.Any: ...
    @typing.overload
    def eGet(self, featureID: int, resolve: bool, coreType: bool) -> typing.Any: ...
    @typing.overload
    def eIsSet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> bool: ...
    @typing.overload
    def eIsSet(self, featureID: int) -> bool: ...
    @typing.overload
    def eSet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, object: typing.Any) -> None: ...
    @typing.overload
    def eSet(self, featureID: int, newValue: typing.Any) -> None: ...
    @typing.overload
    def eUnset(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> None: ...
    @typing.overload
    def eUnset(self, featureID: int) -> None: ...
    def getValue(self) -> java.lang.String: ...
    def setValue(self, newValue: java.lang.String) -> None: ...
    def toString(self) -> java.lang.String: ...

class VariableDeclarationImpl(org.eclipse.emf.ecore.impl.MinimalEObjectImpl.Container, org.openhab.core.model.rule.rules.VariableDeclaration):
    """
    Java class 'org.openhab.core.model.rule.rules.impl.VariableDeclarationImpl'
    
        Extends:
            org.eclipse.emf.ecore.impl.MinimalEObjectImpl$Container
    
        Interfaces:
            org.openhab.core.model.rule.rules.VariableDeclaration
    
    """
    def basicSetRight(self, newRight: org.eclipse.xtext.xbase.XExpression, msgs: org.eclipse.emf.common.notify.NotificationChain) -> org.eclipse.emf.common.notify.NotificationChain: ...
    def basicSetType(self, newType: org.eclipse.xtext.common.types.JvmTypeReference, msgs: org.eclipse.emf.common.notify.NotificationChain) -> org.eclipse.emf.common.notify.NotificationChain: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> typing.Any: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, boolean: bool) -> typing.Any: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, boolean: bool, boolean2: bool) -> typing.Any: ...
    @typing.overload
    def eGet(self, featureID: int, resolve: bool, coreType: bool) -> typing.Any: ...
    @typing.overload
    def eInverseRemove(self, internalEObject: org.eclipse.emf.ecore.InternalEObject, int2: int, class_: typing.Type[typing.Any], notificationChain: org.eclipse.emf.common.notify.NotificationChain) -> org.eclipse.emf.common.notify.NotificationChain: ...
    @typing.overload
    def eInverseRemove(self, otherEnd: org.eclipse.emf.ecore.InternalEObject, featureID: int, msgs: org.eclipse.emf.common.notify.NotificationChain) -> org.eclipse.emf.common.notify.NotificationChain: ...
    @typing.overload
    def eIsSet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> bool: ...
    @typing.overload
    def eIsSet(self, featureID: int) -> bool: ...
    @typing.overload
    def eSet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, object: typing.Any) -> None: ...
    @typing.overload
    def eSet(self, featureID: int, newValue: typing.Any) -> None: ...
    @typing.overload
    def eUnset(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> None: ...
    @typing.overload
    def eUnset(self, featureID: int) -> None: ...
    def getName(self) -> java.lang.String: ...
    def getRight(self) -> org.eclipse.xtext.xbase.XExpression: ...
    def getType(self) -> org.eclipse.xtext.common.types.JvmTypeReference: ...
    def isWriteable(self) -> bool: ...
    def setName(self, newName: java.lang.String) -> None: ...
    def setRight(self, newRight: org.eclipse.xtext.xbase.XExpression) -> None: ...
    def setType(self, newType: org.eclipse.xtext.common.types.JvmTypeReference) -> None: ...
    def setWriteable(self, newWriteable: bool) -> None: ...
    def toString(self) -> java.lang.String: ...

class ChangedEventTriggerImpl(EventTriggerImpl, org.openhab.core.model.rule.rules.ChangedEventTrigger):
    """
    Java class 'org.openhab.core.model.rule.rules.impl.ChangedEventTriggerImpl'
    
        Extends:
            org.openhab.core.model.rule.rules.impl.EventTriggerImpl
    
        Interfaces:
            org.openhab.core.model.rule.rules.ChangedEventTrigger
    
    """
    def basicSetNewState(self, newNewState: org.openhab.core.model.rule.rules.ValidState, msgs: org.eclipse.emf.common.notify.NotificationChain) -> org.eclipse.emf.common.notify.NotificationChain: ...
    def basicSetOldState(self, newOldState: org.openhab.core.model.rule.rules.ValidState, msgs: org.eclipse.emf.common.notify.NotificationChain) -> org.eclipse.emf.common.notify.NotificationChain: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> typing.Any: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, boolean: bool) -> typing.Any: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, boolean: bool, boolean2: bool) -> typing.Any: ...
    @typing.overload
    def eGet(self, featureID: int, resolve: bool, coreType: bool) -> typing.Any: ...
    @typing.overload
    def eInverseRemove(self, internalEObject: org.eclipse.emf.ecore.InternalEObject, int2: int, class_: typing.Type[typing.Any], notificationChain: org.eclipse.emf.common.notify.NotificationChain) -> org.eclipse.emf.common.notify.NotificationChain: ...
    @typing.overload
    def eInverseRemove(self, otherEnd: org.eclipse.emf.ecore.InternalEObject, featureID: int, msgs: org.eclipse.emf.common.notify.NotificationChain) -> org.eclipse.emf.common.notify.NotificationChain: ...
    @typing.overload
    def eIsSet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> bool: ...
    @typing.overload
    def eIsSet(self, featureID: int) -> bool: ...
    @typing.overload
    def eSet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, object: typing.Any) -> None: ...
    @typing.overload
    def eSet(self, featureID: int, newValue: typing.Any) -> None: ...
    @typing.overload
    def eUnset(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> None: ...
    @typing.overload
    def eUnset(self, featureID: int) -> None: ...
    def getItem(self) -> java.lang.String: ...
    def getNewState(self) -> org.openhab.core.model.rule.rules.ValidState: ...
    def getOldState(self) -> org.openhab.core.model.rule.rules.ValidState: ...
    def setItem(self, newItem: java.lang.String) -> None: ...
    def setNewState(self, newNewState: org.openhab.core.model.rule.rules.ValidState) -> None: ...
    def setOldState(self, newOldState: org.openhab.core.model.rule.rules.ValidState) -> None: ...
    def toString(self) -> java.lang.String: ...

class CommandEventTriggerImpl(EventTriggerImpl, org.openhab.core.model.rule.rules.CommandEventTrigger):
    """
    Java class 'org.openhab.core.model.rule.rules.impl.CommandEventTriggerImpl'
    
        Extends:
            org.openhab.core.model.rule.rules.impl.EventTriggerImpl
    
        Interfaces:
            org.openhab.core.model.rule.rules.CommandEventTrigger
    
    """
    def basicSetCommand(self, newCommand: org.openhab.core.model.rule.rules.ValidCommand, msgs: org.eclipse.emf.common.notify.NotificationChain) -> org.eclipse.emf.common.notify.NotificationChain: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> typing.Any: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, boolean: bool) -> typing.Any: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, boolean: bool, boolean2: bool) -> typing.Any: ...
    @typing.overload
    def eGet(self, featureID: int, resolve: bool, coreType: bool) -> typing.Any: ...
    @typing.overload
    def eInverseRemove(self, internalEObject: org.eclipse.emf.ecore.InternalEObject, int2: int, class_: typing.Type[typing.Any], notificationChain: org.eclipse.emf.common.notify.NotificationChain) -> org.eclipse.emf.common.notify.NotificationChain: ...
    @typing.overload
    def eInverseRemove(self, otherEnd: org.eclipse.emf.ecore.InternalEObject, featureID: int, msgs: org.eclipse.emf.common.notify.NotificationChain) -> org.eclipse.emf.common.notify.NotificationChain: ...
    @typing.overload
    def eIsSet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> bool: ...
    @typing.overload
    def eIsSet(self, featureID: int) -> bool: ...
    @typing.overload
    def eSet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, object: typing.Any) -> None: ...
    @typing.overload
    def eSet(self, featureID: int, newValue: typing.Any) -> None: ...
    @typing.overload
    def eUnset(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> None: ...
    @typing.overload
    def eUnset(self, featureID: int) -> None: ...
    def getCommand(self) -> org.openhab.core.model.rule.rules.ValidCommand: ...
    def getItem(self) -> java.lang.String: ...
    def setCommand(self, newCommand: org.openhab.core.model.rule.rules.ValidCommand) -> None: ...
    def setItem(self, newItem: java.lang.String) -> None: ...
    def toString(self) -> java.lang.String: ...

class EventEmittedTriggerImpl(EventTriggerImpl, org.openhab.core.model.rule.rules.EventEmittedTrigger):
    """
    Java class 'org.openhab.core.model.rule.rules.impl.EventEmittedTriggerImpl'
    
        Extends:
            org.openhab.core.model.rule.rules.impl.EventTriggerImpl
    
        Interfaces:
            org.openhab.core.model.rule.rules.EventEmittedTrigger
    
    """
    def basicSetTrigger(self, newTrigger: org.openhab.core.model.rule.rules.ValidTrigger, msgs: org.eclipse.emf.common.notify.NotificationChain) -> org.eclipse.emf.common.notify.NotificationChain: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> typing.Any: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, boolean: bool) -> typing.Any: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, boolean: bool, boolean2: bool) -> typing.Any: ...
    @typing.overload
    def eGet(self, featureID: int, resolve: bool, coreType: bool) -> typing.Any: ...
    @typing.overload
    def eInverseRemove(self, internalEObject: org.eclipse.emf.ecore.InternalEObject, int2: int, class_: typing.Type[typing.Any], notificationChain: org.eclipse.emf.common.notify.NotificationChain) -> org.eclipse.emf.common.notify.NotificationChain: ...
    @typing.overload
    def eInverseRemove(self, otherEnd: org.eclipse.emf.ecore.InternalEObject, featureID: int, msgs: org.eclipse.emf.common.notify.NotificationChain) -> org.eclipse.emf.common.notify.NotificationChain: ...
    @typing.overload
    def eIsSet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> bool: ...
    @typing.overload
    def eIsSet(self, featureID: int) -> bool: ...
    @typing.overload
    def eSet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, object: typing.Any) -> None: ...
    @typing.overload
    def eSet(self, featureID: int, newValue: typing.Any) -> None: ...
    @typing.overload
    def eUnset(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> None: ...
    @typing.overload
    def eUnset(self, featureID: int) -> None: ...
    def getChannel(self) -> java.lang.String: ...
    def getTrigger(self) -> org.openhab.core.model.rule.rules.ValidTrigger: ...
    def setChannel(self, newChannel: java.lang.String) -> None: ...
    def setTrigger(self, newTrigger: org.openhab.core.model.rule.rules.ValidTrigger) -> None: ...
    def toString(self) -> java.lang.String: ...

class GroupMemberChangedEventTriggerImpl(EventTriggerImpl, org.openhab.core.model.rule.rules.GroupMemberChangedEventTrigger):
    """
    Java class 'org.openhab.core.model.rule.rules.impl.GroupMemberChangedEventTriggerImpl'
    
        Extends:
            org.openhab.core.model.rule.rules.impl.EventTriggerImpl
    
        Interfaces:
            org.openhab.core.model.rule.rules.GroupMemberChangedEventTrigg
            er
    
    """
    def basicSetNewState(self, newNewState: org.openhab.core.model.rule.rules.ValidState, msgs: org.eclipse.emf.common.notify.NotificationChain) -> org.eclipse.emf.common.notify.NotificationChain: ...
    def basicSetOldState(self, newOldState: org.openhab.core.model.rule.rules.ValidState, msgs: org.eclipse.emf.common.notify.NotificationChain) -> org.eclipse.emf.common.notify.NotificationChain: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> typing.Any: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, boolean: bool) -> typing.Any: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, boolean: bool, boolean2: bool) -> typing.Any: ...
    @typing.overload
    def eGet(self, featureID: int, resolve: bool, coreType: bool) -> typing.Any: ...
    @typing.overload
    def eInverseRemove(self, internalEObject: org.eclipse.emf.ecore.InternalEObject, int2: int, class_: typing.Type[typing.Any], notificationChain: org.eclipse.emf.common.notify.NotificationChain) -> org.eclipse.emf.common.notify.NotificationChain: ...
    @typing.overload
    def eInverseRemove(self, otherEnd: org.eclipse.emf.ecore.InternalEObject, featureID: int, msgs: org.eclipse.emf.common.notify.NotificationChain) -> org.eclipse.emf.common.notify.NotificationChain: ...
    @typing.overload
    def eIsSet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> bool: ...
    @typing.overload
    def eIsSet(self, featureID: int) -> bool: ...
    @typing.overload
    def eSet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, object: typing.Any) -> None: ...
    @typing.overload
    def eSet(self, featureID: int, newValue: typing.Any) -> None: ...
    @typing.overload
    def eUnset(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> None: ...
    @typing.overload
    def eUnset(self, featureID: int) -> None: ...
    def getGroup(self) -> java.lang.String: ...
    def getNewState(self) -> org.openhab.core.model.rule.rules.ValidState: ...
    def getOldState(self) -> org.openhab.core.model.rule.rules.ValidState: ...
    def setGroup(self, newGroup: java.lang.String) -> None: ...
    def setNewState(self, newNewState: org.openhab.core.model.rule.rules.ValidState) -> None: ...
    def setOldState(self, newOldState: org.openhab.core.model.rule.rules.ValidState) -> None: ...
    def toString(self) -> java.lang.String: ...

class GroupMemberCommandEventTriggerImpl(EventTriggerImpl, org.openhab.core.model.rule.rules.GroupMemberCommandEventTrigger):
    """
    Java class 'org.openhab.core.model.rule.rules.impl.GroupMemberCommandEventTriggerImpl'
    
        Extends:
            org.openhab.core.model.rule.rules.impl.EventTriggerImpl
    
        Interfaces:
            org.openhab.core.model.rule.rules.GroupMemberCommandEventTrigg
            er
    
    """
    def basicSetCommand(self, newCommand: org.openhab.core.model.rule.rules.ValidCommand, msgs: org.eclipse.emf.common.notify.NotificationChain) -> org.eclipse.emf.common.notify.NotificationChain: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> typing.Any: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, boolean: bool) -> typing.Any: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, boolean: bool, boolean2: bool) -> typing.Any: ...
    @typing.overload
    def eGet(self, featureID: int, resolve: bool, coreType: bool) -> typing.Any: ...
    @typing.overload
    def eInverseRemove(self, internalEObject: org.eclipse.emf.ecore.InternalEObject, int2: int, class_: typing.Type[typing.Any], notificationChain: org.eclipse.emf.common.notify.NotificationChain) -> org.eclipse.emf.common.notify.NotificationChain: ...
    @typing.overload
    def eInverseRemove(self, otherEnd: org.eclipse.emf.ecore.InternalEObject, featureID: int, msgs: org.eclipse.emf.common.notify.NotificationChain) -> org.eclipse.emf.common.notify.NotificationChain: ...
    @typing.overload
    def eIsSet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> bool: ...
    @typing.overload
    def eIsSet(self, featureID: int) -> bool: ...
    @typing.overload
    def eSet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, object: typing.Any) -> None: ...
    @typing.overload
    def eSet(self, featureID: int, newValue: typing.Any) -> None: ...
    @typing.overload
    def eUnset(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> None: ...
    @typing.overload
    def eUnset(self, featureID: int) -> None: ...
    def getCommand(self) -> org.openhab.core.model.rule.rules.ValidCommand: ...
    def getGroup(self) -> java.lang.String: ...
    def setCommand(self, newCommand: org.openhab.core.model.rule.rules.ValidCommand) -> None: ...
    def setGroup(self, newGroup: java.lang.String) -> None: ...
    def toString(self) -> java.lang.String: ...

class GroupMemberUpdateEventTriggerImpl(EventTriggerImpl, org.openhab.core.model.rule.rules.GroupMemberUpdateEventTrigger):
    """
    Java class 'org.openhab.core.model.rule.rules.impl.GroupMemberUpdateEventTriggerImpl'
    
        Extends:
            org.openhab.core.model.rule.rules.impl.EventTriggerImpl
    
        Interfaces:
            org.openhab.core.model.rule.rules.GroupMemberUpdateEventTrigge
            r
    
    """
    def basicSetState(self, newState: org.openhab.core.model.rule.rules.ValidState, msgs: org.eclipse.emf.common.notify.NotificationChain) -> org.eclipse.emf.common.notify.NotificationChain: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> typing.Any: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, boolean: bool) -> typing.Any: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, boolean: bool, boolean2: bool) -> typing.Any: ...
    @typing.overload
    def eGet(self, featureID: int, resolve: bool, coreType: bool) -> typing.Any: ...
    @typing.overload
    def eInverseRemove(self, internalEObject: org.eclipse.emf.ecore.InternalEObject, int2: int, class_: typing.Type[typing.Any], notificationChain: org.eclipse.emf.common.notify.NotificationChain) -> org.eclipse.emf.common.notify.NotificationChain: ...
    @typing.overload
    def eInverseRemove(self, otherEnd: org.eclipse.emf.ecore.InternalEObject, featureID: int, msgs: org.eclipse.emf.common.notify.NotificationChain) -> org.eclipse.emf.common.notify.NotificationChain: ...
    @typing.overload
    def eIsSet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> bool: ...
    @typing.overload
    def eIsSet(self, featureID: int) -> bool: ...
    @typing.overload
    def eSet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, object: typing.Any) -> None: ...
    @typing.overload
    def eSet(self, featureID: int, newValue: typing.Any) -> None: ...
    @typing.overload
    def eUnset(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> None: ...
    @typing.overload
    def eUnset(self, featureID: int) -> None: ...
    def getGroup(self) -> java.lang.String: ...
    def getState(self) -> org.openhab.core.model.rule.rules.ValidState: ...
    def setGroup(self, newGroup: java.lang.String) -> None: ...
    def setState(self, newState: org.openhab.core.model.rule.rules.ValidState) -> None: ...
    def toString(self) -> java.lang.String: ...

class SystemTriggerImpl(EventTriggerImpl, org.openhab.core.model.rule.rules.SystemTrigger):
    """
    Java class 'org.openhab.core.model.rule.rules.impl.SystemTriggerImpl'
    
        Extends:
            org.openhab.core.model.rule.rules.impl.EventTriggerImpl
    
        Interfaces:
            org.openhab.core.model.rule.rules.SystemTrigger
    
    """

class ThingStateChangedEventTriggerImpl(EventTriggerImpl, org.openhab.core.model.rule.rules.ThingStateChangedEventTrigger):
    """
    Java class 'org.openhab.core.model.rule.rules.impl.ThingStateChangedEventTriggerImpl'
    
        Extends:
            org.openhab.core.model.rule.rules.impl.EventTriggerImpl
    
        Interfaces:
            org.openhab.core.model.rule.rules.ThingStateChangedEventTrigge
            r
    
    """
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> typing.Any: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, boolean: bool) -> typing.Any: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, boolean: bool, boolean2: bool) -> typing.Any: ...
    @typing.overload
    def eGet(self, featureID: int, resolve: bool, coreType: bool) -> typing.Any: ...
    @typing.overload
    def eIsSet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> bool: ...
    @typing.overload
    def eIsSet(self, featureID: int) -> bool: ...
    @typing.overload
    def eSet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, object: typing.Any) -> None: ...
    @typing.overload
    def eSet(self, featureID: int, newValue: typing.Any) -> None: ...
    @typing.overload
    def eUnset(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> None: ...
    @typing.overload
    def eUnset(self, featureID: int) -> None: ...
    def getNewState(self) -> java.lang.String: ...
    def getOldState(self) -> java.lang.String: ...
    def getThing(self) -> java.lang.String: ...
    def setNewState(self, newNewState: java.lang.String) -> None: ...
    def setOldState(self, newOldState: java.lang.String) -> None: ...
    def setThing(self, newThing: java.lang.String) -> None: ...
    def toString(self) -> java.lang.String: ...

class ThingStateUpdateEventTriggerImpl(EventTriggerImpl, org.openhab.core.model.rule.rules.ThingStateUpdateEventTrigger):
    """
    Java class 'org.openhab.core.model.rule.rules.impl.ThingStateUpdateEventTriggerImpl'
    
        Extends:
            org.openhab.core.model.rule.rules.impl.EventTriggerImpl
    
        Interfaces:
            org.openhab.core.model.rule.rules.ThingStateUpdateEventTrigger
    
    """
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> typing.Any: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, boolean: bool) -> typing.Any: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, boolean: bool, boolean2: bool) -> typing.Any: ...
    @typing.overload
    def eGet(self, featureID: int, resolve: bool, coreType: bool) -> typing.Any: ...
    @typing.overload
    def eIsSet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> bool: ...
    @typing.overload
    def eIsSet(self, featureID: int) -> bool: ...
    @typing.overload
    def eSet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, object: typing.Any) -> None: ...
    @typing.overload
    def eSet(self, featureID: int, newValue: typing.Any) -> None: ...
    @typing.overload
    def eUnset(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> None: ...
    @typing.overload
    def eUnset(self, featureID: int) -> None: ...
    def getState(self) -> java.lang.String: ...
    def getThing(self) -> java.lang.String: ...
    def setState(self, newState: java.lang.String) -> None: ...
    def setThing(self, newThing: java.lang.String) -> None: ...
    def toString(self) -> java.lang.String: ...

class TimerTriggerImpl(EventTriggerImpl, org.openhab.core.model.rule.rules.TimerTrigger):
    """
    Java class 'org.openhab.core.model.rule.rules.impl.TimerTriggerImpl'
    
        Extends:
            org.openhab.core.model.rule.rules.impl.EventTriggerImpl
    
        Interfaces:
            org.openhab.core.model.rule.rules.TimerTrigger
    
    """
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> typing.Any: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, boolean: bool) -> typing.Any: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, boolean: bool, boolean2: bool) -> typing.Any: ...
    @typing.overload
    def eGet(self, featureID: int, resolve: bool, coreType: bool) -> typing.Any: ...
    @typing.overload
    def eIsSet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> bool: ...
    @typing.overload
    def eIsSet(self, featureID: int) -> bool: ...
    @typing.overload
    def eSet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, object: typing.Any) -> None: ...
    @typing.overload
    def eSet(self, featureID: int, newValue: typing.Any) -> None: ...
    @typing.overload
    def eUnset(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> None: ...
    @typing.overload
    def eUnset(self, featureID: int) -> None: ...
    def getCron(self) -> java.lang.String: ...
    def getTime(self) -> java.lang.String: ...
    def setCron(self, newCron: java.lang.String) -> None: ...
    def setTime(self, newTime: java.lang.String) -> None: ...
    def toString(self) -> java.lang.String: ...

class UpdateEventTriggerImpl(EventTriggerImpl, org.openhab.core.model.rule.rules.UpdateEventTrigger):
    """
    Java class 'org.openhab.core.model.rule.rules.impl.UpdateEventTriggerImpl'
    
        Extends:
            org.openhab.core.model.rule.rules.impl.EventTriggerImpl
    
        Interfaces:
            org.openhab.core.model.rule.rules.UpdateEventTrigger
    
    """
    def basicSetState(self, newState: org.openhab.core.model.rule.rules.ValidState, msgs: org.eclipse.emf.common.notify.NotificationChain) -> org.eclipse.emf.common.notify.NotificationChain: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> typing.Any: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, boolean: bool) -> typing.Any: ...
    @typing.overload
    def eGet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, boolean: bool, boolean2: bool) -> typing.Any: ...
    @typing.overload
    def eGet(self, featureID: int, resolve: bool, coreType: bool) -> typing.Any: ...
    @typing.overload
    def eInverseRemove(self, internalEObject: org.eclipse.emf.ecore.InternalEObject, int2: int, class_: typing.Type[typing.Any], notificationChain: org.eclipse.emf.common.notify.NotificationChain) -> org.eclipse.emf.common.notify.NotificationChain: ...
    @typing.overload
    def eInverseRemove(self, otherEnd: org.eclipse.emf.ecore.InternalEObject, featureID: int, msgs: org.eclipse.emf.common.notify.NotificationChain) -> org.eclipse.emf.common.notify.NotificationChain: ...
    @typing.overload
    def eIsSet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> bool: ...
    @typing.overload
    def eIsSet(self, featureID: int) -> bool: ...
    @typing.overload
    def eSet(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature, object: typing.Any) -> None: ...
    @typing.overload
    def eSet(self, featureID: int, newValue: typing.Any) -> None: ...
    @typing.overload
    def eUnset(self, eStructuralFeature: org.eclipse.emf.ecore.EStructuralFeature) -> None: ...
    @typing.overload
    def eUnset(self, featureID: int) -> None: ...
    def getItem(self) -> java.lang.String: ...
    def getState(self) -> org.openhab.core.model.rule.rules.ValidState: ...
    def setItem(self, newItem: java.lang.String) -> None: ...
    def setState(self, newState: org.openhab.core.model.rule.rules.ValidState) -> None: ...
    def toString(self) -> java.lang.String: ...

class ValidCommandIdImpl(ValidCommandImpl, org.openhab.core.model.rule.rules.ValidCommandId):
    """
    Java class 'org.openhab.core.model.rule.rules.impl.ValidCommandIdImpl'
    
        Extends:
            org.openhab.core.model.rule.rules.impl.ValidCommandImpl
    
        Interfaces:
            org.openhab.core.model.rule.rules.ValidCommandId
    
    """

class ValidCommandNumberImpl(ValidCommandImpl, org.openhab.core.model.rule.rules.ValidCommandNumber):
    """
    Java class 'org.openhab.core.model.rule.rules.impl.ValidCommandNumberImpl'
    
        Extends:
            org.openhab.core.model.rule.rules.impl.ValidCommandImpl
    
        Interfaces:
            org.openhab.core.model.rule.rules.ValidCommandNumber
    
    """

class ValidCommandStringImpl(ValidCommandImpl, org.openhab.core.model.rule.rules.ValidCommandString):
    """
    Java class 'org.openhab.core.model.rule.rules.impl.ValidCommandStringImpl'
    
        Extends:
            org.openhab.core.model.rule.rules.impl.ValidCommandImpl
    
        Interfaces:
            org.openhab.core.model.rule.rules.ValidCommandString
    
    """

class ValidStateIdImpl(ValidStateImpl, org.openhab.core.model.rule.rules.ValidStateId):
    """
    Java class 'org.openhab.core.model.rule.rules.impl.ValidStateIdImpl'
    
        Extends:
            org.openhab.core.model.rule.rules.impl.ValidStateImpl
    
        Interfaces:
            org.openhab.core.model.rule.rules.ValidStateId
    
    """

class ValidStateNumberImpl(ValidStateImpl, org.openhab.core.model.rule.rules.ValidStateNumber):
    """
    Java class 'org.openhab.core.model.rule.rules.impl.ValidStateNumberImpl'
    
        Extends:
            org.openhab.core.model.rule.rules.impl.ValidStateImpl
    
        Interfaces:
            org.openhab.core.model.rule.rules.ValidStateNumber
    
    """

class ValidStateStringImpl(ValidStateImpl, org.openhab.core.model.rule.rules.ValidStateString):
    """
    Java class 'org.openhab.core.model.rule.rules.impl.ValidStateStringImpl'
    
        Extends:
            org.openhab.core.model.rule.rules.impl.ValidStateImpl
    
        Interfaces:
            org.openhab.core.model.rule.rules.ValidStateString
    
    """

class ValidTriggerIdImpl(ValidTriggerImpl, org.openhab.core.model.rule.rules.ValidTriggerId):
    """
    Java class 'org.openhab.core.model.rule.rules.impl.ValidTriggerIdImpl'
    
        Extends:
            org.openhab.core.model.rule.rules.impl.ValidTriggerImpl
    
        Interfaces:
            org.openhab.core.model.rule.rules.ValidTriggerId
    
    """

class ValidTriggerNumberImpl(ValidTriggerImpl, org.openhab.core.model.rule.rules.ValidTriggerNumber):
    """
    Java class 'org.openhab.core.model.rule.rules.impl.ValidTriggerNumberImpl'
    
        Extends:
            org.openhab.core.model.rule.rules.impl.ValidTriggerImpl
    
        Interfaces:
            org.openhab.core.model.rule.rules.ValidTriggerNumber
    
    """

class ValidTriggerStringImpl(ValidTriggerImpl, org.openhab.core.model.rule.rules.ValidTriggerString):
    """
    Java class 'org.openhab.core.model.rule.rules.impl.ValidTriggerStringImpl'
    
        Extends:
            org.openhab.core.model.rule.rules.impl.ValidTriggerImpl
    
        Interfaces:
            org.openhab.core.model.rule.rules.ValidTriggerString
    
    """

class SystemOnShutdownTriggerImpl(SystemTriggerImpl, org.openhab.core.model.rule.rules.SystemOnShutdownTrigger):
    """
    Java class 'org.openhab.core.model.rule.rules.impl.SystemOnShutdownTriggerImpl'
    
        Extends:
            org.openhab.core.model.rule.rules.impl.SystemTriggerImpl
    
        Interfaces:
            org.openhab.core.model.rule.rules.SystemOnShutdownTrigger
    
    """

class SystemOnStartupTriggerImpl(SystemTriggerImpl, org.openhab.core.model.rule.rules.SystemOnStartupTrigger):
    """
    Java class 'org.openhab.core.model.rule.rules.impl.SystemOnStartupTriggerImpl'
    
        Extends:
            org.openhab.core.model.rule.rules.impl.SystemTriggerImpl
    
        Interfaces:
            org.openhab.core.model.rule.rules.SystemOnStartupTrigger
    
    """
