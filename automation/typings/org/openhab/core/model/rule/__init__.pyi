import com.google.inject
import java.lang
import org.eclipse.xtext
import org.eclipse.xtext.common.types.util
import org.eclipse.xtext.common.types.xtext
import org.eclipse.xtext.generator
import org.eclipse.xtext.naming
import org.eclipse.xtext.parser
import org.eclipse.xtext.parser.antlr
import org.eclipse.xtext.resource
import org.eclipse.xtext.scoping
import org.eclipse.xtext.serializer
import org.eclipse.xtext.serializer.sequencer
import org.eclipse.xtext.validation
import org.eclipse.xtext.xbase
import org.eclipse.xtext.xbase.interpreter
import org.eclipse.xtext.xbase.jvmmodel
import org.eclipse.xtext.xbase.scoping.batch
import org.eclipse.xtext.xbase.typesystem.computation
import org.eclipse.xtext.xbase.typesystem.internal
import org.eclipse.xtext.xbase.validation
import org.openhab.core.model.rule.parser.antlr.internal
import org.openhab.core.model.rule.validation
import org.openhab.core.model.script
import org.openhab.core.model.script.engine
import org.openhab.core.model.script.scoping
import typing


class AbstractRulesRuntimeModule(org.eclipse.xtext.xbase.DefaultXbaseRuntimeModule):
    """
    Java class 'org.openhab.core.model.rule.AbstractRulesRuntimeModule'
    
        Extends:
            org.eclipse.xtext.xbase.DefaultXbaseRuntimeModule
    
      Constructors:
        * AbstractRulesRuntimeModule()
    
    """
    def __init__(self): ...
    def bindClassLoaderToInstance(self) -> java.lang.ClassLoader: ...
    def bindDefaultBatchTypeResolver(self) -> typing.Type[org.eclipse.xtext.xbase.typesystem.internal.DefaultBatchTypeResolver]: ...
    def bindDefaultReentrantTypeResolver(self) -> typing.Type[org.eclipse.xtext.xbase.typesystem.internal.DefaultReentrantTypeResolver]: ...
    def bindFeatureNameValidator(self) -> typing.Type[org.eclipse.xtext.xbase.validation.FeatureNameValidator]: ...
    def bindIAntlrTokenFileProvider(self) -> typing.Type[org.eclipse.xtext.parser.antlr.IAntlrTokenFileProvider]: ...
    def bindIBatchScopeProvider(self) -> typing.Type[org.eclipse.xtext.xbase.scoping.batch.IBatchScopeProvider]: ...
    def bindIGlobalScopeProvider(self) -> typing.Type[org.eclipse.xtext.scoping.IGlobalScopeProvider]: ...
    def bindIGrammarAccess(self) -> typing.Type[org.eclipse.xtext.IGrammarAccess]: ...
    def bindIJvmModelInferrer(self) -> typing.Type[org.eclipse.xtext.xbase.jvmmodel.IJvmModelInferrer]: ...
    def bindILocationInFileProvider(self) -> typing.Type[org.eclipse.xtext.resource.ILocationInFileProvider]: ...
    def bindIParser(self) -> typing.Type[org.eclipse.xtext.parser.IParser]: ...
    def bindIQualifiedNameProvider(self) -> typing.Type[org.eclipse.xtext.naming.IQualifiedNameProvider]: ...
    def bindIResourceValidator(self) -> typing.Type[org.eclipse.xtext.validation.IResourceValidator]: ...
    def bindISemanticSequencer(self) -> typing.Type[org.eclipse.xtext.serializer.sequencer.ISemanticSequencer]: ...
    def bindISerializer(self) -> typing.Type[org.eclipse.xtext.serializer.ISerializer]: ...
    def bindISyntacticSequencer(self) -> typing.Type[org.eclipse.xtext.serializer.sequencer.ISyntacticSequencer]: ...
    def bindITokenDefProvider(self) -> typing.Type[org.eclipse.xtext.parser.antlr.ITokenDefProvider]: ...
    def bindITokenToStringConverter(self) -> typing.Type[org.eclipse.xtext.parser.ITokenToStringConverter]: ...
    def bindLexer(self) -> typing.Type[org.eclipse.xtext.parser.antlr.Lexer]: ...
    def bindRulesValidator(self) -> typing.Type[org.openhab.core.model.rule.validation.RulesValidator]: ...
    def configure(self, binder: com.google.inject.Binder) -> None: ...
    def configureFileExtensions(self, binder: com.google.inject.Binder) -> None: ...
    def configureIResourceDescriptions(self, binder: com.google.inject.Binder) -> None: ...
    def configureIResourceDescriptionsPersisted(self, binder: com.google.inject.Binder) -> None: ...
    def configureIScopeProviderDelegate(self, binder: com.google.inject.Binder) -> None: ...
    def configureIgnoreCaseLinking(self, binder: com.google.inject.Binder) -> None: ...
    def configureLanguageName(self, binder: com.google.inject.Binder) -> None: ...
    def configureRuntimeLexer(self, binder: com.google.inject.Binder) -> None: ...
    def provideInternalRulesLexer(self) -> com.google.inject.Provider[org.openhab.core.model.rule.parser.antlr.internal.InternalRulesLexer]: ...

class RulesStandaloneSetupGenerated(org.eclipse.xtext.ISetup):
    """
    Java class 'org.openhab.core.model.rule.RulesStandaloneSetupGenerated'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            org.eclipse.xtext.ISetup
    
      Constructors:
        * RulesStandaloneSetupGenerated()
    
    """
    def __init__(self): ...
    def createInjector(self) -> com.google.inject.Injector: ...
    def createInjectorAndDoEMFRegistration(self) -> com.google.inject.Injector: ...
    def register(self, injector: com.google.inject.Injector) -> None: ...

class RulesRuntimeModule(AbstractRulesRuntimeModule):
    """
    Java class 'org.openhab.core.model.rule.RulesRuntimeModule'
    
        Extends:
            org.openhab.core.model.rule.AbstractRulesRuntimeModule
    
      Constructors:
        * RulesRuntimeModule()
    
    """
    def __init__(self): ...
    def bindAbstractTypeScopeProvider(self) -> typing.Type[org.eclipse.xtext.common.types.xtext.AbstractTypeScopeProvider]: ...
    def bindClassLoaderToInstance(self) -> java.lang.ClassLoader: ...
    def bindIExpressionInterpreter(self) -> typing.Type[org.eclipse.xtext.xbase.interpreter.IExpressionInterpreter]: ...
    def bindIGenerator(self) -> typing.Type[org.eclipse.xtext.generator.IGenerator]: ...
    def bindITypeComputer(self) -> typing.Type[org.eclipse.xtext.xbase.typesystem.computation.ITypeComputer]: ...
    def bindImplicitlyImportedTypes(self) -> typing.Type[org.eclipse.xtext.xbase.scoping.batch.ImplicitlyImportedFeatures]: ...
    def bindJavaReflectAccess(self) -> typing.Type[org.eclipse.xtext.common.types.util.JavaReflectAccess]: ...
    def bindStateAndCommandProvider(self) -> typing.Type[org.openhab.core.model.script.scoping.StateAndCommandProvider]: ...
    def configureIScopeProviderDelegate(self, binder: com.google.inject.Binder) -> None: ...
    def configureUseIndexFragmentsForLazyLinking(self, binder: com.google.inject.Binder) -> None: ...

class RulesStandaloneSetup(RulesStandaloneSetupGenerated):
    """
    Java class 'org.openhab.core.model.rule.RulesStandaloneSetup'
    
        Extends:
            org.openhab.core.model.rule.RulesStandaloneSetupGenerated
    
      Constructors:
        * RulesStandaloneSetup()
    
    """
    def __init__(self): ...
    def createInjector(self) -> com.google.inject.Injector: ...
    def createInjectorAndDoEMFRegistration(self) -> com.google.inject.Injector: ...
    @classmethod
    def doSetup(cls, scriptServiceUtil: org.openhab.core.model.script.ScriptServiceUtil, scriptEngine: org.openhab.core.model.script.engine.ScriptEngine) -> None: ...
    @classmethod
    def getInjector(cls) -> com.google.inject.Injector: ...
    def getScriptEngine(self) -> org.openhab.core.model.script.engine.ScriptEngine: ...
    def getScriptServiceUtil(self) -> org.openhab.core.model.script.ScriptServiceUtil: ...
    def setScriptEngine(self, scriptEngine: org.openhab.core.model.script.engine.ScriptEngine) -> 'RulesStandaloneSetup': ...
    def setScriptServiceUtil(self, scriptServiceUtil: org.openhab.core.model.script.ScriptServiceUtil) -> 'RulesStandaloneSetup': ...
    @classmethod
    def unregister(cls) -> com.google.inject.Injector: ...
