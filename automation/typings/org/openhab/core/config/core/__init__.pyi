import com.google.gson
import java.lang
import java.lang.annotation
import java.lang.reflect
import java.math
import java.net
import java.util
import java.util.function
import org
import org.openhab.core.common.registry
import typing


class ConfigDescription(org.openhab.core.common.registry.Identifiable[java.net.URI]):
    """
    Java class 'org.openhab.core.config.core.ConfigDescription'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            org.openhab.core.common.registry.Identifiable
    
    """
    def getParameterGroups(self) -> java.util.List['ConfigDescriptionParameterGroup']: ...
    def getParameters(self) -> java.util.List['ConfigDescriptionParameter']: ...
    @typing.overload
    def getUID(self) -> typing.Any: ...
    @typing.overload
    def getUID(self) -> java.net.URI: ...
    def toParametersMap(self) -> java.util.Map[java.lang.String, 'ConfigDescriptionParameter']: ...
    def toString(self) -> java.lang.String: ...

class ConfigDescriptionAliasProvider(java.lang.Object):
    """
    @NonNullByDefault public interface ConfigDescriptionAliasProvider
    
        Can be implemented to point one config description URI to another.
    
    
    """
    def getAlias(self, configDescriptionURI: java.net.URI) -> java.net.URI: ...

class ConfigDescriptionBuilder(java.lang.Object):
    """
    Java class 'org.openhab.core.config.core.ConfigDescriptionBuilder'
    
        Extends:
            java.lang.Object
    
    """
    def build(self) -> ConfigDescription: ...
    @classmethod
    def create(cls, uri: java.net.URI) -> 'ConfigDescriptionBuilder': ...
    def withParameter(self, parameter: 'ConfigDescriptionParameter') -> 'ConfigDescriptionBuilder': ...
    def withParameterGroup(self, parameterGroup: 'ConfigDescriptionParameterGroup') -> 'ConfigDescriptionBuilder': ...
    def withParameterGroups(self, parameterGroups: java.util.List['ConfigDescriptionParameterGroup']) -> 'ConfigDescriptionBuilder': ...
    def withParameters(self, parameters: java.util.List['ConfigDescriptionParameter']) -> 'ConfigDescriptionBuilder': ...

class ConfigDescriptionParameter(java.lang.Object):
    """
    Java class 'org.openhab.core.config.core.ConfigDescriptionParameter'
    
        Extends:
            java.lang.Object
    
      Constructors:
        * ConfigDescriptionParameter()
    
    """
    def __init__(self): ...
    def getContext(self) -> java.lang.String: ...
    def getDefault(self) -> java.lang.String: ...
    def getDescription(self) -> java.lang.String: ...
    def getFilterCriteria(self) -> java.util.List['FilterCriteria']: ...
    def getGroupName(self) -> java.lang.String: ...
    def getLabel(self) -> java.lang.String: ...
    def getLimitToOptions(self) -> bool: ...
    def getMaximum(self) -> java.math.BigDecimal: ...
    def getMinimum(self) -> java.math.BigDecimal: ...
    def getMultipleLimit(self) -> int: ...
    def getName(self) -> java.lang.String: ...
    def getOptions(self) -> java.util.List['ParameterOption']: ...
    def getPattern(self) -> java.lang.String: ...
    def getStepSize(self) -> java.math.BigDecimal: ...
    def getType(self) -> 'ConfigDescriptionParameter.Type': ...
    def getUnit(self) -> java.lang.String: ...
    def getUnitLabel(self) -> java.lang.String: ...
    def isAdvanced(self) -> bool: ...
    def isMultiple(self) -> bool: ...
    def isReadOnly(self) -> bool: ...
    def isRequired(self) -> bool: ...
    def isVerifyable(self) -> bool: ...
    def toString(self) -> java.lang.String: ...
    class Type(java.lang.Enum[org.openhab.core.config.core.ConfigDescriptionParameter.Type]):
        """
        Java class 'org.openhab.core.config.core.ConfigDescriptionParameter$Type'
        
            Extends:
                java.lang.Enum
        
          Attributes:
            TEXT (org.openhab.core.config.core.ConfigDescriptionParameter$Type): final static enum constant
            INTEGER (org.openhab.core.config.core.ConfigDescriptionParameter$Type): final static enum constant
            DECIMAL (org.openhab.core.config.core.ConfigDescriptionParameter$Type): final static enum constant
            BOOLEAN (org.openhab.core.config.core.ConfigDescriptionParameter$Type): final static enum constant
        
        """
        TEXT: typing.ClassVar['ConfigDescriptionParameter.Type'] = ...
        INTEGER: typing.ClassVar['ConfigDescriptionParameter.Type'] = ...
        DECIMAL: typing.ClassVar['ConfigDescriptionParameter.Type'] = ...
        BOOLEAN: typing.ClassVar['ConfigDescriptionParameter.Type'] = ...
        _valueOf_0__T = typing.TypeVar('_valueOf_0__T', bound=java.lang.Enum)  # <T>
        @classmethod
        @typing.overload
        def valueOf(cls, class_: typing.Type[_valueOf_0__T], string: java.lang.String) -> _valueOf_0__T: ...
        @classmethod
        @typing.overload
        def valueOf(cls, name: java.lang.String) -> 'ConfigDescriptionParameter.Type': ...
        @classmethod
        def values(cls) -> typing.List['ConfigDescriptionParameter.Type']: ...

class ConfigDescriptionParameterBuilder(java.lang.Object):
    """
    Java class 'org.openhab.core.config.core.ConfigDescriptionParameterBuilder'
    
        Extends:
            java.lang.Object
    
    """
    def build(self) -> ConfigDescriptionParameter: ...
    @classmethod
    def create(cls, name: java.lang.String, type: ConfigDescriptionParameter.Type) -> 'ConfigDescriptionParameterBuilder': ...
    def withAdvanced(self, advanced: bool) -> 'ConfigDescriptionParameterBuilder': ...
    def withContext(self, context: java.lang.String) -> 'ConfigDescriptionParameterBuilder': ...
    def withDefault(self, defaultValue: java.lang.String) -> 'ConfigDescriptionParameterBuilder': ...
    def withDescription(self, description: java.lang.String) -> 'ConfigDescriptionParameterBuilder': ...
    def withFilterCriteria(self, filterCriteria: java.util.List['FilterCriteria']) -> 'ConfigDescriptionParameterBuilder': ...
    def withGroupName(self, groupName: java.lang.String) -> 'ConfigDescriptionParameterBuilder': ...
    def withLabel(self, label: java.lang.String) -> 'ConfigDescriptionParameterBuilder': ...
    def withLimitToOptions(self, limitToOptions: bool) -> 'ConfigDescriptionParameterBuilder': ...
    def withMaximum(self, max: java.math.BigDecimal) -> 'ConfigDescriptionParameterBuilder': ...
    def withMinimum(self, min: java.math.BigDecimal) -> 'ConfigDescriptionParameterBuilder': ...
    def withMultiple(self, multiple: bool) -> 'ConfigDescriptionParameterBuilder': ...
    def withMultipleLimit(self, multipleLimit: int) -> 'ConfigDescriptionParameterBuilder': ...
    def withOptions(self, options: java.util.List['ParameterOption']) -> 'ConfigDescriptionParameterBuilder': ...
    def withPattern(self, pattern: java.lang.String) -> 'ConfigDescriptionParameterBuilder': ...
    def withReadOnly(self, readOnly: bool) -> 'ConfigDescriptionParameterBuilder': ...
    def withRequired(self, required: bool) -> 'ConfigDescriptionParameterBuilder': ...
    def withStepSize(self, step: java.math.BigDecimal) -> 'ConfigDescriptionParameterBuilder': ...
    def withUnit(self, unit: java.lang.String) -> 'ConfigDescriptionParameterBuilder': ...
    def withUnitLabel(self, unitLabel: java.lang.String) -> 'ConfigDescriptionParameterBuilder': ...
    def withVerify(self, verify: bool) -> 'ConfigDescriptionParameterBuilder': ...

class ConfigDescriptionParameterGroup(java.lang.Object):
    """
    Java class 'org.openhab.core.config.core.ConfigDescriptionParameterGroup'
    
        Extends:
            java.lang.Object
    
    """
    def getContext(self) -> java.lang.String: ...
    def getDescription(self) -> java.lang.String: ...
    def getLabel(self) -> java.lang.String: ...
    def getName(self) -> java.lang.String: ...
    def isAdvanced(self) -> bool: ...
    def toString(self) -> java.lang.String: ...

class ConfigDescriptionParameterGroupBuilder(java.lang.Object):
    """
    Java class 'org.openhab.core.config.core.ConfigDescriptionParameterGroupBuilder'
    
        Extends:
            java.lang.Object
    
    """
    def build(self) -> ConfigDescriptionParameterGroup: ...
    @classmethod
    def create(cls, name: java.lang.String) -> 'ConfigDescriptionParameterGroupBuilder': ...
    def withAdvanced(self, advanced: bool) -> 'ConfigDescriptionParameterGroupBuilder': ...
    def withContext(self, context: java.lang.String) -> 'ConfigDescriptionParameterGroupBuilder': ...
    def withDescription(self, description: java.lang.String) -> 'ConfigDescriptionParameterGroupBuilder': ...
    def withLabel(self, label: java.lang.String) -> 'ConfigDescriptionParameterGroupBuilder': ...

class ConfigDescriptionProvider(java.lang.Object):
    """
    @NonNullByDefault public interface ConfigDescriptionProvider
    
        The :class:`~org.openhab.core.config.core.ConfigDescriptionProvider` can be implemented and registered as an *OSGi*
        service to provide :class:`~org.openhab.core.config.core.ConfigDescription`s.
    
    
    """
    def getConfigDescription(self, uri: java.net.URI, locale: java.util.Locale) -> ConfigDescription: ...
    def getConfigDescriptions(self, locale: java.util.Locale) -> java.util.Collection[ConfigDescription]: ...

class ConfigDescriptionRegistry(java.lang.Object):
    """
    Java class 'org.openhab.core.config.core.ConfigDescriptionRegistry'
    
        Extends:
            java.lang.Object
    
      Constructors:
        * ConfigDescriptionRegistry()
    
    """
    def __init__(self): ...
    @typing.overload
    def getConfigDescription(self, uri: java.net.URI) -> ConfigDescription: ...
    @typing.overload
    def getConfigDescription(self, uri: java.net.URI, locale: java.util.Locale) -> ConfigDescription: ...
    @typing.overload
    def getConfigDescriptions(self) -> java.util.Collection[ConfigDescription]: ...
    @typing.overload
    def getConfigDescriptions(self, locale: java.util.Locale) -> java.util.Collection[ConfigDescription]: ...

class ConfigOptionProvider(java.lang.Object):
    """
    @NonNullByDefault public interface ConfigOptionProvider
    
        The :class:`~org.openhab.core.config.core.ConfigOptionProvider` can be implemented and registered as an *OSGi* service
        to provide :class:`~org.openhab.core.config.core.ConfigDescription`s options.
    
    
    """
    def getParameterOptions(self, uri: java.net.URI, param: java.lang.String, context: java.lang.String, locale: java.util.Locale) -> java.util.Collection['ParameterOption']: ...

class ConfigUtil(java.lang.Object):
    """
    Java class 'org.openhab.core.config.core.ConfigUtil'
    
        Extends:
            java.lang.Object
    
      Constructors:
        * ConfigUtil()
    
    """
    def __init__(self): ...
    @classmethod
    def applyDefaultConfiguration(cls, configuration: 'Configuration', configDescription: ConfigDescription) -> None: ...
    @classmethod
    def getDefaultValueAsCorrectType(cls, parameter: ConfigDescriptionParameter) -> typing.Any: ...
    @classmethod
    @typing.overload
    def normalizeType(cls, value: typing.Any) -> typing.Any: ...
    @classmethod
    @typing.overload
    def normalizeType(cls, value: typing.Any, configDescriptionParameter: ConfigDescriptionParameter) -> typing.Any: ...
    @classmethod
    @typing.overload
    def normalizeTypes(cls, configuration: typing.Union[java.util.Map[java.lang.String, typing.Any], typing.Mapping[java.lang.String, typing.Any]]) -> java.util.Map[java.lang.String, typing.Any]: ...
    @classmethod
    @typing.overload
    def normalizeTypes(cls, configuration: typing.Union[java.util.Map[java.lang.String, typing.Any], typing.Mapping[java.lang.String, typing.Any]], configDescriptions: java.util.List[ConfigDescription]) -> java.util.Map[java.lang.String, typing.Any]: ...

class ConfigurableService(java.lang.annotation.Annotation):
    """
    Java class 'org.openhab.core.config.core.ConfigurableService'
    
        Interfaces:
            java.lang.annotation.Annotation
    
      Attributes:
        PREFIX_ (java.lang.String): final static field
    
    """
    PREFIX_: typing.ClassVar[java.lang.String] = ...
    def category(self) -> java.lang.String: ...
    def description_uri(self) -> java.lang.String: ...
    def equals(self, object: typing.Any) -> bool: ...
    def factory(self) -> bool: ...
    def hashCode(self) -> int: ...
    def label(self) -> java.lang.String: ...
    def toString(self) -> java.lang.String: ...

class ConfigurableServiceUtil(java.lang.Object):
    """
    Java class 'org.openhab.core.config.core.ConfigurableServiceUtil'
    
        Extends:
            java.lang.Object
    
      Constructors:
        * ConfigurableServiceUtil()
    
      Attributes:
        CONFIGURABLE_SERVICE_FILTER (java.lang.String): final static field
        CONFIGURABLE_MULTI_CONFIG_SERVICE_FILTER (java.lang.String): final static field
    
    """
    CONFIGURABLE_SERVICE_FILTER: typing.ClassVar[java.lang.String] = ...
    CONFIGURABLE_MULTI_CONFIG_SERVICE_FILTER: typing.ClassVar[java.lang.String] = ...
    def __init__(self): ...
    @classmethod
    def asConfigurableService(cls, propertyResolver: typing.Union[java.util.function.Function[java.lang.String, typing.Any], typing.Callable[[java.lang.String], typing.Any]]) -> ConfigurableService: ...

class Configuration(java.lang.Object):
    """
    Java class 'org.openhab.core.config.core.Configuration'
    
        Extends:
            java.lang.Object
    
      Constructors:
        * Configuration(java.util.Map)
        * Configuration(org.openhab.core.config.core.Configuration)
        * Configuration()
    
    """
    @typing.overload
    def __init__(self): ...
    @typing.overload
    def __init__(self, properties: typing.Union[java.util.Map[java.lang.String, typing.Any], typing.Mapping[java.lang.String, typing.Any]]): ...
    @typing.overload
    def __init__(self, configuration: 'Configuration'): ...
    def containsKey(self, key: java.lang.String) -> bool: ...
    def equals(self, obj: typing.Any) -> bool: ...
    def get(self, key: java.lang.String) -> typing.Any: ...
    def getProperties(self) -> java.util.Map[java.lang.String, typing.Any]: ...
    def hashCode(self) -> int: ...
    def keySet(self) -> java.util.Set[java.lang.String]: ...
    def put(self, key: java.lang.String, value: typing.Any) -> typing.Any: ...
    def remove(self, key: java.lang.String) -> typing.Any: ...
    def setProperties(self, newProperties: typing.Union[java.util.Map[java.lang.String, typing.Any], typing.Mapping[java.lang.String, typing.Any]]) -> None: ...
    def toString(self) -> java.lang.String: ...
    def values(self) -> java.util.Collection[typing.Any]: ...

class ConfigurationDeserializer(com.google.gson.JsonDeserializer[Configuration]):
    """
    Java class 'org.openhab.core.config.core.ConfigurationDeserializer'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            com.google.gson.JsonDeserializer
    
      Constructors:
        * ConfigurationDeserializer()
    
    """
    def __init__(self): ...
    @typing.overload
    def deserialize(self, jsonElement: com.google.gson.JsonElement, type: java.lang.reflect.Type, jsonDeserializationContext: com.google.gson.JsonDeserializationContext) -> typing.Any: ...
    @typing.overload
    def deserialize(self, json: com.google.gson.JsonElement, typeOfT: java.lang.reflect.Type, context: com.google.gson.JsonDeserializationContext) -> Configuration: ...

class ConfigurationSerializer(com.google.gson.JsonSerializer[Configuration]):
    """
    Java class 'org.openhab.core.config.core.ConfigurationSerializer'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            com.google.gson.JsonSerializer
    
      Constructors:
        * ConfigurationSerializer()
    
    """
    def __init__(self): ...
    @typing.overload
    def serialize(self, object: typing.Any, type: java.lang.reflect.Type, jsonSerializationContext: com.google.gson.JsonSerializationContext) -> com.google.gson.JsonElement: ...
    @typing.overload
    def serialize(self, src: Configuration, typeOfSrc: java.lang.reflect.Type, context: com.google.gson.JsonSerializationContext) -> com.google.gson.JsonElement: ...

class FilterCriteria(java.lang.Object):
    """
    Java class 'org.openhab.core.config.core.FilterCriteria'
    
        Extends:
            java.lang.Object
    
      Constructors:
        * FilterCriteria(java.lang.String, java.lang.String)
    
    """
    def __init__(self, name: java.lang.String, value: java.lang.String): ...
    def getName(self) -> java.lang.String: ...
    def getValue(self) -> java.lang.String: ...
    def toString(self) -> java.lang.String: ...

class ParameterOption(java.lang.Object):
    """
    Java class 'org.openhab.core.config.core.ParameterOption'
    
        Extends:
            java.lang.Object
    
      Constructors:
        * ParameterOption(java.lang.String, java.lang.String)
    
    """
    def __init__(self, value: java.lang.String, label: java.lang.String): ...
    def equals(self, obj: typing.Any) -> bool: ...
    def getLabel(self) -> java.lang.String: ...
    def getValue(self) -> java.lang.String: ...
    def hashCode(self) -> int: ...
    def toString(self) -> java.lang.String: ...
