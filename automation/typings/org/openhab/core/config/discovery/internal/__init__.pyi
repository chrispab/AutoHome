import java.lang
import java.util
import java.util.stream
import org.openhab.core.common.registry
import org.openhab.core.config.core
import org.openhab.core.config.discovery
import org.openhab.core.config.discovery.inbox
import org.openhab.core.events
import org.openhab.core.storage
import org.openhab.core.thing
import org.openhab.core.thing.events
import org.openhab.core.thing.type
import typing


class AutomaticInboxProcessor(org.openhab.core.events.AbstractTypedEventSubscriber[org.openhab.core.thing.events.ThingStatusInfoChangedEvent], org.openhab.core.config.discovery.inbox.InboxListener, org.openhab.core.common.registry.RegistryChangeListener[org.openhab.core.thing.Thing]):
    """
    Java class 'org.openhab.core.config.discovery.internal.AutomaticInboxProcessor'
    
        Extends:
            org.openhab.core.events.AbstractTypedEventSubscriber
    
        Interfaces:
            org.openhab.core.config.discovery.inbox.InboxListener,
            org.openhab.core.common.registry.RegistryChangeListener
    
      Constructors:
        * AutomaticInboxProcessor(org.openhab.core.thing.type.ThingTypeRegistry, org.openhab.core.thing.ThingRegistry, org.openhab.core.config.discovery.inbox.Inbox)
    
      Attributes:
        AUTO_IGNORE_CONFIG_PROPERTY (java.lang.String): final static field
        ALWAYS_AUTO_APPROVE_CONFIG_PROPERTY (java.lang.String): final static field
    
    """
    AUTO_IGNORE_CONFIG_PROPERTY: typing.ClassVar[java.lang.String] = ...
    ALWAYS_AUTO_APPROVE_CONFIG_PROPERTY: typing.ClassVar[java.lang.String] = ...
    def __init__(self, thingTypeRegistry: org.openhab.core.thing.type.ThingTypeRegistry, thingRegistry: org.openhab.core.thing.ThingRegistry, inbox: org.openhab.core.config.discovery.inbox.Inbox): ...
    @typing.overload
    def added(self, object: typing.Any) -> None: ...
    @typing.overload
    def added(self, element: org.openhab.core.thing.Thing) -> None: ...
    @typing.overload
    def receiveTypedEvent(self, event: org.openhab.core.events.Event) -> None: ...
    @typing.overload
    def receiveTypedEvent(self, event: org.openhab.core.thing.events.ThingStatusInfoChangedEvent) -> None: ...
    @typing.overload
    def removed(self, object: typing.Any) -> None: ...
    @typing.overload
    def removed(self, element: org.openhab.core.thing.Thing) -> None: ...
    def thingAdded(self, inbox: org.openhab.core.config.discovery.inbox.Inbox, result: org.openhab.core.config.discovery.DiscoveryResult) -> None: ...
    def thingRemoved(self, inbox: org.openhab.core.config.discovery.inbox.Inbox, result: org.openhab.core.config.discovery.DiscoveryResult) -> None: ...
    def thingUpdated(self, inbox: org.openhab.core.config.discovery.inbox.Inbox, result: org.openhab.core.config.discovery.DiscoveryResult) -> None: ...
    @typing.overload
    def updated(self, object: typing.Any, object2: typing.Any) -> None: ...
    @typing.overload
    def updated(self, oldElement: org.openhab.core.thing.Thing, element: org.openhab.core.thing.Thing) -> None: ...

class DiscoveryResultImpl(org.openhab.core.config.discovery.DiscoveryResult):
    """
    Java class 'org.openhab.core.config.discovery.internal.DiscoveryResultImpl'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            org.openhab.core.config.discovery.DiscoveryResult
    
      Constructors:
        * DiscoveryResultImpl(org.openhab.core.thing.ThingTypeUID, org.openhab.core.thing.ThingUID, org.openhab.core.thing.ThingUID, java.util.Map, java.lang.String, java.lang.String, long)
    
      Raises:
        java.lang.IllegalArgumentException: from java
    
    """
    def __init__(self, thingTypeUID: org.openhab.core.thing.ThingTypeUID, thingUID: org.openhab.core.thing.ThingUID, bridgeUID: org.openhab.core.thing.ThingUID, properties: typing.Union[java.util.Map[java.lang.String, typing.Any], typing.Mapping[java.lang.String, typing.Any]], representationProperty: java.lang.String, label: java.lang.String, timeToLive: int): ...
    def equals(self, obj: typing.Any) -> bool: ...
    def getBindingId(self) -> java.lang.String: ...
    def getBridgeUID(self) -> org.openhab.core.thing.ThingUID: ...
    def getFlag(self) -> org.openhab.core.config.discovery.DiscoveryResultFlag: ...
    def getLabel(self) -> java.lang.String: ...
    def getProperties(self) -> java.util.Map[java.lang.String, typing.Any]: ...
    def getRepresentationProperty(self) -> java.lang.String: ...
    def getThingTypeUID(self) -> org.openhab.core.thing.ThingTypeUID: ...
    def getThingUID(self) -> org.openhab.core.thing.ThingUID: ...
    def getTimeToLive(self) -> int: ...
    def getTimestamp(self) -> int: ...
    def hashCode(self) -> int: ...
    def setFlag(self, flag: org.openhab.core.config.discovery.DiscoveryResultFlag) -> None: ...
    def synchronize(self, sourceResult: org.openhab.core.config.discovery.DiscoveryResult) -> None: ...
    def toString(self) -> java.lang.String: ...

class DiscoveryServiceRegistryImpl(org.openhab.core.config.discovery.DiscoveryServiceRegistry, org.openhab.core.config.discovery.DiscoveryListener):
    """
    Java class 'org.openhab.core.config.discovery.internal.DiscoveryServiceRegistryImpl'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            org.openhab.core.config.discovery.DiscoveryServiceRegistry,
            org.openhab.core.config.discovery.DiscoveryListener
    
      Constructors:
        * DiscoveryServiceRegistryImpl()
    
    """
    def __init__(self): ...
    @typing.overload
    def abortScan(self, bindingId: java.lang.String) -> bool: ...
    @typing.overload
    def abortScan(self, thingTypeUID: org.openhab.core.thing.ThingTypeUID) -> bool: ...
    def addDiscoveryListener(self, listener: org.openhab.core.config.discovery.DiscoveryListener) -> None: ...
    @typing.overload
    def getMaxScanTimeout(self, bindingId: java.lang.String) -> int: ...
    @typing.overload
    def getMaxScanTimeout(self, thingTypeUID: org.openhab.core.thing.ThingTypeUID) -> int: ...
    def getSupportedBindings(self) -> java.util.List[java.lang.String]: ...
    def getSupportedThingTypes(self) -> java.util.List[org.openhab.core.thing.ThingTypeUID]: ...
    def removeDiscoveryListener(self, listener: org.openhab.core.config.discovery.DiscoveryListener) -> None: ...
    def removeOlderResults(self, source: org.openhab.core.config.discovery.DiscoveryService, timestamp: int, thingTypeUIDs: typing.Union[java.util.Collection[org.openhab.core.thing.ThingTypeUID], typing.Sequence[org.openhab.core.thing.ThingTypeUID]], bridgeUID: org.openhab.core.thing.ThingUID) -> java.util.Collection[org.openhab.core.thing.ThingUID]: ...
    @typing.overload
    def startScan(self, bindingId: java.lang.String, listener: org.openhab.core.config.discovery.ScanListener) -> bool: ...
    @typing.overload
    def startScan(self, thingTypeUID: org.openhab.core.thing.ThingTypeUID, listener: org.openhab.core.config.discovery.ScanListener) -> bool: ...
    @typing.overload
    def supportsDiscovery(self, bindingId: java.lang.String) -> bool: ...
    @typing.overload
    def supportsDiscovery(self, thingTypeUID: org.openhab.core.thing.ThingTypeUID) -> bool: ...
    def thingDiscovered(self, source: org.openhab.core.config.discovery.DiscoveryService, result: org.openhab.core.config.discovery.DiscoveryResult) -> None: ...
    def thingRemoved(self, source: org.openhab.core.config.discovery.DiscoveryService, thingUID: org.openhab.core.thing.ThingUID) -> None: ...

class PersistentInbox(org.openhab.core.config.discovery.inbox.Inbox, org.openhab.core.config.discovery.DiscoveryListener, org.openhab.core.thing.ThingRegistryChangeListener):
    """
    Java class 'org.openhab.core.config.discovery.internal.PersistentInbox'
    
        Extends:
            java.lang.Object
    
        Interfaces:
            org.openhab.core.config.discovery.inbox.Inbox,
            org.openhab.core.config.discovery.DiscoveryListener,
            org.openhab.core.thing.ThingRegistryChangeListener
    
      Constructors:
        * PersistentInbox(org.openhab.core.storage.StorageService, org.openhab.core.config.discovery.DiscoveryServiceRegistry, org.openhab.core.thing.ThingRegistry, org.openhab.core.thing.ManagedThingProvider, org.openhab.core.thing.type.ThingTypeRegistry, org.openhab.core.config.core.ConfigDescriptionRegistry)
    
    """
    def __init__(self, storageService: org.openhab.core.storage.StorageService, discoveryServiceRegistry: org.openhab.core.config.discovery.DiscoveryServiceRegistry, thingRegistry: org.openhab.core.thing.ThingRegistry, thingProvider: org.openhab.core.thing.ManagedThingProvider, thingTypeRegistry: org.openhab.core.thing.type.ThingTypeRegistry, configDescriptionRegistry: org.openhab.core.config.core.ConfigDescriptionRegistry): ...
    def add(self, discoveryResult: org.openhab.core.config.discovery.DiscoveryResult) -> bool: ...
    def addInboxListener(self, listener: org.openhab.core.config.discovery.inbox.InboxListener) -> None: ...
    @typing.overload
    def added(self, object: typing.Any) -> None: ...
    @typing.overload
    def added(self, thing: org.openhab.core.thing.Thing) -> None: ...
    def approve(self, thingUID: org.openhab.core.thing.ThingUID, label: java.lang.String, newThingId: java.lang.String) -> org.openhab.core.thing.Thing: ...
    def getAll(self) -> java.util.List[org.openhab.core.config.discovery.DiscoveryResult]: ...
    def remove(self, thingUID: org.openhab.core.thing.ThingUID) -> bool: ...
    def removeInboxListener(self, listener: org.openhab.core.config.discovery.inbox.InboxListener) -> None: ...
    def removeOlderResults(self, source: org.openhab.core.config.discovery.DiscoveryService, timestamp: int, thingTypeUIDs: typing.Union[java.util.Collection[org.openhab.core.thing.ThingTypeUID], typing.Sequence[org.openhab.core.thing.ThingTypeUID]], bridgeUID: org.openhab.core.thing.ThingUID) -> java.util.Collection[org.openhab.core.thing.ThingUID]: ...
    @typing.overload
    def removed(self, object: typing.Any) -> None: ...
    @typing.overload
    def removed(self, thing: org.openhab.core.thing.Thing) -> None: ...
    def setFlag(self, thingUID: org.openhab.core.thing.ThingUID, flag: org.openhab.core.config.discovery.DiscoveryResultFlag) -> None: ...
    def stream(self) -> java.util.stream.Stream[org.openhab.core.config.discovery.DiscoveryResult]: ...
    def thingDiscovered(self, source: org.openhab.core.config.discovery.DiscoveryService, result: org.openhab.core.config.discovery.DiscoveryResult) -> None: ...
    def thingRemoved(self, source: org.openhab.core.config.discovery.DiscoveryService, thingUID: org.openhab.core.thing.ThingUID) -> None: ...
    @typing.overload
    def updated(self, object: typing.Any, object2: typing.Any) -> None: ...
    @typing.overload
    def updated(self, oldThing: org.openhab.core.thing.Thing, thing: org.openhab.core.thing.Thing) -> None: ...
